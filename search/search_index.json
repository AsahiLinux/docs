{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Asahi Linux documentation! Here, you will find documentation on the Apple Silicon platform as implemented on Mac computers with M-series SoCs. We aim to document the platform in a way that is useful for everyone, however our focus is supporting third-party operating systems, particularly Linux.</p> <p>We also have documentation on the various pieces of software required to properly support this platform, such as m1n1 and U-Boot. Documentation for software that we have created (such as m1n1) aims to be as complete as possible. Documentation for external projects (such as U-Boot) is limited to how that software is used on the Apple Silicon platform.</p>"},{"location":"#who-this-documentation-is-for","title":"Who this documentation is for","text":"<ul> <li>Operating system and kernel developers looking to implement support for Apple Silicon</li> <li>Folks interested in hacking on and reverse engineering the Apple Silicon platform</li> <li>End users looking for guides and information on supported features</li> <li>Anyone interested in the Asahi Linux project looking for more information</li> </ul> <p>Questions? Please check out the FAQ first!</p>"},{"location":"#developers","title":"Developers","text":"<p>We have extensive documentation on the platform itself, and the tooling we use to reverse engineer and develop Linux drivers for it. Check out the sidebar for places to start!</p>"},{"location":"#end-users","title":"End Users","text":"<p>Check out Feature Support for supported devices and features. If you're after documentation on something specific, use the search feature at the top of the page or check out the sidebar for places to start!</p>"},{"location":"#latest-asahi-linux-blog-posts","title":"Latest Asahi Linux blog posts","text":"<ul> <li>Beyond Gaming: X11 bridging in muvm</li> <li>AAA gaming on Asahi Linux</li> <li>Vulkan 1.3 on the M1 in 1 month</li> <li>Conformant OpenGL 4.6 on the M1</li> <li>New in Fedora Asahi Remix</li> <li>Our new flagship distro: Fedora Asahi Remix</li> <li>OpenGL 3.1 on Asahi Linux</li> <li>Paving the Road to Vulkan on Asahi Linux</li> <li>Apple GPU drivers now in Asahi Linux</li> <li>Updates galore! November 2022 Progress Report</li> <li>M2 is here! July 2022 Release &amp; Progress Report</li> <li>The first Asahi Linux Alpha Release is here!</li> </ul>"},{"location":"alt/boot-process-guide/","title":"Asahi Boot Process","text":"<p>This page explains the packages/components involved in a bootable Asahi Linux system, and how they interact with each other. It is aimed at distro packagers and people who want to roll/maintain their own builds instead of using packages. It is based on the setup used in the Arch Linux ARM-based reference distro, but should apply to most systems.</p> <p>This is a practical guide. For a more formal description/spec, including how we handle vendor firmware, see Open OS Ecosystem on Apple Silicon Macs. For information about specifically how everything is plumbed in Fedora Asahi Remix, see its How it's made page.</p>"},{"location":"alt/boot-process-guide/#boot-chain-overview","title":"Boot chain overview","text":"<p>[Apple stuff] \u2192 m1n1 stage 1 \u2192 m1n1 stage 2 \u2192 DT + U-Boot \u2192 GRUB \u2192 Linux</p> <p>m1n1 stage 1 is installed by the Asahi Linux installer from recovery mode (in step2.sh), is signed by an internal machine-specific key in the process (as part of Apple's secure boot policy), and can be considered immutable. Upgrading it should seldom be needed, we'll make tooling for this when it becomes necessary. It has the PARTUUID of the EFI system partition assigned to this OS hardcoded into it (set at install time), and chainloads m1n1 stage 2 from <code>&lt;ESP&gt;/m1n1/boot.bin</code> (the ESP must be in internal NVMe storage, no external storage is supported). It also passes through this PARTUUID to the next stage (as a to-be-set /chosen property, see below), so the next stage knows what partition it's booting from.</p> <p>An OS/distribution is in charge of maintaining and upgrading the rest of the boot components.</p> <p>m1n1 stage 2 is in charge of initializing (more) hardware, choosing the appropriate DT for this platform, filling in dynamic properties, and loading U-Boot.</p> <p>U-Boot initializes more things (e.g. keyboard, USB), provides UEFI services, and (by default, in our release configuration) loads a UEFI binary from <code>&lt;ESP&gt;/EFI/BOOT/BOOTAA64.EFI</code>, honoring the magic. Note that U-Boot both consumes, slightly modifies*, and forwards on the DT.</p> <p>GRUB is vanilla, nothing special there. You could use any other arm64 EFI binary.</p> <p>* Largely just setting the stdout-path based on whether it thinks you should be using a physical/keyboard console or a UART console.</p>"},{"location":"alt/boot-process-guide/#the-magic-esp-stuff","title":"The magic ESP stuff","text":"<p>For Asahi we have a non-standard setup where each OS install has its own EFI system partition. This makes it easier to fit in with Apple's boot picker model, since it knows nothing about EFI; from its point of view, each Asahi instance installed is its own separate OS, and therefore downstream we use a separate ESP for each. Nothing stops you from installing multiple bootloaders or OSes within one such container/ESP, but:</p> <ul> <li>We suspect this will cause pain in the future once we start integrating with security-related platform features (e.g. SEP), since it might have a concept of \"currently booted OS identity\".</li> <li>Since there can only be one set of DTs, U-Boot, and m1n1 stage 2 version per container/ESP, there is no sane way for multiple distros to cooperate to manage updates if they share one container.</li> <li>We don't have persistent EFI variable storage (and no good idea for how to do it in runtime services), which means there's no way to manage the EFI boot order. So you end up with the default only.</li> </ul> <p>Thus, if you're adding distro support for end-users, please stick to this model. An exception is USB-bootable rescue/installer images, which should be bootable by the vanilla m1n1.bin bundle that the Asahi Linux installer installs in plain UEFI container mode, from their own ESP on the USB drive containing <code>/EFI/BOOT/BOOTAA64.EFI</code> (no <code>m1n1/boot.bin</code>). Those should never try to manage the <code>boot.bin</code> in the internal ESP themselves (until/unless installed proper, thus becoming the owners of that container), and hopefully the DT situation will work out for the USB boot.</p> <p>The PARTUUID of the EFI system partition assigned to the currently booted OS is set by m1n1 as the <code>asahi,efi-system-partition</code> property of the <code>/chosen</code> device tree node, which can be read from Linux at <code>/proc/device-tree/chosen/asahi,efi-system-partition</code>. Our U-Boot branch also uses this to find the right ESP.</p>"},{"location":"alt/boot-process-guide/#version-interactions","title":"Version interactions","text":"<p>Here's where it gets a bit hairy. m1n1, u-boot, Linux, and the device trees have somewhat complex and subtle version interdependencies.</p> <ul> <li>m1n1 stage 2 is in charge of some hardware init, and patching in dynamic values into the device trees. This means that newer kernel hardware support often depends on a m1n1 update, either to initialize things or to add more device tree data, or both.<ul> <li>In general, we prefer to keep Linux drivers simple and put \"magic\" init (e.g. random magic sets of register writes, which Apple loves to describe in their variant of a DT) in m1n1. Same with things related to the memory controller, clock configurations that we can reasonably leave static, etc. The exception is when Linux has no choice but to do this dynamically at runtime. Apple likes to leave way too much to the XNU kernel (which m1n1 replaces), including ridiculous things like turning on the system-level L3 cache, and we don't want Linux to have to deal with that. This also highly increases our chances of existing kernels working (at least partially) on newer SoCs/platforms with only DT changes, which is good for e.g. forward-compatibility of distro install images. For example, PCIe on M2 required no driver-level changes, only changes to the m1n1 initialization.</li> </ul> </li> <li>U-Boot generally doesn't change much once properly brought up on any given SoC, and only cares about a subset of DT info.</li> <li>Linux needs DT data to bring up hardware, so new hardware needs DT updates. Our canonical DT repository is part of our Linux tree itself, but remember changes here often need m1n1 (stage 2) updates to make things actually work.</li> </ul> <p>In an ideal world where everything is upstream and we understand ~all the hardware, DTs should be forwards- and backwards- compatible with software versions. That is, new features require everything to be up to date, but otherwise those new features simply won't be available.</p> <p>In the real world, * DT bindings that have not been upstreamed yet are subject to incompatible changes as they go through review. We try to avoid this, but it has happened (e.g. the AIC2 IRQ controller binding changed, which notably broke booting completely for older kernels on t600x). Sometimes we can have interim DTs that have both styles of data, to maintain compat. * m1n1 should degrade gracefully when it runs into missing DT structure for the changes it wants to patch in (i.e. m1n1 version &gt; DT version), but those code paths don't get much testing. Please file a bug if you see it abort or crash when it shouldn't. * The early days of U-Boot on any given SoC might see some changes in DT dependencies (e.g. MTP keyboard support for M2 platforms goes along with DT changes, though this will degrade gracefully if missing) * In principle, it's possible for a Linux driver to crash badly if m1n1 was not updated to initialize the hardware properly (and if it's not injecting any DT props, the driver won't bail due to missing them). We obviously try to handle errors gracefully, but it's conceivable that e.g. missing power- or memory controller-related init could cause something like a hard SoC wedge when Linux tried to bring up dependent hardware. Maybe we should start stuffing the m1n1 version in the DT, so drivers can bail if something is known unsafe with older versions? * There are some DT changes that hit corner cases in the \"full compat\" ideal and aren't very easy to fix. For example, if a DT node introduces a dependency on another node (e.g. a producer-consumer relationship), even if it were optional in principle, that driver may fail to probe (or not even attempt to probe) if the producer's driver is not available, can't probe, or does not implement the proper producer function. We also have issues with power domains: some are currently marked \"always-on\" because they break something badly if turned off, but in the future we might learn how to handle this properly. If that flag is removed in newer DTs, older kernels would be in trouble.</p> <p>Since you can have multiple kernels installed, you have to pick where you source your DTs somehow. The logical choice would be the most recent kernel. For Arch, since there is only ever one installed kernel with the standard package, we get to ignore this issue (for typical users) and just always update the DTs on package updates to that version.</p> <p>TL;DR: Update your DTs when you update your kernel (unless you know they weren't touched), and also update your m1n1 to make big new stuff work.</p>"},{"location":"alt/boot-process-guide/#build-instructions","title":"Build instructions","text":"<p>Assuming everything is done natively (no cross-compiling):</p>"},{"location":"alt/boot-process-guide/#m1n1","title":"m1n1","text":"<pre><code>git clone --recursive https://github.com/AsahiLinux/m1n1\ncd m1n1\nmake ARCH= RELEASE=1\n</code></pre> <p>Note: RELEASE=1 currently just turns off verbose log output by default. You can enable it in release builds using <code>nvram boot-args=-v</code> from recoveryOS.</p> <p>Output is at <code>build/m1n1.bin</code>.</p>"},{"location":"alt/boot-process-guide/#u-boot","title":"U-Boot","text":"<pre><code>git clone https://github.com/AsahiLinux/u-boot\ncd u-boot\ngit checkout asahi-releng # this branch is what we ship to users, it has the EFI partition auto-detection stuff\nmake apple_m1_defconfig\nmake\n</code></pre> <p>Output is at <code>u-boot-nodtb.bin</code>.</p>"},{"location":"alt/boot-process-guide/#device-trees","title":"Device Trees","text":"<p>The canonical DTs are the ones in our Linux kernel tree. Building kernels is out of scope for this doc.</p> <p>Output is at <code>arch/arm64/boot/dts/apple/*.dtb</code>.</p>"},{"location":"alt/boot-process-guide/#installation","title":"Installation","text":"<p>m1n1, the set of device trees, and U-Boot are all packaged together into a single file which becomes m1n1 stage 2, loaded from <code>&lt;ESP&gt;/m1n1/boot.bin</code>. This is done by simple concatenation, using the update-m1n1 script.</p> <p>Simplified,</p> <pre><code>m1n1_dir=\"/boot/efi/m1n1\"\nsrc=/usr/lib/asahi-boot/\ntarget=\"$m1n1_dir/boot.bin\"\ndtbs=/lib/modules/*-ARCH/dtbs/*\n\ncat \"$src/m1n1.bin\" \\\n    $dtbs \\\n    &lt;(gzip -c \"$src/u-boot-nodtb.bin\") \\\n    &gt;\"${target}\"\n</code></pre> <p>Notes: * U-boot must be gzipped for m1n1 to load it reliably (this has to do with the image format not being self-delimiting) * All device trees are included; m1n1 will select the appropriate one for the given platform * The Asahi Linux kernel packages install the DTBs to <code>/lib/modules/$ver/dtbs/</code>. This is nonstandard. * You can append textual <code>var=value\\n</code> lines to the .bin to configure some things in m1n1. We'll have better tooling for this in the future, but for now it's really only for very specific cases.</p> <p>You might want to rename the old <code>m1n1.bin</code> after an update. If booting fails, you can just go into macOS or recovery mode and put the old one back, since macOS can access the FAT32 ESP just fine (<code>diskutil list</code> then mount it with <code>diskutil mount</code>).</p>"},{"location":"alt/boot-process-guide/#misc-stuff","title":"Misc stuff","text":"<p>m1n1 stuffs the Apple keyboard code into <code>/proc/device-tree/chosen/asahi,kblang-code</code> (as a big-endian u32 cell, standard for DT). The mapping is here. Feel free to start a discussion on how to standardize a proper binding for this.</p> <p>We have a whole story for how vendor firmware (i.e. firmware that is not redistributable as a distro package, but is prepared at install time) is handled. How that works is covered in detail here.</p>"},{"location":"alt/policy/","title":"Asahi Linux Distribution Guidelines","text":"<p>Asahi Linux exists to reverse engineer, document, and ultimately implement Linux support for the Apple Silicon platform. While Fedora Asahi Remix is our flagship distribution, representing the state of the art of Linux support on Apple Silicon, we have always encouraged interested parties representing other distributions (and even other FLOSS operating systems like OpenBSD) to implement support for the platform.</p> <p>Traditionally, it has been unclear whether or not these efforts are officially endorsed by the Asahi Linux project. This has led to frustration and confusion on the part of users, distro maintainers, and Asahi developers alike. Some distros have been semi-integrated into the project on account of being the distro of choice of our developers, while others are listed as \"supported\" in our documentation despite being drive-by attempts at support led by a single person who has long since given up.</p> <p>To remedy this situation, we have compiled a set of guidelines for distros looking to implement support for Apple Silicon. We heavily encourage all distributions to strive toward them in the interests of a consistently good experience for all Apple Silicon users regardless of their distribution of choice.</p> <p>These criteria are entirely optional. Everyone is of course welcome to experiment with and enjoy their favourite distribution on the Apple Silicon platform, and we will always enable and encourage this. These guidelines are aimed at mature/mainstream distributions interested in supporting Apple Silicon in an official or semi-official capacity. Distros which demonstrate adherence to these guidelines will be eligible for listing in our documentation as viable alternatives to Fedora Asahi Remix.</p>"},{"location":"alt/policy/#required-reading","title":"Required reading","text":"<p>Please familiarise yourself with the Introduction to Apple Silicon, Open OS Platform Integration, and Boot Process Guide documents before continuing.</p>"},{"location":"alt/policy/#official-buy-in","title":"Official buy-in","text":"<p>Your project to implement Apple Silicon support in your distro of choice must be directly supported - or otherwise acknowledged - by your distro's official maintainers. This may vary depending on your distro's policy and organisational structure, however typically this will take the form of an official taskforce/group endorsed by the distro, e.g. the Fedora Asahi SIG, Gentoo Asahi Project, or Debian's Team Bananas.</p>"},{"location":"alt/policy/#complete-and-up-to-date-packages","title":"Complete and up to date packages","text":"<p>You must have the following list of packages present in your distro. Preferably, these will be in official package repositories. However, it is acceptable for them to be in a third-party repository (e.g. Fedora COPR, Portage Overlay) provided that your repository has been endorsed by your distro's official maintainers.</p> <ul> <li>The Asahi Linux fork of the Linux kernel</li> <li>m1n1</li> <li>The Asahi Linux fork of Das U-Boot</li> <li>asahi-scripts or equivalent configuration presets/scripts</li> <li>tiny-dfr</li> <li>asahi-firmware (including its dependency lzfse)</li> <li>speakersafetyd</li> <li>asahi-audio (and its LV2 plugin dependencies)</li> </ul> <p>New versions of the above software must be packaged in your distro's bleeding edge (e.g. Fedora Rawhide or Gentoo's unstable package stream) within 2 weeks of becoming available upstream.</p>"},{"location":"alt/policy/#installation-procedure","title":"Installation procedure","text":"<p>Asahi Linux uses Das U-Boot's UEFI environment to chainload standard UEFI bootloaders, such as GRUB and systemd-boot. The Asahi Installer is capable of setting up a minimal UEFI-only environment capable of booting UEFI executables on removable media. This provides users an installation experience that is almost identical to a standard amd64-based workstation. Building Apple Silicon support into your distro's existing AArch64 bootable media (e.g. via a secondary Asahi kernel selectable at the UEFI bootloader) allows the reuse of all your distro's existing upstream AArch64 resources, and negates the need to fork the Asahi Installer.</p> <p>When selecting the minimal UEFI environment installation option, the Asahi Installer can be directed to create free space for a future root filesystem. Your guide must instruct users to use this facility to prepare their disk for your distribution rather than attempting to manually shrink or alter APFS containers via your installer.</p> <p>Your installation process should be as close to your distro's standard installation procedure as possible. If your distro has an officially endorsed automatic installer (e.g. Anaconda), then it must be used. If your distro follows a manual guided installation (e.g. Gentoo Handbook), then you must have a clear and easy to follow guide specific to Apple Silicon. You must not instruct your users to materially deviate from your distro's prescribed official installation procedure. </p> <p>If your installer attempts to partition the user's disk automatically, then you should explicitly warn your users against making use of it if it cannot be made to ignore APFS containers. Altering or destroying any of the on-disk APFS containers will require your users to DFU restore their Mac.</p> <p>Instead, your installation procedure must encourage manual partitioning, with a section in your guide explaining the dangers of carelessly altering the partition table. Users must be made aware that it is never safe to alter or rearrange any disk structure other than the free space left by the Asahi Installer.</p> <p>Note: We are actively working on improving the safety of common disk partitioning and installation tooling. We may tighten these requirements in the future as tools such as cfdisk, blivet, Anaconda, etc. become capable of automatically handling Apple Silicon devices safely.</p> <p>Your installation must install the Asahi-specific packages listed above as part of the installation procedure, or a subset suitable for the installation type. For example, server operating systems may choose to forego automatically installing the audio enablement packages.</p>"},{"location":"alt/policy/#infrastructure-and-hosting","title":"Infrastructure and hosting","text":"<p>You or your distro will assume all responsibility for any required hosting or infrastructure other than the Asahi Installer. This includes any documentation, packages, CI runners to build packages, CDNs etc. The Asahi Linux project cannot do this for you.</p>"},{"location":"alt/policy/#support","title":"Support","text":"<p>Your distro must have first-class, mature support for AArch64/ARM64 upstream.</p> <p>You or your distro will provide official support for distro-specific issues relating to the Apple Silicon platform. This includes acting as the first point of contact for users when they encounter bugs or other issues with any packaged software. Apple Silicon should be a first-class platform within your distro's broader AArch64/ARM64 support.</p>"},{"location":"alt/policy/#using-a-forked-installer-and-disk-image","title":"Using a forked installer and disk image","text":"<p>There are two supported mechanisms for installing Linux on Apple Silicon Macs. As an alternative to the standard UEFI media method described above, the Asahi Installer can free space on the NVMe drive and then flash a prebuilt OS image into that space. This mimics other AArch64 embedded platforms, such as the Raspberry Pi, and provides a way for users not familiar or confident with installing Linux an easy way to get started at the expense of customisability. For more details on how this works, please see AsahiLinux/asahi-installer.</p> <p>We expect distros to fork, modify, and host the reference Asahi Installer themselves if choosing to go down this route. We cannot host your images or make distro-specific changes to our reference installer.</p> <p>Your disk image based installation should follow these guidelines:</p> <ul> <li>The installer and disk images are built and hosted by the distro officially</li> <li>The disk images are ZIPped and streamable from the Web</li> <li>The OS scrambles the root partition's UUID on first boot</li> <li>The OS grows its root partition into trailing free space on first boot</li> <li>The disk image includes all Asahi-specific packages</li> <li>All supported hardware is enabled and working from the first boot</li> <li>Disk images are reasonably up to date</li> <li>The install flow for all images is tested before release</li> <li>All disk images are thoroughly tested on multiple devices before release</li> </ul> <p>It should be noted that the disk image installation flow is a curiosity of early bringup work that ended up sticking. While this installation method has its advantages, it is not the way forward for workstation-class hardware and contributes to the stigma of AArch64 devices being janky developers' toys. We heavily encourage distros to invest time in building AArch64 bootable media with Apple Silicon support, and leverage the reference installer's minimal UEFI environment. As mentioned above, this aligns closer with user expectations and 40 years of precedence when dealing with workstation-grade hardware.</p> <p>We are actively working on improving the tooling required to make bootable media installs safer for users. Once we consider mainstream disk partitioning software and live media installation tooling sufficiently foolproof on Apple Silicon devices, we may reconsider the need to support the image-based installation flow going forward.</p>"},{"location":"alt/policy/#disendorsement","title":"Disendorsement","text":"<p>Through diligent QA and attention to detail, Asahi Linux has become well-regarded as one of the best desktop Linux experiences available. This is a great source of pride for us, and we are determined to meet the high user expectations that come with such a reputation. We expect officially endorsed distros to strive to meet those same expectations.</p> <p>We hope that it will never be necessary to do so, but we may be required to disendorse distros that are not meeting user or Asahi Linux expectations. Disendorsed distros will be delisted from our documentation. Depending on the circumstances, we may also discourage use of the disendorsed distro.</p> <p>Reasons for disendorsement may include:</p> <ul> <li>A lack of official distro support for the Apple Silicon platform</li> <li>Frequent or recurring distro-specific issues that cannot be reproduced   on Fedora Asahi Remix, especially if such issues are not addressed in   a timely fashion</li> <li>Repeated failure to keep Asahi packages current</li> <li>Failure to keep installer disk images current (if image-based installation is offered)</li> </ul>"},{"location":"fw/adt/","title":"Apple Device Tree (ADT)","text":"<p>When Apple firmware boots a kernel, it passes a device tree in a binary format. This format is very similar to, but different from, the Open Firmware standard expected by Linux.</p> <p>Like Linux devicetrees, the Apple device tree (ADT) encodes a number of untyped byte arrays (properties) in a hierarchy of nodes. These describe the available hardware, or provide other information that Apple thinks the firmware might need to tell the kernel about. This includes identifying and secret information like serial numbers and WiFi keys.</p> <p>The main difference between ADTs and Linux DTs is byte order; since properties are untyped, we can't automatically correct for that.</p>"},{"location":"fw/adt/#obtaining-your-adt","title":"Obtaining your ADT","text":"<p>Given hardware, you can access your ADT in a number of ways.</p>"},{"location":"fw/adt/#option-1-via-m1n1-debug-console","title":"Option 1: via m1n1 debug console.","text":"<p>The easiest way is probably using m1n1 via adt.py</p> <pre><code>cd m1n1/proxyclient ; python -m m1n1.adt --retrieve dt.bin\n</code></pre> <p>This will write a file called \"dt.bin\" containing the raw (binary) ADT and print the decoded ADT.</p>"},{"location":"fw/adt/#option-2-via-macos-im4p-files-note-these-are-missing-details-filled-in-by-iboot-during-boot","title":"Option 2: via macOS im4p files (Note: these are missing details filled in by iBoot during boot)","text":""},{"location":"fw/adt/#img4lib","title":"img4lib","text":"<p>Get a copy of xerub's img4lib</p> <pre><code>git clone https://github.com/xerub/img4lib\ncd img4lib\nmake -C lzfse\nmake\nmake install\n</code></pre>"},{"location":"fw/adt/#img4tool","title":"img4tool","text":"<p>Get a copy of tihmstar's img4tool (you will also need his libgeneral as well as autoconf, automake, libtool, pkg-config, openssl and libplist-2.0).</p> <pre><code>git clone https://github.com/tihmstar/libgeneral.git\ngit clone https://github.com/tihmstar/img4tool.git\n</code></pre> <p>then for each </p> <pre><code>./autogen.sh\nmake\nmake install\n</code></pre>"},{"location":"fw/adt/#obtaining-device-tree-files","title":"Obtaining device tree files","text":"<p>copy the im4p file from the below directory. See Devices for Machine 'j' model details.</p> <p><code>/System/Volumes/Preboot/[UUID]/restore/Firmware/all_flash/DeviceTree.{model}.im4p</code></p> <p>If the dir doesn't exist try disabling csrutil in recovery mode, going to settings and enabling terminal to access all files, or start from <code>Volumes/Macintosh HD/</code> because it may be symlinked. If it's still not accessible, try good ol <code>sudo find . -type f -name '*.im4p'</code>.</p> <p>then use img4tool to extract the im4p file into a .bin file e.g.</p> <pre><code>img4tool -e DeviceTree.j274ap.im4p -o j274.bin\n</code></pre> <p>To do the same with img4lib, do</p> <pre><code>img4 -i DeviceTree.j274ap.im4p -o j274.bin\n</code></pre>"},{"location":"fw/adt/#option-3-from-macos","title":"Option 3: From macOS","text":"<p>You can get a textual representation of the ADT directly from macOS by running:</p> <pre><code>ioreg -p IODeviceTree -l | cat\n</code></pre> <p>While this does not require decoding, it outputs much less information than using m1n1 (see below).</p>"},{"location":"fw/adt/#decoding-an-adt","title":"Decoding an ADT","text":"<p>after m1n1 installation (see repo page)</p> <p><code>cd m1n1/proxyclient</code></p> <p>get construct python library (not a construct.py file, it's a library)</p> <p><code>pip install construct</code></p> <p>copy obtained j{*}.bin file into proxyclient dir &amp;&amp; extract by:</p> <p><code>python -m m1n1.adt j{*}.bin</code></p> <p>You can also get a memory map with the -a option:</p> <p><code>python -m m1n1.adt -a j{*}.bin</code> </p> <p>Other ways?</p>"},{"location":"fw/boot/","title":"Apple Silicon Boot Flow","text":"<p>Apple Silicon devices seem to follow a boot flow very similar to modern iOS devices.</p>"},{"location":"fw/boot/#stage-0-securerom","title":"Stage 0 (SecureROM)","text":"<p>This stage is located in the boot ROM. Among others, it verifies, loads and executes normal stage 1 from NOR. If this fails, it falls back to DFU and waits for an iBSS loader to be sent, before continuing with the DFU flow at stage 1.</p>"},{"location":"fw/boot/#normal-flow","title":"Normal flow","text":""},{"location":"fw/boot/#stage-1-llbiboot1","title":"Stage 1 (LLB/iBoot1)","text":"<p>This stage is the primary early loader, located in the on-board NOR. This boot stage very roughly goes as follows:</p> <ul> <li>Read the <code>boot-volume</code> variable from NVRAM: its format is <code>&lt;gpt-partition-type-uuid&gt;:&lt;gpt-partition-uuid&gt;:&lt;volume-group-uuid&gt;</code>. Other related variables seem to be <code>update-volume</code> and <code>upgrade-boot-volume</code>, possibly selected by metadata inside the <code>boot-info-payload</code> variable;</li> <li>Get the local policy hash:</li> <li>First try the local proposed hash (SEP command 11);</li> <li>If that is not available, get the local blessed hash (SEP command 14)</li> <li>Read the local boot policy, located on the iSCPreboot partition at <code>/&lt;volume-group-uuid&gt;/LocalPolicy/&lt;policy-hash&gt;.img4</code>. This boot policy has the following specific metadata keys (4CCs):</li> <li><code>vuid</code>: UUID: Volume group UUID - same as above</li> <li><code>kuid</code>: UUID: KEK group UUID</li> <li><code>lpnh</code>: SHA384: Local policy nonce hash</li> <li><code>rpnh</code>: SHA384: Remote policy nonce hash</li> <li><code>ronh</code>: SHA384: Recovery OS policy nonce hash</li> <li><code>nsih</code>: SHA384: Next-stage IMG4 hash</li> <li><code>coih</code>: SHA384: fuOS (custom kernelcache) IMG4 hash</li> <li><code>auxp</code>: SHA384: Auxiliary user-authorized kernel extensions hash</li> <li><code>auxi</code>: SHA384: Auxiliary kernel cache IMG4 hash</li> <li><code>auxr</code>: SHA384: Auxiliary kernel extension recept hash</li> <li><code>prot</code>: SHA384: Paired Recovery manifest hash</li> <li><code>hrlp</code>: bool: Recovery OS local policy is Secure Enclave\u2013signed</li> <li><code>lobo</code>: bool: Local boot policy</li> <li><code>love</code>: bool: Local OS version</li> <li><code>smb0</code>: bool: Reduced security enabled</li> <li><code>smb1</code>: bool: Permissive security enabled</li> <li><code>smb2</code>: bool: Third-party kernel extensions enabled</li> <li><code>smb3</code>: bool: Manual mobile device management (MDM) enrollment</li> <li><code>smb4</code>: bool?: MDM device enrollment program disabled</li> <li><code>sip0</code>: u16: SIP customized</li> <li><code>sip1</code>: bool: Signed system volume (<code>csrutil authenticated-root</code>) disabled</li> <li><code>sip2</code>: bool: CTRR (Configurable Text Read-only Region) disabled</li> <li><code>sip3</code>: bool: <code>boot-args</code> filtering disabled</li> </ul> <p>And optionally the following linked manifests, each located at <code>/&lt;volume-group-uuid&gt;/LocalPolicy/&lt;policy-hash&gt;.&lt;id&gt;.im4m</code>   - <code>auxk</code>: AuxKC (third party kext) manifest   - <code>fuos</code>: fuOS (custom kernelcache) manifest</p> <ul> <li> <p>If loading the next stage:</p> </li> <li> <p>The boot directory is located at the target partition Preboot subvolume, at path <code>/&lt;volume-uuid&gt;/boot/&lt;local-policy.metadata.nsih&gt;</code>;</p> </li> <li> <p>Decrypt, verify and execute <code>&lt;boot-dir&gt;/usr/standalone/firmware/iBoot.img4</code> with the device tree and other firmware files in the same directory. No evidence towards other metadata descriptors yet.</p> </li> <li> <p>If loading a custom stage (fuOS):</p> </li> <li> <p>...</p> </li> </ul> <p>If it fails at any point during this, it will either error out or fall back to DFU, waiting for an iBEC loader to be sent, before continuing with the DFU flow at stage 2.</p>"},{"location":"fw/boot/#stage-2-iboot2","title":"Stage 2 (iBoot2)","text":"<p>This stage is the OS-level loader, located inside the OS partition and shipped as part of macOS. It loads the rest of the system.</p>"},{"location":"fw/boot/#dfu-flow","title":"DFU flow","text":""},{"location":"fw/boot/#stage-1-ibss","title":"Stage 1 (iBSS)","text":"<p>This stage is sent to the device by the \"reviving\" host. It bootstraps, verifies and runs the second stage, iBEC.</p>"},{"location":"fw/boot/#stage-2-ibec","title":"Stage 2 (iBEC)","text":""},{"location":"fw/boot/#modes","title":"Modes","text":"<p>Once booted, the AP can be in one of several boot modes, as confirmed by the SEP:</p> ID Name 0 macOS 1 1TR (\"one true\" recoveryOS) 2 recoveryOS (\"ordinary\" recoveryOS) 3 kcOS 4 restoreOS 255 unknown <p>The SEP only allows execution of certain commands (such as editing the boot policy) in 1TR, or it will fail with error 11, \"AP boot mode\".</p>"},{"location":"fw/macho-boot-protocol/","title":"MachO Boot Protocol","text":""},{"location":"fw/macho-boot-protocol/#boot-protocol","title":"Boot protocol","text":""},{"location":"fw/macho-boot-protocol/#memory","title":"Memory","text":"<p>Memory starts at 0x8_0000_0000.</p> <p>The memory when iBoot calls us looks like this:</p> <pre><code>+==========================+ &lt;-- bottom of RAM (0x8_0000_0000)\n| Coprocessor carveouts,   |\n| iBoot stuff, etc.        |\n+==========================+ &lt;-- boot_args-&gt;phys_base, VM = boot_args-&gt;virt_base\n| kASLR slide gap (&lt;32MiB) |\n+==========================+\n| Device Tree (ADT)        | /chosen/memory-map.DeviceTree\n+--------------------------+\n| Trust Cache              | /chosen/memory-map.TrustCache\n+==========================+ &lt;-- Mach-O lowest vmaddr mapped to here (+ slide!)\n| Mach-O base (header)     | /chosen/memory-map.Kernel-mach_header\n+--                      --+\n| Mach-O segments...       | /chosen/memory-map.Kernel-(segment ID)...\n+--                      --+\n| m1n1: Payload region     | /chosen/memory-map.Kernel-PYLD (64MB currently)\n+==========================+\n| SEP Firmware             | /chosen/memory-map.SEPFW\n+--------------------------+ &lt;-- boot_args\n| BootArgs                 | /chosen/memory-map.BootArgs\n+==========================+ &lt;-- boot_args-&gt;top_of_kdata\n|                          |\n|      (Free memory)       |\n| (incl. iBoot trampoline) |\n|                          |\n+==========================+ &lt;-- boot_args-&gt;top_of_kdata + boot_args-&gt;mem_size\n| Video memory, SEP        |\n| carveout, and more       |\n+==========================+ &lt;-- 0x8_0000_0000 + boot_args.mem_size_actual\n</code></pre>"},{"location":"fw/macho-boot-protocol/#about-pointers","title":"About pointers","text":"<p>There are four kinds of addresses you might come across:</p> <ul> <li>Physical addresses</li> <li>m1n1 unrelocated offsets (relative to 0)</li> <li>Mach-O virtual addresses</li> <li>kASLR-slid virtual addresses</li> </ul> <p>Physical addresses are the only thing you should care about.</p> <p>m1n1 unrelocated offsets are only used by the m1n1 startup code prior to running relocations, and the related linker script info. The C environment is properly position-adjusted after those, so you should never see them there. However, if you're debugging m1n1 and printing pointers, and want to map those back to the raw ELF file, you will have to subtract the m1n1 load offset to get the unrelocated offset.</p> <p>Virtual addresses have no significance; this is just used because Mach-O has no concept of physical addresses, and the whole set-up assumes Darwin will map itself in a certain way. For our purposes, a vaddr is just <code>paddr + ba.virt_base - ba.phys_base</code>. m1n1 does not use top-half virtual addresses, and Linux does its own thing that has nothing to do with Darwin.</p> <p>In addition, there are two virtual address maps: whatever's in the Mach-O, and the pointers iBoot actually passes us. The latter is offset by the kASLR slide, which also affects vaddrs. This makes everything more confusing.</p> <p>Thus, for any Darwin kASLR-slid virtual pointer received from iBoot, we compute <code>vaddr - ba.virt_base + ba.phys_base</code> and that's all we care about; conversely, only the linker script (and the Mach-O header generation within) cares about Mach-O unslid virtual addresses. If you're writing m1n1 code you will never see those. Really, don't try to think about it too much, you'll just confuse yourself.</p>"},{"location":"fw/macho-boot-protocol/#entry","title":"Entry","text":"<p>iBoot enters us at the entrypoint defined in the (ridiculous) Mach-O data structure as an unslid vaddr. Entry is with the MMU off. <code>x0</code> points to the boot_args structure.</p> <p>In addition, iBoot sets and locks the RVBAR of the boot CPU to be the top of the page that the entrypoint lives in. This cannot be changed after boot, and thus this address will always have a special significance and have to be treated as resident bootloader code. Right now the practical significance is unclear, but presumably after a resume from deep sleep, the boot CPU will start executing code here. Note that this does not lock the actual CPU vectors (that can be changed freely in <code>VBAR_EL2</code>) nor does it affect the RVBAR of secondary CPUs (which can be freely set prior to issuing the start command).</p>"},{"location":"fw/macho-boot-protocol/#m1n1-memory-layout","title":"m1n1 memory layout","text":"<p>When running m1n1 initially, the relevant memory looks like this:</p> <pre><code>+==========================+\n| Device Tree (ADT)        | /chosen/memory-map.DeviceTree\n+--------------------------+\n| Trust Cache              | /chosen/memory-map.TrustCache\n+==========================+ &lt;-- _base\n| Mach-O header            | /chosen/memory-map.Kernel-_HDR\n+--                      --+ &lt;-- _text_start, _vectors_start\n| m1n1 .text               | /chosen/memory-map.Kernel-TEXT\n+--                      --+\n| m1n1 .rodata             | /chosen/memory-map.Kernel-RODA\n+--                      --+ &lt;-- _data_start\n| m1n1 .data &amp; .bss        | /chosen/memory-map.Kernel-DATA\n+--                      --+ &lt;-- _payload_start\n| m1n1 Payload region      | /chosen/memory-map.Kernel-PYLD (64MB currently)\n+==========================+ &lt;-- _payload_end\n| SEP Firmware             | /chosen/memory-map.SEPFW\n+--------------------------+ &lt;-- boot_args\n| BootArgs                 | /chosen/memory-map.BootArgs\n+==========================+ &lt;-- boot_args-&gt;top_of_kdata, heap_base\n| m1n1 heapblock           | (&gt;=128MB)\n+--                      --+ &lt;-- ProxyUtils.heap_base (m1n1 heapblock in use end + 128MB)\n| Python heap              | (1 GiB)\n+--                      --+\n|      (Unused memory)     |\n+==========================+ &lt;-- boot_args-&gt;top_of_kdata + boot_args-&gt;mem_size\n</code></pre> <p>m1n1's heapblock area (used as a backend for malloc, and for loading payloads) starts at <code>boot_args.top_of_kdata</code> and has no bound at this time. When using proxyclient, ProxyUtils will set up a Python heap base 128MiB above whatever the current heapblock top is, which means m1n1 can use up to 128MiB of additional memory before it runs into Python-side structures. Note that fresh executions of the Python side will re-initialize their heap starting at whatever the current m1n1 end is, so e.g. m1n1-side memory leaks on each Python execution are not an immediate problem until you run out of total RAM.</p> <p>When chainloading another Mach-O payload, the next stage overwrites m1n1 in-place. The chainload.py Mach-O loading code skips the padding end of the m1n1 payload section (except 4 zero bytes as a marker), so SEP firmware and BootArgs follow directly in what would've otherwise been the m1n1 payload area, saving RAM. Relocating the SEP firmware is optional; if it is not enabled, it remains where it is, and top_of_kdata is kept untouched. Unless m1n1 grows by more than the size of its payload region, this should be safe.</p>"},{"location":"fw/nvram/","title":"NVRAM","text":""},{"location":"fw/nvram/#types","title":"Types","text":"<ul> <li><code>string</code>: A standard string.</li> <li><code>binary</code>: A URL-encoded string containing binary data.</li> <li><code>boolean</code>: A string with value of either <code>true</code> or <code>false</code>.</li> <li><code>int</code>: A decimal integer.</li> <li><code>bin-int(n)</code>: A <code>binary</code>-encoded integer, little-endian, <code>n</code> bytes.</li> <li><code>hex-int</code>: A hexadecimal integer.</li> <li><code>volume</code>: A string of format <code>&lt;gpt-partition-type-uuid&gt;:&lt;gpt-partition-uuid&gt;:&lt;volume-group-uuid&gt;</code>. The GPT partition UUID seems to be a bit weird, with its first three components byteswapped.</li> </ul>"},{"location":"fw/nvram/#values","title":"Values","text":""},{"location":"fw/nvram/#boot","title":"Boot","text":"<ul> <li><code>auto-boot</code>: <code>boolean</code>: Whether to automatically boot. Setting this to <code>false</code> on at least the Mac M1 mini causes a boot failure;</li> <li><code>boot-args</code>: <code>string</code>: Boot arguments to pass to the kernel. Possibly filtered by the boot policy.</li> <li><code>boot-command</code>: <code>string</code>: Example: <code>fsboot</code>.</li> <li><code>boot-info-payload</code>: <code>binary</code>: Some kind of opaque, high-entropy payload.</li> <li><code>boot-note</code>: <code>binary</code>: Unknown. Example: <code>%00%00%00%00%00%00%00%bb%0ez%e5%00%00%00%00%a0q%d4%07%08%00%00%00</code>.</li> <li><code>boot-volume</code>: <code>volume</code>: Default boot volume.</li> <li><code>failboot-breadcrumbs</code>: <code>string</code>: Space-separated codes generated by various parts of the boot progress. Example: <code>3000c(706d7066) 3000d 30010 f0200 f0007(706d7066) 3000c(0) 3000d 40038(958000) 40039(1530000) 4003a(0) 3000f(64747265) 3000c(64747265) 40029 3000d 30010 3000f(69626474) 3000c(69626474) 40029 3000d 30010 3000f(69737973) 3000c(69737973) 3000d 30010 3000f(63737973) 3000c(63737973) 3000d 30010 3000f(62737463) 3000c(62737463) 3000d 30010 3000f(74727374) 3000c(74727374) 3000d 30010 3000f(66756f73) 40060004 30011 30007 &lt;COMMIT&gt; 401d000c &lt;COMMIT&gt; &lt;BOOT&gt; 1c002b(2006300) 3000f(0) 3000c(0) 3000d 30010 3000f(69626f74) 3000c(69626f74) 40040204 40040023 4003000e 30011 30007 401d000f(ffffffff) &lt;COMMIT&gt;</code>.</li> <li><code>nonce-seeds</code>: <code>binary</code></li> <li><code>panicmedic-timestamps</code>: <code>hex-int</code>: Nanosecond-precision UNIX timestamp, presumably when the last panic occurred.</li> <li><code>policy-nonce-digests</code>: <code>binary</code></li> <li><code>upgrade-boot-volume</code>: <code>volume</code></li> </ul>"},{"location":"fw/nvram/#updates","title":"Updates","text":"<ul> <li><code>IDInstallerDataV1</code>: <code>binary:lzvn:bin-plist</code>: Compressed binary plist containing information about the most recent installer action. Seems to be absent starting somewhere between macOS 10.12 and 11.0.</li> <li><code>IDInstallerDataV2</code>: <code>binary:lzvn:bin-plist</code>: Compressed binary plist containing an array of information items in the same format as <code>IDInstallerDataV1</code>.</li> <li><code>ota-updateType</code>: <code>string</code>: Type of over-the-air updates to apply. Example: <code>incremental</code>.</li> <li><code>update-volume</code>: <code>volume</code></li> </ul>"},{"location":"fw/nvram/#hardware","title":"Hardware","text":"<ul> <li><code>bluetoothActiveControllerInfo</code>: <code>binary</code></li> <li><code>bluetoothInternalControllerInfo</code>: <code>binary</code></li> <li><code>ota-controllerVersion</code>: <code>string</code>: Over-the-air update controller identifier. Examples: <code>SUMacController-1.10</code> (Mac Mini M1), <code>SUS-1.0</code> (iPhone, iPad).</li> <li><code>usbcfwflasherResult</code>: <code>string</code>: Example: <code>No errors</code>.</li> </ul>"},{"location":"fw/nvram/#settings","title":"Settings","text":"<ul> <li><code>backlight-nits</code>: <code>hex-int</code>: Presumably the screen backlight strength. Mac Mini M1 example: <code>0x008c0000</code>.</li> <li><code>current-network</code>: <code>binary</code>: Last Wi-Fi networks to have connected to.</li> <li><code>fmm-computer-name</code>: <code>string</code>: Computer name.</li> <li><code>good-samaritan-message</code>: <code>string</code>: Message to show on the boot/password screen in case the device is lost and found.</li> <li><code>preferred-networks</code>: <code>binary</code>: List of stored Wi-Fi networks.</li> <li><code>preferred-count</code>: <code>int</code>: Number of networks in <code>preferred-networks</code>, if not 1.</li> <li><code>prev-lang:kbd</code>: <code>string</code>: Keyboard layout, format: <code>&lt;lang&gt;:&lt;locale-id&gt;</code>, reference. Example: <code>en-GB:26</code>.</li> <li><code>prev-lang-diags:kbd</code>: <code>string</code>: Keyboard layout in diagnostics: Example: <code>en-GB</code>.</li> <li><code>SystemAudioVolume</code>: <code>bin-int(8)</code>: Volume. Example: <code>%80</code> (128).</li> <li><code>SystemAudioVolumeExtension</code>: <code>bin-int(16)</code>: Example: <code>%ff%7f</code> (32767).</li> </ul>"},{"location":"fw/nvram/#misc","title":"Misc","text":"<ul> <li><code>_kdp_ipstr</code>: <code>string</code>: Currently assigned IPv4.</li> <li><code>lts-persistance</code>: <code>binary</code></li> </ul>"},{"location":"fw/nvram/#examples","title":"Examples","text":""},{"location":"fw/nvram/#idinstallerdatav2","title":"<code>IDInstallerDataV2</code>","text":"Example with successful Big Sur 11.2 beta 1 (20D5029f) upgrade <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;array&gt;\n    &lt;dict&gt;\n        &lt;key&gt;505&lt;/key&gt;\n        &lt;string&gt;auth not needed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;505&lt;/key&gt;\n        &lt;string&gt;auth not needed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;0&lt;/key&gt;\n        &lt;string&gt;20D5029f&lt;/string&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;passed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;upgrade&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;505&lt;/key&gt;\n        &lt;string&gt;auth not needed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;505&lt;/key&gt;\n        &lt;string&gt;auth not needed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;505&lt;/key&gt;\n        &lt;string&gt;auth not needed&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;key recovery assistant&lt;/string&gt;\n    &lt;/dict&gt;\n&lt;/array&gt;\n&lt;/plist&gt;\n</code></pre> Example with crashed upgrade <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;array&gt;\n    &lt;dict&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;crashed&lt;/string&gt;\n        &lt;key&gt;102&lt;/key&gt;\n        &lt;string&gt;initializer&lt;/string&gt;\n        &lt;key&gt;103&lt;/key&gt;\n        &lt;string&gt;1&lt;/string&gt;\n        &lt;key&gt;7&lt;/key&gt;\n        &lt;string&gt;NO&lt;/string&gt;\n    &lt;/dict&gt;\n&lt;/array&gt;\n&lt;/plist&gt;\n</code></pre> Example with successful Sierra 10.12.2 (16C67) upgrade <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;array&gt;\n    &lt;dict&gt;\n        &lt;key&gt;0&lt;/key&gt;\n        &lt;string&gt;16C67&lt;/string&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;passed&lt;/string&gt;\n        &lt;key&gt;103&lt;/key&gt;\n        &lt;string&gt;1&lt;/string&gt;\n        &lt;key&gt;202&lt;/key&gt;\n        &lt;string&gt;832.499040&lt;/string&gt;\n        &lt;key&gt;203&lt;/key&gt;\n        &lt;string&gt;41.700535&lt;/string&gt;\n        &lt;key&gt;205&lt;/key&gt;\n        &lt;string&gt;30.318743&lt;/string&gt;\n        &lt;key&gt;206&lt;/key&gt;\n        &lt;string&gt;0.003648&lt;/string&gt;\n        &lt;key&gt;207&lt;/key&gt;\n        &lt;string&gt;0.156793&lt;/string&gt;\n        &lt;key&gt;208&lt;/key&gt;\n        &lt;string&gt;2.215885&lt;/string&gt;\n        &lt;key&gt;209&lt;/key&gt;\n        &lt;string&gt;8.130921&lt;/string&gt;\n        &lt;key&gt;299&lt;/key&gt;\n        &lt;string&gt;0.212016&lt;/string&gt;\n        &lt;key&gt;3&lt;/key&gt;\n        &lt;string&gt;solid state&lt;/string&gt;\n        &lt;key&gt;4&lt;/key&gt;\n        &lt;string&gt;unencrypted&lt;/string&gt;\n        &lt;key&gt;5&lt;/key&gt;\n        &lt;string&gt;case sensitive&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;clean&lt;/string&gt;\n        &lt;key&gt;7&lt;/key&gt;\n        &lt;string&gt;NO&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;0&lt;/key&gt;\n        &lt;string&gt;16C67&lt;/string&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;passed&lt;/string&gt;\n        &lt;key&gt;103&lt;/key&gt;\n        &lt;string&gt;2&lt;/string&gt;\n        &lt;key&gt;202&lt;/key&gt;\n        &lt;string&gt;802.017327&lt;/string&gt;\n        &lt;key&gt;203&lt;/key&gt;\n        &lt;string&gt;29.902674&lt;/string&gt;\n        &lt;key&gt;205&lt;/key&gt;\n        &lt;string&gt;4.379149&lt;/string&gt;\n        &lt;key&gt;206&lt;/key&gt;\n        &lt;string&gt;0.003310&lt;/string&gt;\n        &lt;key&gt;207&lt;/key&gt;\n        &lt;string&gt;0.156726&lt;/string&gt;\n        &lt;key&gt;208&lt;/key&gt;\n        &lt;string&gt;2.214545&lt;/string&gt;\n        &lt;key&gt;209&lt;/key&gt;\n        &lt;string&gt;10.050913&lt;/string&gt;\n        &lt;key&gt;299&lt;/key&gt;\n        &lt;string&gt;0.184676&lt;/string&gt;\n        &lt;key&gt;3&lt;/key&gt;\n        &lt;string&gt;solid state&lt;/string&gt;\n        &lt;key&gt;4&lt;/key&gt;\n        &lt;string&gt;unencrypted&lt;/string&gt;\n        &lt;key&gt;5&lt;/key&gt;\n        &lt;string&gt;case insensitive&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;clean&lt;/string&gt;\n        &lt;key&gt;7&lt;/key&gt;\n        &lt;string&gt;NO&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;0&lt;/key&gt;\n        &lt;string&gt;16C67&lt;/string&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;passed&lt;/string&gt;\n        &lt;key&gt;103&lt;/key&gt;\n        &lt;string&gt;3&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;software update&lt;/string&gt;\n    &lt;/dict&gt;\n    &lt;dict&gt;\n        &lt;key&gt;0&lt;/key&gt;\n        &lt;string&gt;16C67&lt;/string&gt;\n        &lt;key&gt;100&lt;/key&gt;\n        &lt;string&gt;passed&lt;/string&gt;\n        &lt;key&gt;103&lt;/key&gt;\n        &lt;string&gt;4&lt;/string&gt;\n        &lt;key&gt;202&lt;/key&gt;\n        &lt;string&gt;582.532387&lt;/string&gt;\n        &lt;key&gt;203&lt;/key&gt;\n        &lt;string&gt;11.511343&lt;/string&gt;\n        &lt;key&gt;205&lt;/key&gt;\n        &lt;string&gt;1.900536&lt;/string&gt;\n        &lt;key&gt;206&lt;/key&gt;\n        &lt;string&gt;0.005585&lt;/string&gt;\n        &lt;key&gt;207&lt;/key&gt;\n        &lt;string&gt;0.101757&lt;/string&gt;\n        &lt;key&gt;208&lt;/key&gt;\n        &lt;string&gt;2.142859&lt;/string&gt;\n        &lt;key&gt;209&lt;/key&gt;\n        &lt;string&gt;3.942741&lt;/string&gt;\n        &lt;key&gt;299&lt;/key&gt;\n        &lt;string&gt;0.122528&lt;/string&gt;\n        &lt;key&gt;3&lt;/key&gt;\n        &lt;string&gt;solid state&lt;/string&gt;\n        &lt;key&gt;4&lt;/key&gt;\n        &lt;string&gt;unencrypted&lt;/string&gt;\n        &lt;key&gt;5&lt;/key&gt;\n        &lt;string&gt;case insensitive&lt;/string&gt;\n        &lt;key&gt;6&lt;/key&gt;\n        &lt;string&gt;clean&lt;/string&gt;\n        &lt;key&gt;7&lt;/key&gt;\n        &lt;string&gt;YES&lt;/string&gt;\n    &lt;/dict&gt;\n&lt;/array&gt;\n&lt;/plist&gt;\n</code></pre>"},{"location":"hw/cpu/apple-instructions/","title":"Apple Proprietary Instructions","text":"<p>Apple proprietary instructions seem to be in the 0x0020xxxx range.</p> <pre><code>00200000 - 002007ff            MUL53, see https://gist.github.com/TrungNguyen1909/5b323edda9a21550a1621af506e8ce5f\n\n00200800 | rD &lt;&lt; 5 | rS        wkdmc, compress memory page\n   - rS is the source page address (page-aligned, bottom bits ignored)\n   - rD is the destination compressed data address (64b aligned, bottom bits ignored)\n   - Status/info gets returned in rS.\n\n00200c00 | rD &lt;&lt; 5 | rS        wkdmd, uncompress memory page\n   - rS is the source compressed data address (64b aligned, bottom bits ignored)\n   - rD is the destination compressed data address (page-aligned, bottom bits ignored)\n   - Status/info gets returned in rS.\n\n00201000 - 002012df            AMX, see https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f\n   If AMX is not enabled (default), these fault with ESR_EL2 = 0xfe000003\n\n   ..222~23f \"hole\" of unknown instructions\n\n002012e0 - 0020143f            Faults with unknown instruction\n\n*00201400                      gexit, Exit guarded mode. Used by macOS; must need some enable (faults by default).\n*00201420 | imm5               genter, Enter guarded mode. Used by macOS; must need some enable (faults by default).\n   imm5 stored in ESR_GLx[5:0] \n\n00201440 | rA                  at_as1elx, Translate address. Returns in the same register:\n   [63:56] MAIR attributes for translation (not index!)\n   [??:12] Physical address\n   [11:00] Flags/status/etc.  0x80x = unmapped, x varies depending on PT level that faulted?\n\nThis seems to be the same as the PAR_EL1 system register, used as the output for the *official* ARM translate address instructions.\n\n00201460                       sdsb osh\n00201461                       sdsb nsh\n00201462                       sdsb ish - used by iBoot trampoline\n00201463                       sdsb sy\n\n00201464 ~                     Faults with unknown instruction\n\n\n</code></pre>"},{"location":"hw/cpu/debug-registers/","title":"Application Processor Debug Registers","text":"<p>The various CPU cores export entries in the ADT that hint at the existence of debug registers. The string \"coresight\" appears, and coresight register files are unlocked by writing <code>0xc5acce55</code> to offset <code>0xfb0</code>, which is also what the Corellium CPU start code does. The lock status register is at <code>0x210030fb4</code> for CPU0.</p> <p>CPU0's PC can be read at <code>0x210040090</code> (the usual offsets apply to the other cores), but the other registers don't appear to be making any obvious appearances.</p>"},{"location":"hw/cpu/smp/","title":"Symmetric Multiprocessing (SMP)","text":""},{"location":"hw/cpu/smp/#smp-spin-up","title":"SMP spin-up","text":"<p>From the ADT:</p> <ul> <li><code>/arm-io/pmgr[reg]</code> power manager registers<ul> <li>CPU start block is at a device-dependent offset to this register<ul> <li>0x30000 for A7-A8(X)</li> <li>0xd4000 for A9(X)-A11, T2</li> <li>0x54000 for M1 series</li> <li>0x34000 for M2 and M3</li> <li>0x28000 for M2 Pro/Max</li> <li>0x88000 for M3 Pro/Max</li> </ul> </li> <li>For multi-die systems, each die has its own power manager registers.   The power manager registers for each die is at offset    <code>die * 0x2000000000</code> from the registers of die 0.</li> </ul> </li> <li><code>/cpus/cpu&lt;n&gt;[cpu-impl-reg]</code> CPU implementation registers</li> <li><code>/cpus/cpu&lt;n&gt;[reg]</code> CPU startup information<ul> <li>Bits [0:7] holds the core id</li> <li>Bits [8:10] holds the cluster id</li> <li>Bits [11:14] holds the die id</li> </ul> </li> </ul> <p>A11 does not handle clusters properly, so both P and E CPUs are considered cluster 0. ECPUs are 0-3 while PCPUs are 4-5.</p> <p>For old firmwares, <code>/cpus/cpu&lt;n&gt;[cpu-impl-reg]</code> may not exist, in this case <code>/arm-io/reg[2*n+2]</code> can be used to find the location to write the start address.</p> <p>CPU start registers in PMGR:</p> <pre><code>offset + 0x4: System-wide CPU core startup/active bitmask\noffset + 0x8: Cluster 0 (e) CPU core startup\noffset + 0xc: Cluster 1 (p) CPU core startup\n</code></pre>"},{"location":"hw/cpu/smp/#startup-sequence","title":"Startup sequence","text":"<ul> <li>Write start address to RVBAR at <code>cpu-impl-reg + 0x00</code><ul> <li>This is locked for cpu0 by iBoot, other CPUs are free to change</li> </ul> </li> <li>Set (1 &lt;&lt; cpu) in <code>pmgr[offset + 0x4]</code><ul> <li>This seems to be some kind of system-wide \"core alive\" signal. It is not   required for the core to spin up, but without it AIC interrupts won't   work, and probably other things.</li> </ul> </li> <li>Set (1 &lt;&lt; core) in <code>pmgr[(offset + 0x8) + 4*cluster]</code> (that's core from 0-3, cluster 0-1)<ul> <li>This starts up the core itself.</li> </ul> </li> </ul> <p>Core starts up at RVBAR. Chicken bits / etc must be applied as usual.</p>"},{"location":"hw/cpu/sprr-gxf/","title":"SPRR and GXF","text":""},{"location":"hw/cpu/sprr-gxf/#guarded-execution","title":"Guarded execution","text":"<p>Guarded execution mode is a lateral exception level next to EL1 and EL2 which uses the same pagetables but different permissions (see SPRR). These levels are called GL1 and GL2. It's enabled with bit 1 in S3_6_C15_1_2.</p> <p>The instruction <code>0x00201420</code> is genter and switches from EL to GL and sets the PC to <code>S3_6_C15_C8_1</code>. <code>0x00201420</code> is gexit which returns to EL.</p> <pre><code>#define SYS_GXF_ENTER_EL1 sys_reg(3, 6, 15, 8, 1)\n</code></pre> <p>Guarded mode has a separate set of ELR, FAR, ESR, SPSR, VBAR and TPIDR registers just like EL1/2. Additionally the ASPSR register indicates if gexit should return to GL or EL.</p> <pre><code>#define SYS_TPIDR_GL1 sys_reg(3, 6, 15, 10, 1)\n#define SYS_VBAR_GL1 sys_reg(3, 6, 15, 10, 2)\n#define SYS_SPSR_GL1 sys_reg(3, 6, 15, 10, 3)\n#define SYS_ASPSR_GL1 sys_reg(3, 6, 15, 10, 4)\n#define SYS_ESR_GL1 sys_reg(3, 6, 15, 10, 5)\n#define SYS_ELR_GL1 sys_reg(3, 6, 15, 10, 6)\n#define SYS_FAR_GL1 sys_reg(3, 6, 15, 10, 7)\n</code></pre>"},{"location":"hw/cpu/sprr-gxf/#sprr","title":"SPRR","text":"<p>SPRR takes the permission bits from pagetable entries and converts them into an attribute index similar to how MAIR works:</p> <pre><code>   3      2      1     0\n AP[1]  AP[0]   UXN   PXN\n</code></pre> <p>Note that UXN and PXN are flipped compared to APRR!</p> <p>This is then used to index into a system register where each entry has four bits:</p> <pre><code>    3     2     1     0\n  GL[1] GL[0] EL[1] EL[0]\n</code></pre> <p>GL/EL can be treated mostly separate but there are two exceptions where a specific GL permissions modifies what the two EL bits usually mean.</p> register value EL page permissions GL page permissions <code>0000</code> <code>---</code> <code>---</code> <code>0001</code> <code>r-x</code> <code>---</code> <code>0010</code> <code>r--</code> <code>---</code> <code>0011</code> <code>rw-</code> <code>---</code> <code>0100</code> <code>---</code> <code>r-x</code> <code>0101</code> <code>r-x</code> <code>r-x</code> <code>0110</code> <code>r--</code> <code>r-x</code> <code>0111</code> <code>---</code> <code>r-x</code> <code>1000</code> <code>---</code> <code>r--</code> <code>1001</code> <code>--x</code> <code>r--</code> <code>1010</code> <code>r--</code> <code>r--</code> <code>1011</code> <code>rw-</code> <code>r--</code> <code>1100</code> <code>---</code> <code>rw-</code> <code>1101</code> <code>r-x</code> <code>rw-</code> <code>1110</code> <code>r--</code> <code>rw-</code> <code>1111</code> <code>rw-</code> <code>rw-</code> <p>These four bits indicate the actual permissions when running in EL or GL mode. EL0 and EL1 have separate registers such that the permissions are decoupled.</p> <p>bit 1 in S3_6_C15_C1_0 / SPRR_CONFIG_EL1 enables SPRR and access to new system registers.</p> <p>S3_6_C15_1_5 is the permissions register for EL0 and S3_6_C15_1_6 is for EL1/GL1.</p> <pre><code>#define SYS_SPRR_CONFIG_EL1       sys_reg(3, 6, 15, 1, 0)\n#define SPRR_CONFIG_EN            BIT(0)\n#define SPRR_CONFIG_LOCK_CONFIG   BIT(1)\n#define SPRR_CONFIG_LOCK_PERM_EL0 BIT(4)\n#define SPRR_CONFIG_LOCK_PERM_EL1 BIT(5)\n\n#define SYS_SPRR_PERM_EL0 sys_reg(3, 6, 15, 1, 5)\n#define SYS_SPRR_PERM_EL1 sys_reg(3, 6, 15, 1, 6)\n</code></pre>"},{"location":"hw/cpu/system-register-dumps/","title":"System Register Dumps","text":"<p>All implemented (readable) vendor-specific registers. Dumped while running m1n1 (after chicken bits):</p> Name Register Access Icestorm Firestorm SYS_APL_HID0 s3_0_c15_c0_0 RW N/A 0x10002990120e0e00 unknow s3_0_c15_c0_1 RW 0x7180080006000000 N/A SYS_APL_HID1 s3_0_c15_c1_0 RW N/A 0x40000002000000 SYS_APL_EHID1 s3_0_c15_c1_1 RW 0x129802000000 N/A SYS_APL_EHID20 s3_0_c15_c1_2 RW 0x618100 N/A SYS_APL_HID21 s3_0_c15_c1_3 RW N/A 0x1040000 unknow s3_0_c15_c1_4 RW 0xce8e19f3b0a04081 same unknow s3_0_c15_c1_5 RW 0x19d1c3862c081 same SYS_APL_HID2 s3_0_c15_c2_0 RW N/A 0x0 SYS_APL_EHID2 s3_0_c15_c2_1 RW 0x0 N/A SYS_APL_HID3 s3_0_c15_c3_0 RW N/A 0x4180000cf8001fe0 SYS_APL_EHID3 s3_0_c15_c3_1 RW 0x2030001fe0 N/A SYS_APL_HID4 s3_0_c15_c4_0 RW N/A 0x130800000800 SYS_APL_EHID4 s3_0_c15_c4_1 RW 0x100000000800 N/A SYS_APL_HID5 s3_0_c15_c5_0 RW 0x2082df50e700df14 0x2082df205700ff12 SYS_APL_HID6 s3_0_c15_c6_0 RW 0x7dc8031f007f0e 0x7dc8031f007c0e SYS_APL_HID7 s3_0_c15_c7_0 RW N/A 0x3110000 unknow s3_0_c15_c7_1 RW 0x0 N/A SYS_APL_HID8 s3_0_c15_c8_0 RW 0x381c109438000135 0x381c10a438000252 SYS_APL_HID9 s3_0_c15_c9_0 RW N/A 0x100086c000000 SYS_APL_EHID9 s3_0_c15_c9_1 RW 0x600000811 N/A SYS_APL_HID10 s3_0_c15_c10_0 RW N/A 0x3180200 SYS_APL_EHID10 s3_0_c15_c10_1 RW 0x3000528002788 N/A unknow s3_0_c15_c10_2 RW 0x40032014 same SYS_APL_HID11 s3_0_c15_c11_0 RW N/A 0x804000010000000 SYS_APL_EHID11 s3_0_c15_c11_1 RW 0x30000000010 N/A SYS_APL_HID18 s3_0_c15_c11_2 RW N/A 0x40004000 unknow s3_0_c15_c11_3 RW 0x0 N/A unknow s3_0_c15_c12_0 RW 0xe10000000e020 0xe00000000e020 unknow s3_0_c15_c12_1 RW 0x1800 same unknow s3_0_c15_c12_2 RW 0x40201008040201 same unknow s3_0_c15_c13_0 RW 0x0 same SYS_APL_HID13 s3_0_c15_c14_0 RW N/A 0x332200211010205 SYS_APL_HID14 s3_0_c15_c15_0 RW N/A 0x200000bb8 SYS_APL_HID16 s3_0_c15_c15_2 RW N/A 0x6900000440000000 unknow s3_0_c15_c15_3 RW 0x20402000000 same SYS_APL_HID17 s3_0_c15_c15_5 RW 0x54090afcfa9 0x50090af8faa SYS_APL_PMCR0 s3_1_c15_c0_0 RW 0x0 same unknow s3_1_c15_c0_1 RW 0x0 same unknow s3_1_c15_c0_2 RW 0x6 same unknow s3_1_c15_c0_3 RW 0x0 same unknow s3_1_c15_c0_4 RW 0x0 same SYS_APL_PMCR1 s3_1_c15_c1_0 RW 0x0 same unknow s3_1_c15_c1_2 RW 0x0 same unknow s3_1_c15_c1_3 RW 0x0 same unknow s3_1_c15_c1_4 RW 0x0 same SYS_APL_PMCR2 s3_1_c15_c2_0 RW 0x0 same unknow s3_1_c15_c2_2 RW 0x0 same unknow s3_1_c15_c2_3 RW 0x0 same SYS_APL_PMCR3 s3_1_c15_c3_0 RW 0x0 same unknow s3_1_c15_c3_2 RW 0x0 same unknow s3_1_c15_c3_3 RW 0x0 same SYS_APL_PMCR4 s3_1_c15_c4_0 RW 0x0 same unknow s3_1_c15_c4_2 RW 0x6 same unknow s3_1_c15_c4_3 RW 0x0 same SYS_APL_PMESR0 s3_1_c15_c5_0 RW 0x0 same unknow s3_1_c15_c5_2 RW 0x0 same unknow s3_1_c15_c5_3 RW 0x0 same SYS_APL_PMESR1 s3_1_c15_c6_0 RW 0x0 same unknow s3_1_c15_c6_2 RW 0x0 same unknow s3_1_c15_c6_3 RW 0x0 same unknow s3_1_c15_c7_0 RW 0x0 same unknow s3_1_c15_c7_2 RW 0x0 same unknow s3_1_c15_c7_3 RW 0x0 same unknow s3_1_c15_c8_0 RW 0x0 same unknow s3_1_c15_c8_3 RW 0x0 same unknow s3_1_c15_c9_0 RW 0x0 same unknow s3_1_c15_c9_2 RW 0x6 same unknow s3_1_c15_c9_3 RW 0x0 same unknow s3_1_c15_c10_0 RW 0x0 same unknow s3_1_c15_c10_2 RW 0x0 same unknow s3_1_c15_c10_3 RW 0x0 same unknow s3_1_c15_c11_0 RW 0xfffff same unknow s3_1_c15_c11_3 RW 0x0 same unknow s3_1_c15_c12_0 RW 0x0 same unknow s3_1_c15_c12_3 RW 0x0 same SYS_APL_PMSR s3_1_c15_c13_0 RO 0x0 same unknow s3_1_c15_c13_3 RW 0x0 same unknow s3_1_c15_c14_0 RW 0x0 same unknow s3_1_c15_c14_1 RW 0x0 same unknow s3_1_c15_c14_3 RW 0x0 same unknow s3_1_c15_c15_0 RW 0x0 same unknow s3_1_c15_c15_3 RW 0x0 same SYS_APL_PMC0 s3_2_c15_c0_0 RW 0x0 same unknow s3_2_c15_c0_1 RW 0x0 same unknow s3_2_c15_c0_2 RW 0x0 same unknow s3_2_c15_c0_3 RW 0x0 same unknow s3_2_c15_c0_4 RW 0x0 same unknow s3_2_c15_c0_5 RW 0x0 same unknow s3_2_c15_c0_6 RW 0x0 same unknow s3_2_c15_c0_7 RW 0x0 same SYS_APL_PMC1 s3_2_c15_c1_0 RW 0x0 same unknow s3_2_c15_c1_1 RW 0x0 same SYS_APL_PMC2 s3_2_c15_c2_0 RW 0x0 same SYS_APL_PMC3 s3_2_c15_c3_0 RW 0x0 same SYS_APL_PMC4 s3_2_c15_c4_0 RW 0x0 same SYS_APL_PMC5 s3_2_c15_c5_0 RW 0x0 same SYS_APL_PMC6 s3_2_c15_c6_0 RW 0x0 same SYS_APL_PMC7 s3_2_c15_c7_0 RW 0x0 same SYS_APL_PMC8 s3_2_c15_c9_0 RW 0x0 same SYS_APL_PMC9 s3_2_c15_c10_0 RW 0x0 same unknow s3_2_c15_c12_0 RW 0x0 same unknow s3_2_c15_c13_0 RW 0x0 same unknow s3_2_c15_c14_0 RW 0x0 same unknow s3_2_c15_c15_0 RW 0x0 same SYS_APL_LSU_ERR_STS s3_3_c15_c0_0 RW N/A 0x0 unknow s3_3_c15_c0_4 RW 0x0 same unknow s3_3_c15_c0_5 RW 0x0 same unknow s3_3_c15_c0_6 RW 0x0 same SYS_APL_LSU_ERR_CTL s3_3_c15_c1_0 RW N/A 0x1 unknow s3_3_c15_c1_4 RW 0x0 same unknow s3_3_c15_c1_5 RW 0x0 same unknow s3_3_c15_c1_6 RW 0x0 same SYS_APL_E_LSU_ERR_STS s3_3_c15_c2_0 RW 0x0 N/A unknow s3_3_c15_c2_4 RW 0x0 same unknow s3_3_c15_c2_5 RW 0x0 same unknow s3_3_c15_c3_0 RW 0x60 N/A unknow s3_3_c15_c3_4 RW 0x0 same unknow s3_3_c15_c3_5 RW 0x0 same unknow s3_3_c15_c4_0 RW 0x0 same unknow s3_3_c15_c4_4 RW 0x0 same unknow s3_3_c15_c4_5 RW 0x0 same unknow s3_3_c15_c4_6 RW 0x3ffffffffff same unknow s3_3_c15_c5_0 RW 0x0 same unknow s3_3_c15_c5_5 RW 0x0 same unknow s3_3_c15_c6_5 RW 0x0 same unknow s3_3_c15_c7_0 RW 0xf1200 0xb1400 unknow s3_3_c15_c7_5 RW 0x0 same SYS_APL_L2C_ERR_STS s3_3_c15_c8_0 RW 0x11000ffc00000000 same unknow s3_3_c15_c8_1 RW 0x1 0x2 unknow s3_3_c15_c8_2 RW 0x1 0x2 unknow s3_3_c15_c8_3 RW 0x4 same SYS_APL_L2C_ERR_ADR s3_3_c15_c9_0 RW 0x0 same SYS_APL_L2C_ERR_INF s3_3_c15_c10_0 RW 0x0 same unknow s3_3_c15_c11_0 RW 0x0 same unknow s3_3_c15_c12_0 RW 0xfffffffff same unknow s3_3_c15_c13_0 RW 0x238018600bc0024 same unknow s3_3_c15_c13_1 RW 0x84005a002c0008 same unknow s3_3_c15_c13_2 RW 0x1c8014e00a60024 same unknow s3_3_c15_c13_3 RW 0x6a004e00260008 same unknow s3_3_c15_c13_4 RW 0x20000 same unknow s3_3_c15_c13_5 RW 0x40000 same unknow s3_3_c15_c13_6 RW 0x80000 same unknow s3_3_c15_c13_7 RW 0x100000 same unknow s3_3_c15_c14_0 RW 0xf0000 same unknow s3_3_c15_c15_0 RW 0x4ad4b4c00 same unknow s3_3_c15_c15_1 RW 0x352b4b200 same unknow s3_3_c15_c15_2 RW 0x10000 same unknow s3_3_c15_c15_3 RW 0x20000 same unknow s3_3_c15_c15_4 RW 0x8d48e9f929042518 same SYS_APL_FED_ERR_STS s3_4_c15_c0_0 RW N/A 0x0 unknow s3_4_c15_c0_1 RW N/A 0x25 SYS_APL_E_FED_ERR_STS s3_4_c15_c0_2 RW 0x0 N/A unknow s3_4_c15_c0_3 RW 0x7f N/A SYS_APL_APCTL_EL1 s3_4_c15_c0_4 RW 0xc same unknow s3_4_c15_c0_5 RW 0x0 same unknow s3_4_c15_c0_7 RW 0x0 same SYS_APL_KERNELKEYLO_EL1 s3_4_c15_c1_0 RW 0x0 same SYS_APL_KERNELKEYHI_EL1 s3_4_c15_c1_1 RW 0x0 same SYS_APL_VMSA_LOCK s3_4_c15_c1_2 RW 0x0 same unknow s3_4_c15_c1_3 RW 0x0 same unknow s3_4_c15_c1_4 RW 0x100 same unknow s3_4_c15_c1_5 RW 0x0 same unknow s3_4_c15_c1_6 RW 0x0 same unknow s3_4_c15_c1_7 RW 0x0 same SYS_APL_CTRR_LOCK_EL1 s3_4_c15_c2_2 RW 0x0 same SYS_APL_CTRR_A_LWR_EL1 s3_4_c15_c2_3 RW 0x80485c000 0x0 SYS_APL_CTRR_A_UPR_EL1 s3_4_c15_c2_4 RW 0x804924000 0x0 SYS_APL_CTRR_CTL_EL1 s3_4_c15_c2_5 RW 0x0 same SYS_APL_APRR_JIT_ENABLE s3_4_c15_c2_6 RW 0x0 same SYS_APL_APRR_JIT_MASK s3_4_c15_c2_7 RW 0x0 same unknow s3_4_c15_c3_0 RO 0x0 same unknow s3_4_c15_c3_1 RO 0x0 same unknow s3_4_c15_c3_2 RO 0x0 same unknow s3_4_c15_c3_3 RO 0x0 same unknow s3_4_c15_c3_4 RO 0x0 same unknow s3_4_c15_c3_5 RO 0x0 same unknow s3_4_c15_c3_6 RO 0x0 same unknow s3_4_c15_c3_7 RO 0x0 same unknow s3_4_c15_c4_0 RO 0x4 same unknow s3_4_c15_c4_6 RW 0x0 same unknow s3_4_c15_c4_7 RW 0x100 same SYS_APL_s3_4_c15_c5_0 s3_4_c15_c5_0 RW 0x0 same unknow s3_4_c15_c5_6 RW 0x0 same unknow s3_4_c15_c5_7 RW 0x0 same unknow s3_4_c15_c6_0 RW 0x0 same unknow s3_4_c15_c6_1 RW 0x0 same unknow s3_4_c15_c6_2 RW 0x0 same unknow s3_4_c15_c6_3 RW 0x0 same unknow s3_4_c15_c6_4 RW 0x80485c000 0x0 unknow s3_4_c15_c6_5 RW 0x804924000 0x0 unknow s3_4_c15_c6_6 RW 0x0 same unknow s3_4_c15_c6_7 RW 0x0 same unknow s3_4_c15_c9_0 RW 0x0 same unknow s3_4_c15_c9_1 RW 0x0 same unknow s3_4_c15_c9_2 RW 0x0 same unknow s3_4_c15_c9_3 RW 0x0 same unknow s3_4_c15_c9_4 RW 0x0 same unknow s3_4_c15_c9_5 RW 0x0 same unknow s3_4_c15_c10_4 RW 0x3 same unknow s3_4_c15_c10_5 RO 0xfb8de8634 0x3edb4528 unknow s3_4_c15_c10_6 RO 0xfb8de8634 0x3edb4529 SYS_APL_CTRR_A_LWR_EL2 s3_4_c15_c11_0 RW 0x0 same SYS_APL_CTRR_A_UPR_EL2 s3_4_c15_c11_1 RW 0x0 same unknow s3_4_c15_c11_2 RW 0x0 same unknow s3_4_c15_c11_3 RW 0x0 same SYS_APL_CTRR_CTL_EL2 s3_4_c15_c11_4 RW 0x0 same SYS_APL_CTRR_LOCK_EL2 s3_4_c15_c11_5 RW 0x0 same unknow s3_4_c15_c12_5 RW 0x0 same unknow s3_4_c15_c12_7 RW 0x0 same unknow s3_5_c15_c0_2 RW 0xf same unknow s3_5_c15_c0_3 RW 0xf same unknow s3_5_c15_c0_4 RW 0x0 same SYS_APL_DPC_ERR_STS s3_5_c15_c0_5 RW 0x0 same unknow s3_5_c15_c0_6 RW 0x21f same unknow s3_5_c15_c1_0 RW 0x0 same SYS_APL_IPI_SR s3_5_c15_c1_1 RW 0x0 same SYS_APL_VM_LR s3_5_c15_c1_2 RW 0x1b0000001b same SYS_APL_VM_TMR_MASK s3_5_c15_c1_3 RW 0x3 same unknow s3_5_c15_c2_0 RW 0x0 same unknow s3_5_c15_c3_0 RW 0x0 same SYS_APL_IPI_CR s3_5_c15_c3_1 RW 0x1800 same unknow s3_5_c15_c3_2 RW 0x0 same unknow s3_5_c15_c3_4 RW 0x0 same unknow s3_5_c15_c3_5 RO 0x0 same SYS_APL_ACC_CFG s3_5_c15_c4_0 RW 0xd same unknow s3_5_c15_c4_1 RW 0x100003e485001f 0x1030bc77e485001f SYS_APL_CYC_OVRD s3_5_c15_c5_0 RW 0x2000000 same unknow s3_5_c15_c5_2 RW 0x0 same unknow s3_5_c15_c5_4 RW 0x0 same SYS_APL_ACC_OVRD s3_5_c15_c6_0 RW 0x180010102001c207 same unknow s3_5_c15_c7_0 RW 0x100 same unknow s3_5_c15_c8_0 RW 0x4 same unknow s3_5_c15_c8_1 RW 0xffffffff same unknow s3_5_c15_c9_0 RW 0x20001d1500f20014 0xc0000c0c00f20011 unknow s3_5_c15_c10_0 RW 0x2005f200102 0x2015fa00102 unknow s3_5_c15_c10_1 RW 0x0 same unknow s3_5_c15_c12_0 RW N/A 0x0 unknow s3_5_c15_c12_1 RW N/A 0x0 unknow s3_5_c15_c12_2 RW N/A 0x0 unknow s3_5_c15_c12_3 RW N/A 0x0 unknow s3_5_c15_c12_4 RW N/A 0x0 unknow s3_5_c15_c12_5 RW N/A 0x0 unknow s3_5_c15_c13_4 RW 0x0 same unknow s3_5_c15_c13_5 RW 0x0 same unknow s3_5_c15_c14_2 RW 0x0 N/A unknow s3_5_c15_c14_3 RW 0x0 N/A unknow s3_5_c15_c14_4 RW 0x0 N/A unknow s3_5_c15_c14_5 RW 0x0 N/A unknow s3_5_c15_c14_6 RW 0x0 N/A unknow s3_5_c15_c14_7 RW 0x0 N/A SYS_APL_MMU_ERR_STS s3_6_c15_c0_0 RW N/A 0x0 unknow s3_6_c15_c1_0 RW 0x0 same unknow s3_6_c15_c1_2 RO 0x0 same unknow s3_6_c15_c1_4 RO 0x0 same SYS_APL_E_MMU_ERR_STS s3_6_c15_c2_0 RW 0x0 N/A unknow s3_6_c15_c2_1 RW 0x12fa1db611a4c14 0x0 unknow s3_6_c15_c2_2 RW 0x7bea3a52c6e474ab 0x0 unknow s3_6_c15_c2_3 RW 0x0 same unknow s3_6_c15_c2_4 RW 0x0 same SYS_APL_AFPCR s3_6_c15_c2_5 RW 0x0 same unknow s3_6_c15_c2_7 RO 0x10003 same unknow s3_6_c15_c7_0 RW 0x3e094b905367a138 0x0 unknow s3_6_c15_c7_1 RW 0x729c61cc911db3d0 0x0 unknow s3_6_c15_c7_2 RW 0xdd3223b5c9807c14 0x0 unknow s3_6_c15_c7_3 RW 0x191277470b2e1017 0x0 unknow s3_6_c15_c7_4 RW 0xe5ac8d636d111ab8 0x0 unknow s3_6_c15_c7_5 RW 0x4c0a977780a1bf2e 0x0 unknow s3_6_c15_c7_6 RW 0xd186cdb61af898a6 0x0 unknow s3_6_c15_c7_7 RW 0xfc9946bc0688369f 0x0 unknow s3_6_c15_c8_0 RO 0x0 same unknow s3_6_c15_c8_3 RW 0x2 same unknow s3_6_c15_c8_6 RW 0x2 same unknow s3_6_c15_c12_2 RW 0xc same unknow s3_6_c15_c12_3 RO 0x1 same SYS_APL_APSTS_EL1 s3_6_c15_c12_4 RO 0x1 same unknow s3_6_c15_c12_5 RW 0x0 same unknow s3_6_c15_c12_6 RW 0x0 same unknow s3_6_c15_c12_7 RW 0x0 same unknow s3_6_c15_c13_0 RW 0x7e1eb75eca93408c 0x0 unknow s3_6_c15_c13_1 RW 0x69a4334ee673171b 0x0 unknow s3_6_c15_c13_2 RW 0x7b0537a4c9237fd6 0x0 unknow s3_6_c15_c13_3 RW 0x356ec5ffdbda584e 0x0 unknow s3_6_c15_c13_4 RW 0xc9dfbcc5b08d03b8 0x0 unknow s3_6_c15_c13_5 RW 0x5ecf1a29c0973432 0x0 unknow s3_6_c15_c13_6 RW 0x7684c29566e14dc9 0x0 unknow s3_6_c15_c13_7 RW 0x4bb4f32b76f2e6a9 0x0 unknow s3_6_c15_c14_0 RW 0x7fc148694e0bcc6d 0x0 unknow s3_6_c15_c14_1 RW 0x2936a8c66238f8f4 0x0 unknow s3_6_c15_c14_2 RW 0x0 same unknow s3_6_c15_c14_4 RW 0x0 same unknow s3_6_c15_c14_5 RW 0x0 same ACTLR_EL12 s3_6_c15_c14_6 RW 0xc00 same unknow s3_6_c15_c14_7 RW 0x0 same unknow s3_6_c15_c15_0 RW 0xc same unknow s3_6_c15_c15_1 RO 0x0 same unknow s3_6_c15_c15_4 RO 0x0 same unknow s3_7_c15_c0_0 RW 0x0 same unknow s3_7_c15_c0_1 RW 0x0 same unknow s3_7_c15_c0_2 RW 0x0 same unknow s3_7_c15_c0_3 RW 0x0 same SYS_APL_UPMCR0 s3_7_c15_c0_4 RW 0x0 same SYS_APL_UPMC8 s3_7_c15_c0_5 RW 0x0 same unknow s3_7_c15_c1_0 RW 0x0 same unknow s3_7_c15_c1_1 RW 0x0 same unknow s3_7_c15_c1_2 RW 0x0 same unknow s3_7_c15_c1_3 RW 0x0 same SYS_APL_UPMESR0 s3_7_c15_c1_4 RW 0x0 same SYS_APL_UPMC9 s3_7_c15_c1_5 RW 0x0 same unknow s3_7_c15_c2_0 RW 0x0 same unknow s3_7_c15_c2_1 RW 0x3db15f4dfc5d5724 0x3db1b249a1cd79ad unknow s3_7_c15_c2_2 RW 0x0 same unknow s3_7_c15_c2_3 RW 0x0 same unknow s3_7_c15_c2_4 RW 0x0 same SYS_APL_UPMC10 s3_7_c15_c2_5 RW 0x0 same unknow s3_7_c15_c3_2 RW 0x0 same unknow s3_7_c15_c3_3 RW 0x0 same SYS_APL_UPMECM0 s3_7_c15_c3_4 RW 0x0 same SYS_APL_UPMC11 s3_7_c15_c3_5 RW 0x0 same unknow s3_7_c15_c4_0 RW 0x0 same unknow s3_7_c15_c4_2 RW 0x0 same unknow s3_7_c15_c4_3 RW 0x0 same SYS_APL_UPMECM1 s3_7_c15_c4_4 RW 0x0 same SYS_APL_UPMC12 s3_7_c15_c4_5 RW 0x0 same unknow s3_7_c15_c5_0 RW 0x0 same unknow s3_7_c15_c5_2 RW 0x0 same unknow s3_7_c15_c5_3 RW 0x0 same SYS_APL_UPMPCM s3_7_c15_c5_4 RW 0x0 same SYS_APL_UPMC13 s3_7_c15_c5_5 RW 0x0 same unknow s3_7_c15_c6_2 RW 0x0 same unknow s3_7_c15_c6_3 RW 0x0 same SYS_APL_UPMSR s3_7_c15_c6_4 RW 0x0 same SYS_APL_UPMC14 s3_7_c15_c6_5 RW 0x0 same unknow s3_7_c15_c7_2 RW 0x0 same unknow s3_7_c15_c7_3 RW 0x0 same SYS_APL_UPMC0 s3_7_c15_c7_4 RW 0x0 same SYS_APL_UPMC15 s3_7_c15_c7_5 RW 0x0 same unknow s3_7_c15_c8_2 RW 0x0 same unknow s3_7_c15_c8_3 RW 0x0 same SYS_APL_UPMC1 s3_7_c15_c8_4 RW 0x0 same SYS_APL_UPMECM2 s3_7_c15_c8_5 RW 0x0 same unknow s3_7_c15_c9_2 RW 0x0 same unknow s3_7_c15_c9_3 RW 0x0 same SYS_APL_UPMC2 s3_7_c15_c9_4 RW 0x0 same SYS_APL_UPMECM3 s3_7_c15_c9_5 RW 0x0 same unknow s3_7_c15_c10_2 RW 0x0 same unknow s3_7_c15_c10_3 RW 0x0 same SYS_APL_UPMC3 s3_7_c15_c10_4 RW 0x0 same unknow s3_7_c15_c10_5 RW 0x0 same unknow s3_7_c15_c11_2 RW 0x0 same unknow s3_7_c15_c11_3 RW 0x0 same SYS_APL_UPMC4 s3_7_c15_c11_4 RW 0x0 same SYS_APL_UPMESR1 s3_7_c15_c11_5 RW 0x0 same unknow s3_7_c15_c12_2 RW 0x0 same unknow s3_7_c15_c12_3 RW 0x0 same SYS_APL_UPMC5 s3_7_c15_c12_4 RW 0x0 same unknow s3_7_c15_c13_2 RW 0x0 same unknow s3_7_c15_c13_3 RW 0x0 same SYS_APL_UPMC6 s3_7_c15_c13_4 RW 0x0 same unknow s3_7_c15_c14_2 RW 0x0 same unknow s3_7_c15_c14_3 RW 0x0 same SYS_APL_UPMC7 s3_7_c15_c14_4 RW 0x0 same unknow s3_7_c15_c15_2 RW 0x0 same unknow s3_7_c15_c15_3 RW 0x0 same"},{"location":"hw/cpu/system-register-dumps/#system-registers-dump-while-running-darwin","title":"System Registers dump while running Darwin","text":"<p>Dump from Darwin version: 20.3.0 XNU: 7195.81.3~1</p> Name Register Icestorm Firestorm SYS_APL_HID0 s3_0_c15_c0_0 N/A 0x10002990120e0e00 unknow s3_0_c15_c0_1 0x7180080006000000 N/A SYS_APL_HID1 s3_0_c15_c1_0 N/A 0x1440000002000000 SYS_APL_EHID1 s3_0_c15_c1_1 0x129802000000 N/A SYS_APL_EHID20 s3_0_c15_c1_2 0x618100 N/A SYS_APL_HID21 s3_0_c15_c1_3 N/A 0x1040000 unknow s3_0_c15_c1_4 0xce8e19f3b0a04081 same unknow s3_0_c15_c1_5 0x19d1c3862c081 same SYS_APL_HID2 s3_0_c15_c2_0 N/A 0x0 SYS_APL_EHID2 s3_0_c15_c2_1 0x0 N/A SYS_APL_HID3 s3_0_c15_c3_0 N/A 0x4180000cf8001fe0 SYS_APL_EHID3 s3_0_c15_c3_1 0x2030001fe0 N/A SYS_APL_HID4 s3_0_c15_c4_0 N/A 0x22130800000800 SYS_APL_EHID4 s3_0_c15_c4_1 0x100000000800 N/A SYS_APL_HID5 s3_0_c15_c5_0 0x2082df50e700df14 0x2082df205700ff12 SYS_APL_HID6 s3_0_c15_c6_0 0x7dc8031f007f0e 0x7dc8031f007c0e SYS_APL_HID7 s3_0_c15_c7_0 N/A 0x3110000 unknow s3_0_c15_c7_1 0x0 N/A SYS_APL_HID8 s3_0_c15_c8_0 0x381c109438000135 0x381c10a438000252 SYS_APL_HID9 s3_0_c15_c9_0 N/A 0x8100086c000000 SYS_APL_EHID9 s3_0_c15_c9_1 0x600000811 N/A SYS_APL_HID10 s3_0_c15_c10_0 N/A 0x3180200 SYS_APL_EHID10 s3_0_c15_c10_1 0x3000528002788 N/A unknow s3_0_c15_c10_2 0x40032014 same SYS_APL_HID11 s3_0_c15_c11_0 N/A 0x804000010008000 SYS_APL_EHID11 s3_0_c15_c11_1 0x30000000010 N/A SYS_APL_HID18 s3_0_c15_c11_2 N/A 0x2000040004000 unknow s3_0_c15_c11_3 0x0 N/A unknow s3_0_c15_c12_0 0xe10000000e020 0xe00000000e020 unknow s3_0_c15_c12_1 0x1800 same unknow s3_0_c15_c12_2 0x40201008040201 same unknow s3_0_c15_c13_0 0x0 same SYS_APL_HID13 s3_0_c15_c14_0 N/A 0xc332200211010205 SYS_APL_HID14 s3_0_c15_c15_0 N/A 0x100000bb8 SYS_APL_HID16 s3_0_c15_c15_2 N/A 0x6900000440000000 unknow s3_0_c15_c15_3 0x20402000000 same SYS_APL_HID17 s3_0_c15_c15_5 0x54090afcfa9 0x50090af8faa SYS_APL_PMCR0 s3_1_c15_c0_0 0x3403 same unknow s3_1_c15_c0_1 0x0 same unknow s3_1_c15_c0_2 0x6 same unknow s3_1_c15_c0_3 0x80500000801 same unknow s3_1_c15_c0_4 0x0 same SYS_APL_PMCR1 s3_1_c15_c1_0 0x30300 same unknow s3_1_c15_c1_2 0x0 same unknow s3_1_c15_c1_3 0x300000807 same unknow s3_1_c15_c1_4 0x0 same SYS_APL_PMCR2 s3_1_c15_c2_0 0x0 same unknow s3_1_c15_c2_2 0x0 same unknow s3_1_c15_c2_3 0x0 same SYS_APL_PMCR3 s3_1_c15_c3_0 0x0 same unknow s3_1_c15_c3_2 0x0 same unknow s3_1_c15_c3_3 0x0 same SYS_APL_PMCR4 s3_1_c15_c4_0 0x0 same unknow s3_1_c15_c4_2 0x6 same unknow s3_1_c15_c4_3 0x0 same SYS_APL_PMESR0 s3_1_c15_c5_0 0x0 same unknow s3_1_c15_c5_2 0x0 same unknow s3_1_c15_c5_3 0x0 same SYS_APL_PMESR1 s3_1_c15_c6_0 0x0 same unknow s3_1_c15_c6_2 0x30300 same unknow s3_1_c15_c6_3 0x0 same unknow s3_1_c15_c7_0 0x0 same unknow s3_1_c15_c7_2 0x0 same unknow s3_1_c15_c7_3 0x0 same unknow s3_1_c15_c8_0 0x0 same unknow s3_1_c15_c8_3 0: 0xffff00015dad1b9a, 1: 0xffff00013c07d1ae, 2: 0xffff00010d3399b5, 3: 0xffff0000fc8892c3 0: 0xffff0001c29f5dd0, 1: 0xffff0001375cbabc, 2: 0xffff0000c2b2a4b8, 3: 0xffff00009a43c504 unknow s3_1_c15_c9_0 0x0 same unknow s3_1_c15_c9_2 0x6 same unknow s3_1_c15_c9_3 0: 0xffff00009aeea3bb, 1: 0xffff00007dc5fbe5, 2: 0xffff0000660cb0c6, 3: 0xffff00005d7fdabf 0: 0xffff00003e8775eb, 1: 0xffff000026318b6c, 2: 0xffff000016ec8cc5, 3: 0xffff000010745587 unknow s3_1_c15_c10_0 0x0 same unknow s3_1_c15_c10_2 0x0 same unknow s3_1_c15_c10_3 0: 0xffff0000412fb58f, 1: 0xffff00003dc93e81, 2: 0xffff000037cf721c, 3: 0xffff000034709f1a 0: 0xffff0000c2c8baa0, 1: 0xffff0000aa18522e, 2: 0xffff000063cd70c9, 3: 0xffff00006b181a68 unknow s3_1_c15_c11_0 0xfffff same unknow s3_1_c15_c11_3 0: 0xffff00005a9fed59, 1: 0xffff0000514a2097, 2: 0xffff000048aa25d5, 3: 0xffff000042bb1277 0: 0xffff0000c5791d2a, 1: 0xffff00008bff5c12, 2: 0xffff000050596295, 3: 0xffff00004514c293 unknow s3_1_c15_c12_0 0x0 same unknow s3_1_c15_c12_3 0x0 same SYS_APL_PMSR s3_1_c15_c13_0 0x0 same unknow s3_1_c15_c13_3 0x0 same unknow s3_1_c15_c14_0 0x0 same unknow s3_1_c15_c14_1 0x0 same unknow s3_1_c15_c14_3 0x0 same unknow s3_1_c15_c15_0 0x0 same unknow s3_1_c15_c15_3 0x0 same SYS_APL_PMC0 s3_2_c15_c0_0 0: 0x7fff6dcc72fb, 1: 0x7ffde00f42b2, 2: 0x7ffe9854b633, 3: 0x7ffd654fd77b 0: 0x7fff93f9cfc6, 1: 0x7fffd82b8c54, 2: 0x7ffd90dde9a5, 3: 0x7ffddccadc50 unknow s3_2_c15_c0_1 0x0 same unknow s3_2_c15_c0_2 0x0 same unknow s3_2_c15_c0_3 0x0 same unknow s3_2_c15_c0_4 0x0 same unknow s3_2_c15_c0_5 0x0 same unknow s3_2_c15_c0_6 0x0 same unknow s3_2_c15_c0_7 0x0 same SYS_APL_PMC1 s3_2_c15_c1_0 0: 0x15698d458f, 1: 0x13b43063a0, 2: 0x1136c37f97, 3: 0xfc52e5b82 0: 0x2c8b8d79e7, 1: 0x177ec47d14, 2: 0xfb15411c1, 3: 0xad9cb527b unknow s3_2_c15_c1_1 0x0 same SYS_APL_PMC2 s3_2_c15_c2_0 0x0 same SYS_APL_PMC3 s3_2_c15_c3_0 0x0 same SYS_APL_PMC4 s3_2_c15_c4_0 0x0 same SYS_APL_PMC5 s3_2_c15_c5_0 0x0 same SYS_APL_PMC6 s3_2_c15_c6_0 0x0 same SYS_APL_PMC7 s3_2_c15_c7_0 0x0 same SYS_APL_PMC8 s3_2_c15_c9_0 0x0 same SYS_APL_PMC9 s3_2_c15_c10_0 0x0 same unknow s3_2_c15_c12_0 0x0 same unknow s3_2_c15_c13_0 0x0 same unknow s3_2_c15_c14_0 0x0 same unknow s3_2_c15_c15_0 0x0 same SYS_APL_LSU_ERR_STS s3_3_c15_c0_0 N/A 0x0 unknow s3_3_c15_c0_4 0x0 same unknow s3_3_c15_c0_5 0x0 same unknow s3_3_c15_c0_6 0x0 same SYS_APL_LSU_ERR_CTL s3_3_c15_c1_0 N/A 0x1 unknow s3_3_c15_c1_4 0x0 same unknow s3_3_c15_c1_5 0x0 same unknow s3_3_c15_c1_6 0x0 same SYS_APL_E_LSU_ERR_STS s3_3_c15_c2_0 0x0 N/A unknow s3_3_c15_c2_4 0x0 same unknow s3_3_c15_c2_5 0x0 same unknow s3_3_c15_c3_0 0x60 N/A unknow s3_3_c15_c3_4 0x0 same unknow s3_3_c15_c3_5 0x0 same unknow s3_3_c15_c4_0 0x0 same unknow s3_3_c15_c4_4 0x0 same unknow s3_3_c15_c4_5 0x0 same unknow s3_3_c15_c4_6 0x3ffffffffff same unknow s3_3_c15_c5_0 0x0 same unknow s3_3_c15_c5_5 0x0 same unknow s3_3_c15_c6_5 0x0 same unknow s3_3_c15_c7_0 0xf1200 0xb1400 unknow s3_3_c15_c7_5 0x0 same SYS_APL_L2C_ERR_STS s3_3_c15_c8_0 0x11000ffc00000000 same unknow s3_3_c15_c8_1 0x1 0x2 unknow s3_3_c15_c8_2 0x1 0x2 unknow s3_3_c15_c8_3 0x4 same SYS_APL_L2C_ERR_ADR s3_3_c15_c9_0 0x0 same SYS_APL_L2C_ERR_INF s3_3_c15_c10_0 0x0 same unknow s3_3_c15_c11_0 0x0 same unknow s3_3_c15_c12_0 0xfffffffff same unknow s3_3_c15_c13_0 0x238018600bc0024 same unknow s3_3_c15_c13_1 0x84005a002c0008 same unknow s3_3_c15_c13_2 0x1c8014e00a60024 same unknow s3_3_c15_c13_3 0x6a004e00260008 same unknow s3_3_c15_c13_4 0x20000 same unknow s3_3_c15_c13_5 0x40000 same unknow s3_3_c15_c13_6 0x80000 same unknow s3_3_c15_c13_7 0x100000 same unknow s3_3_c15_c14_0 0xf0000 same unknow s3_3_c15_c15_0 0x4ad4b4c00 same unknow s3_3_c15_c15_1 0x352b4b200 same unknow s3_3_c15_c15_2 0x10000 same unknow s3_3_c15_c15_3 0x20000 same unknow s3_3_c15_c15_4 0x8d48e9f929042518 same SYS_APL_FED_ERR_STS s3_4_c15_c0_0 N/A 0x0 unknow s3_4_c15_c0_1 N/A 0x25 SYS_APL_E_FED_ERR_STS s3_4_c15_c0_2 0x0 N/A unknow s3_4_c15_c0_3 0x7f N/A SYS_APL_APCTL_EL1 s3_4_c15_c0_4 0x19 same unknow s3_4_c15_c0_5 0xfc787ffff7ffffef same unknow s3_4_c15_c0_7 0xfc787ffff7ffffef same SYS_APL_KERNELKEYLO_EL1 s3_4_c15_c1_0 msr_trap same SYS_APL_KERNELKEYHI_EL1 s3_4_c15_c1_1 msr_trap same SYS_APL_VMSA_LOCK s3_4_c15_c1_2 0x8000000000000011 same unknow s3_4_c15_c1_3 0x0 same unknow s3_4_c15_c1_4 0x100 same unknow s3_4_c15_c1_5 0x8000000000000011 same unknow s3_4_c15_c1_6 0x0 same unknow s3_4_c15_c1_7 0x0 same SYS_APL_CTRR_LOCK_EL1 s3_4_c15_c2_2 0x0 same SYS_APL_CTRR_A_LWR_EL1 s3_4_c15_c2_3 0: 0x803764000, 1: 0x0, 2: 0x0, 3: 0x0 0x0 SYS_APL_CTRR_A_UPR_EL1 s3_4_c15_c2_4 0: 0x807e78000, 1: 0x0, 2: 0x0, 3: 0x0 0x0 SYS_APL_CTRR_CTL_EL1 s3_4_c15_c2_5 0x0 same SYS_APL_APRR_JIT_ENABLE s3_4_c15_c2_6 0x0 same SYS_APL_APRR_JIT_MASK s3_4_c15_c2_7 0x0 same unknow s3_4_c15_c3_0 0x0 same unknow s3_4_c15_c3_1 0x0 same unknow s3_4_c15_c3_2 0x0 same unknow s3_4_c15_c3_3 0x0 same unknow s3_4_c15_c3_4 0x0 same unknow s3_4_c15_c3_5 0x0 same unknow s3_4_c15_c3_6 0x0 same unknow s3_4_c15_c3_7 0x0 same unknow s3_4_c15_c4_0 0x4 same unknow s3_4_c15_c4_6 0x0 same unknow s3_4_c15_c4_7 0x100 same SYS_APL_s3_4_c15_c5_0 s3_4_c15_c5_0 0: 0x0, 1: 0x1, 2: 0x2, 3: 0x3 0: 0x0, 1: 0x1, 2: 0x2, 3: 0x3 unknow s3_4_c15_c5_6 0x0 same unknow s3_4_c15_c5_7 0x0 same unknow s3_4_c15_c6_0 0x0 same unknow s3_4_c15_c6_1 0x0 same unknow s3_4_c15_c6_2 0x0 same unknow s3_4_c15_c6_3 0x0 same unknow s3_4_c15_c6_4 0: 0x803764000, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_4_c15_c6_5 0: 0x807e78000, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_4_c15_c6_6 0x0 same unknow s3_4_c15_c6_7 0x0 same unknow s3_4_c15_c9_0 0x0 same unknow s3_4_c15_c9_1 0x0 same unknow s3_4_c15_c9_2 0x0 same unknow s3_4_c15_c9_3 0x0 same unknow s3_4_c15_c9_4 0x0 same unknow s3_4_c15_c9_5 0x0 same unknow s3_4_c15_c10_4 0x3 same unknow s3_4_c15_c10_5 0: 0xf78f2d05, 1: 0xf78f2d00, 2: 0xf78f2d26, 3: 0xf78f2c9e 0: 0xf78f2dad, 1: 0xf78f2dc0, 2: 0xf78f2c61, 3: 0xf78f2d96 unknow s3_4_c15_c10_6 0: 0xf7a4d1e7, 1: 0xf7a4d206, 2: 0xf7a4d1a9, 3: 0xf7a4d1f8 0: 0xf7a4d17d, 1: 0xf7a4d155, 2: 0xf7a4d13b, 3: 0xf7a4d0ce SYS_APL_CTRR_A_LWR_EL2 s3_4_c15_c11_0 0x0 same SYS_APL_CTRR_A_UPR_EL2 s3_4_c15_c11_1 0x0 same unknow s3_4_c15_c11_2 0x0 same unknow s3_4_c15_c11_3 0x0 same SYS_APL_CTRR_CTL_EL2 s3_4_c15_c11_4 0x0 same SYS_APL_CTRR_LOCK_EL2 s3_4_c15_c11_5 0x0 same unknow s3_4_c15_c12_5 0x1 same unknow s3_4_c15_c12_7 0x1 same unknow s3_5_c15_c0_2 0xf same unknow s3_5_c15_c0_3 0xf same unknow s3_5_c15_c0_4 0x0 same SYS_APL_DPC_ERR_STS s3_5_c15_c0_5 0x0 same unknow s3_5_c15_c0_6 0x21f same unknow s3_5_c15_c1_0 0x0 same SYS_APL_IPI_SR s3_5_c15_c1_1 0x0 same SYS_APL_VM_LR s3_5_c15_c1_2 0x1b0000001b same SYS_APL_VM_TMR_MASK s3_5_c15_c1_3 0x0 same unknow s3_5_c15_c2_0 0x0 same unknow s3_5_c15_c3_0 0x0 same SYS_APL_IPI_CR s3_5_c15_c3_1 0x600 same unknow s3_5_c15_c3_2 0x0 same unknow s3_5_c15_c3_4 0x0 same unknow s3_5_c15_c3_5 0x0 same SYS_APL_ACC_CFG s3_5_c15_c4_0 0xd same unknow s3_5_c15_c4_1 0x103000f3e485001f 0x1030108ee485001f SYS_APL_CYC_OVRD s3_5_c15_c5_0 0x0 same unknow s3_5_c15_c5_2 0x0 same unknow s3_5_c15_c5_4 0x0 same SYS_APL_ACC_OVRD s3_5_c15_c6_0 0x180010102001c207 same unknow s3_5_c15_c7_0 0x100 same unknow s3_5_c15_c8_0 0x4 same unknow s3_5_c15_c8_1 0xffffffff same unknow s3_5_c15_c9_0 0x20001d1500f20014 0xc0000c0c00f20011 unknow s3_5_c15_c10_0 0: 0x135f81d102, 1: 0x155f81d102, 2: 0x155f81d102, 3: 0x155f81d102 0x125f81d102 unknow s3_5_c15_c10_1 0x0 same unknow s3_5_c15_c12_0 N/A 0x0 unknow s3_5_c15_c12_1 N/A 0x0 unknow s3_5_c15_c12_2 N/A 0x0 unknow s3_5_c15_c12_3 N/A 0x0 unknow s3_5_c15_c12_4 N/A 0x0 unknow s3_5_c15_c12_5 N/A 0x0 unknow s3_5_c15_c13_4 0x0 same unknow s3_5_c15_c13_5 0x0 same unknow s3_5_c15_c14_2 0x0 N/A unknow s3_5_c15_c14_3 0x0 N/A unknow s3_5_c15_c14_4 0x0 N/A unknow s3_5_c15_c14_5 0x0 N/A unknow s3_5_c15_c14_6 0x0 N/A unknow s3_5_c15_c14_7 0x0 N/A SYS_APL_MMU_ERR_STS s3_6_c15_c0_0 N/A 0x0 unknow s3_6_c15_c1_0 0xff same unknow s3_6_c15_c1_2 0x2d same unknow s3_6_c15_c1_4 0x2d same SYS_APL_E_MMU_ERR_STS s3_6_c15_c2_0 0x0 N/A unknow s3_6_c15_c2_1 0: 0xa98f72dd06cff78c, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c2_2 0: 0xed4cec8ba2dfcb7a, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c2_3 0x0 same unknow s3_6_c15_c2_4 0x0 same unknow s3_6_c15_c2_5 0x0 same unknow s3_6_c15_c2_7 0x10003 same unknow s3_6_c15_c7_0 0: 0x9d2eb6e10fc2de1c, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_1 0: 0xb320fa6fe33ebf0c, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_2 0: 0x69a862c408583431, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_3 0: 0xc3377419c4330515, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_4 0: 0x3a3d2426c08769b, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_5 0: 0x178bc3c29bd833e3, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_6 0: 0x3fb11db82e47adc0, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c7_7 0: 0xe9e7ab1e3b357af9, 1: 0x0, 2: 0x0, 3: 0x0 0x0 unknow s3_6_c15_c8_0 0x0 same unknow s3_6_c15_c8_3 0x0 same unknow s3_6_c15_c8_6 0: 0x4, 1: 0x0, 2: 0x0, 3: 0x2 0x0 unknow s3_6_c15_c12_2 0x19 same unknow s3_6_c15_c12_3 0x1 same SYS_APL_APSTS_EL1 s3_6_c15_c12_4 0x1 same unknow s3_6_c15_c12_5 msr_trap same unknow s3_6_c15_c12_6 msr_trap same unknow s3_6_c15_c12_7 0x0 same unknow s3_6_c15_c13_0 msr_trap same unknow s3_6_c15_c13_1 msr_trap same unknow s3_6_c15_c13_2 msr_trap same unknow s3_6_c15_c13_3 msr_trap same unknow s3_6_c15_c13_4 msr_trap same unknow s3_6_c15_c13_5 msr_trap same unknow s3_6_c15_c13_6 msr_trap same unknow s3_6_c15_c13_7 msr_trap same unknow s3_6_c15_c14_0 msr_trap same unknow s3_6_c15_c14_1 msr_trap same unknow s3_6_c15_c14_2 0xff same unknow s3_6_c15_c14_4 0x0 same unknow s3_6_c15_c14_5 0x0 same ACTLR_EL12 s3_6_c15_c14_6 0x1c00 same unknow s3_6_c15_c14_7 0x0 same unknow s3_6_c15_c15_0 0xc same unknow s3_6_c15_c15_1 0x0 same unknow s3_6_c15_c15_4 0x0 same unknow s3_7_c15_c0_0 0x0 same unknow s3_7_c15_c0_1 0xa000000000000000 same unknow s3_7_c15_c0_2 0x0 same unknow s3_7_c15_c0_3 0: 0x2a567a31, 1: 0x8cd7fb37, 2: 0x85d69856, 3: 0x5f962515 0: 0xa01c7ebb, 1: 0xf1d040e2, 2: 0x26a7089, 3: 0xca819736 SYS_APL_UPMCR0 s3_7_c15_c0_4 0xffff40000 same SYS_APL_UPMC8 s3_7_c15_c0_5 0x0 same unknow s3_7_c15_c1_0 0x0 same unknow s3_7_c15_c1_1 0: 0x3e9e3dbaca, 1: 0x3a337f6378, 2: 0x3397a1018c, 3: 0x2fa9b50ecd 0: 0x265ae446414, 1: 0x142af81376a, 2: 0xdaa770cf5b, 3: 0x9bd5f09dbf unknow s3_7_c15_c1_2 0x0 same unknow s3_7_c15_c1_3 0x8000 same SYS_APL_UPMESR0 s3_7_c15_c1_4 0x0 same SYS_APL_UPMC9 s3_7_c15_c1_5 0x0 same unknow s3_7_c15_c2_0 0x0 same unknow s3_7_c15_c2_1 0: 0x46ef23ffce, 1: 0x46ef23f595, 2: 0x46ef24aabb, 3: 0x46ef24b798 0: 0x19bd9345ce3, 1: 0x19bd932c7a1, 2: 0x19bd932ea66, 3: 0x19bd9324fda unknow s3_7_c15_c2_2 0: 0x52c45d4fdd, 1: 0x52c45cacd5, 2: 0x52c45e3324, 3: 0x52c45d4132 0: 0x65798551b9, 1: 0x657984f629, 2: 0x657983bb88, 3: 0x65798393f2 unknow s3_7_c15_c2_3 0: 0xa46fb60c, 1: 0xf14de1df, 2: 0x5871e658, 3: 0xd72193aa 0: 0xa7358631, 1: 0x2bc883bc, 2: 0x69180c1b, 3: 0x40bcc243 unknow s3_7_c15_c2_4 0x0 same SYS_APL_UPMC10 s3_7_c15_c2_5 0x0 same unknow s3_7_c15_c3_2 0x8100 same unknow s3_7_c15_c3_3 0x8100 same SYS_APL_UPMECM0 s3_7_c15_c3_4 0x0 same SYS_APL_UPMC11 s3_7_c15_c3_5 0x0 same unknow s3_7_c15_c4_0 0x1 same unknow s3_7_c15_c4_2 0x2d 0x0 unknow s3_7_c15_c4_3 0: 0x3166, 1: 0x2823, 2: 0x2288, 3: 0x21c6 0: 0x11ac, 1: 0xa95, 2: 0x5c0, 3: 0xd0d5 SYS_APL_UPMECM1 s3_7_c15_c4_4 0x0 same SYS_APL_UPMC12 s3_7_c15_c4_5 0x0 same unknow s3_7_c15_c5_0 0x1 same unknow s3_7_c15_c5_2 0x8e00 same unknow s3_7_c15_c5_3 0x8700 same SYS_APL_UPMPCM s3_7_c15_c5_4 0x1 0x10 SYS_APL_UPMC13 s3_7_c15_c5_5 0x0 same unknow s3_7_c15_c6_2 0x7d38 0x0 unknow s3_7_c15_c6_3 0: 0x0, 1: 0x0, 2: 0xe, 3: 0x1f 0x0 SYS_APL_UPMSR s3_7_c15_c6_4 0x0 same SYS_APL_UPMC14 s3_7_c15_c6_5 0x0 same unknow s3_7_c15_c7_2 0x9e00 same unknow s3_7_c15_c7_3 0x8e00 same SYS_APL_UPMC0 s3_7_c15_c7_4 0x0 same SYS_APL_UPMC15 s3_7_c15_c7_5 0x0 same unknow s3_7_c15_c8_2 0: 0x3b191f3d7d, 1: 0x3b190bb126, 2: 0x3b191dcc2d, 3: 0x3b190c3f84 0: 0x31976d0490, 1: 0x31976abc74, 2: 0x31976d1d56, 3: 0x31976e2460 unknow s3_7_c15_c8_3 0x0 same SYS_APL_UPMC1 s3_7_c15_c8_4 0x0 same SYS_APL_UPMECM2 s3_7_c15_c8_5 0x0 same unknow s3_7_c15_c9_2 0x8000 same unknow s3_7_c15_c9_3 0x0 same SYS_APL_UPMC2 s3_7_c15_c9_4 0x0 same SYS_APL_UPMECM3 s3_7_c15_c9_5 0x0 same unknow s3_7_c15_c10_2 0: 0x11151b5a1f, 1: 0x11151b601a, 2: 0x11151b7681, 3: 0x11151b6a85 0: 0xecf8ce277, 1: 0xecf8c527b, 2: 0xecf8c3e25, 3: 0xecf8c2c1c unknow s3_7_c15_c10_3 0x0 same SYS_APL_UPMC3 s3_7_c15_c10_4 0x0 same unknow s3_7_c15_c10_5 0x0 same unknow s3_7_c15_c11_2 0x8600 same unknow s3_7_c15_c11_3 0x0 same SYS_APL_UPMC4 s3_7_c15_c11_4 0x0 same SYS_APL_UPMESR1 s3_7_c15_c11_5 0x0 same unknow s3_7_c15_c12_2 0x265be 0x1a4ee unknow s3_7_c15_c12_3 0x0 same SYS_APL_UPMC5 s3_7_c15_c12_4 0x0 same unknow s3_7_c15_c13_2 0x9c00 same unknow s3_7_c15_c13_3 0x0 same SYS_APL_UPMC6 s3_7_c15_c13_4 0x0 same unknow s3_7_c15_c14_2 0x46c0 0x7fde unknow s3_7_c15_c14_3 0x0 same SYS_APL_UPMC7 s3_7_c15_c14_4 0x0 same unknow s3_7_c15_c15_2 0x9d00 same unknow s3_7_c15_c15_3 0x0 same"},{"location":"hw/cpu/system-registers/","title":"System Registers","text":"<p>See System Register Dumps for exhaustive enumeration and research.</p>"},{"location":"hw/cpu/system-registers/#glossary","title":"Glossary","text":"<p>Some of these are guesses</p> <ul> <li>ACC: Apple Core Cluster</li> <li>HID: Hardware Implementation Defined Register</li> <li>EHID: Hardware Implementation Defined Register (e-core)</li> <li>IPI: Inter-processor Interrupt</li> </ul>"},{"location":"hw/cpu/system-registers/#register-definitions","title":"Register definitions","text":"<p>Using Linux format:</p> <pre><code>\n/* These make sense... */\n#define SYS_APL_HID0_EL1            sys_reg(3, 0, 15, 0, 0)\n#define SYS_APL_EHID0_EL1           sys_reg(3, 0, 15, 0, 1)\n#define SYS_APL_HID1_EL1            sys_reg(3, 0, 15, 1, 0)\n#define SYS_APL_EHID1_EL1           sys_reg(3, 0, 15, 1, 1)\n#define SYS_APL_HID2_EL1            sys_reg(3, 0, 15, 2, 0)\n#define SYS_APL_EHID2_EL1           sys_reg(3, 0, 15, 2, 1)\n#define SYS_APL_HID3_EL1            sys_reg(3, 0, 15, 3, 0)\n#define SYS_APL_EHID3_EL1           sys_reg(3, 0, 15, 3, 1)\n#define SYS_APL_HID4_EL1            sys_reg(3, 0, 15, 4, 0)\n#define SYS_APL_EHID4_EL1           sys_reg(3, 0, 15, 4, 1)\n#define SYS_APL_HID5_EL1            sys_reg(3, 0, 15, 5, 0)\n#define SYS_APL_EHID5_EL1           sys_reg(3, 0, 15, 5, 1)\n#define SYS_APL_HID6_EL1            sys_reg(3, 0, 15, 6, 0)\n#define SYS_APL_HID7_EL1            sys_reg(3, 0, 15, 7, 0)\n#define SYS_APL_EHID7_EL1           sys_reg(3, 0, 15, 7, 1)\n#define SYS_APL_HID8_EL1            sys_reg(3, 0, 15, 8, 0)\n#define SYS_APL_HID9_EL1            sys_reg(3, 0, 15, 9, 0)\n#define SYS_APL_EHID9_EL1           sys_reg(3, 0, 15, 9, 1)\n#define SYS_APL_HID10_EL1           sys_reg(3, 0, 15, 10, 0)\n#define SYS_APL_EHID10_EL1          sys_reg(3, 0, 15, 10, 1)\n#define SYS_APL_HID11_EL1           sys_reg(3, 0, 15, 11, 0)\n#define SYS_APL_EHID11_EL1          sys_reg(3, 0, 15, 11, 1)\n\n/* Uh oh */\n#define SYS_APL_HID12_EL?           sys_reg(3, 0, 15, 12, 0)\n#define SYS_APL_HID13_EL?           sys_reg(3, 0, 15, 14, 0)\n#define SYS_APL_HID14_EL?           sys_reg(3, 0, 15, 15, 0)\n\n/* All sanity went out the window here */\n#define SYS_APL_HID16_EL?           sys_reg(3, 0, 15, 15, 2)\n#define SYS_APL_HID17_EL1           sys_reg(3, 0, 15, 15, 5)\n#define SYS_APL_HID18_EL?           sys_reg(3, 0, 15, 11, 2)\n#define SYS_APL_EHID20_EL1          sys_reg(3, 0, 15, 1, 2)\n#define SYS_APL_HID21_EL?           sys_reg(3, 0, 15, 1, 3)\n\n#define SYS_APL_PMCR0_EL1           sys_reg(3, 1, 15, 0, 0)\n#define SYS_APL_PMCR1_EL1           sys_reg(3, 1, 15, 1, 0)\n#define SYS_APL_PMCR2_EL1           sys_reg(3, 1, 15, 2, 0)\n#define SYS_APL_PMCR3_EL1           sys_reg(3, 1, 15, 3, 0)\n#define SYS_APL_PMCR4_EL1           sys_reg(3, 1, 15, 4, 0)\n#define SYS_APL_PMESR0_EL1          sys_reg(3, 1, 15, 5, 0)\n#define SYS_APL_PMESR1_EL1          sys_reg(3, 1, 15, 6, 0)\n#define SYS_APL_PMSR_EL1            sys_reg(3, 1, 15, 13, 0)\n\n#define SYS_APL_PMC0_EL1            sys_reg(3, 2, 15, 0, 0)\n#define SYS_APL_PMC1_EL1            sys_reg(3, 2, 15, 1, 0)\n#define SYS_APL_PMC2_EL1            sys_reg(3, 2, 15, 2, 0)\n#define SYS_APL_PMC3_EL1            sys_reg(3, 2, 15, 3, 0)\n#define SYS_APL_PMC4_EL1            sys_reg(3, 2, 15, 4, 0)\n#define SYS_APL_PMC5_EL1            sys_reg(3, 2, 15, 5, 0)\n#define SYS_APL_PMC6_EL1            sys_reg(3, 2, 15, 6, 0)\n#define SYS_APL_PMC7_EL1            sys_reg(3, 2, 15, 7, 0)\n#define SYS_APL_PMC8_EL1            sys_reg(3, 2, 15, 9, 0)\n#define SYS_APL_PMC9_EL1            sys_reg(3, 2, 15, 10, 0)\n\n#define SYS_APL_LSU_ERR_STS_EL1     sys_reg(3, 3, 15, 0, 0)\n#define SYS_APL_E_LSU_ERR_STS_EL1   sys_reg(3, 3, 15, 2, 0)\n#define SYS_APL_LSU_ERR_CTL_EL1     sys_reg(3, 3, 15, 1, 0)\n\n#define SYS_APL_L2C_ERR_STS_EL1     sys_reg(3, 3, 15, 8, 0)\n#define SYS_APL_L2C_ERR_ADR_EL1     sys_reg(3, 3, 15, 9, 0)\n#define SYS_APL_L2C_ERR_INF_EL1     sys_reg(3, 3, 15, 10, 0)\n\n#define SYS_APL_FED_ERR_STS_EL1     sys_reg(3, 4, 15, 0, 0)\n#define SYS_APL_E_FED_ERR_STS_EL1   sys_reg(3, 4, 15, 0, 2)\n\n#define SYS_APL_APCTL_EL1           sys_reg(3, 4, 15, 0, 4)\n#define SYS_APL_KERNELKEYLO_EL1     sys_reg(3, 4, 15, 1, 0)\n#define SYS_APL_KERNELKEYHI_EL1     sys_reg(3, 4, 15, 1, 1)\n\n#define SYS_APL_VMSA_LOCK_EL1       sys_reg(3, 4, 15, 1, 2)\n\n#define SYS_APL_APRR_EL0            sys_reg(3, 4, 15, 2, 0)\n#define SYS_APL_APRR_EL1            sys_reg(3, 4, 15, 2, 1)\n\n#define SYS_APL_CTRR_LOCK_EL1       sys_reg(3, 4, 15, 2, 2)\n#define SYS_APL_CTRR_A_LWR_EL1      sys_reg(3, 4, 15, 2, 3)\n#define SYS_APL_CTRR_A_UPR_EL1      sys_reg(3, 4, 15, 2, 4)\n#define SYS_APL_CTRR_CTL_EL1        sys_reg(3, 4, 15, 2, 5)\n\n#define SYS_APL_APRR_JIT_ENABLE_EL2 sys_reg(3, 4, 15, 2, 6)\n#define SYS_APL_APRR_JIT_MASK_EL2   sys_reg(3, 4, 15, 2, 7)\n\n#define SYS_APL_s3_4_c15_c5_0_EL1   sys_reg(3, 4, 15, 5, 0)\n\n#define SYS_APL_CTRR_LOCK_EL2       sys_reg(3, 4, 15, 11, 5)\n#define SYS_APL_CTRR_A_LWR_EL2      sys_reg(3, 4, 15, 11, 0)\n#define SYS_APL_CTRR_A_UPR_EL2      sys_reg(3, 4, 15, 11, 1)\n#define SYS_APL_CTRR_CTL_EL2        sys_reg(3, 4, 15, 11, 4)\n\n#define SYS_APL_IPI_RR_LOCAL_EL1    sys_reg(3, 5, 15, 0, 0)\n#define SYS_APL_IPI_RR_GLOBAL_EL1   sys_reg(3, 5, 15, 0, 1)\n\n#define SYS_APL_DPC_ERR_STS_EL1     sys_reg(3, 5, 15, 0, 5)\n\n#define SYS_APL_IPI_SR_EL1          sys_reg(3, 5, 15, 1, 1)\n\n#define SYS_APL_VM_TMR_LR_EL2       sys_reg(3, 5, 15, 1, 2)\n#define SYS_APL_VM_TMR_FIQ_ENA_EL2  sys_reg(3, 5, 15, 1, 3)\n\n#define SYS_APL_IPI_CR_EL1          sys_reg(3, 5, 15, 3, 1)\n\n#define SYS_APL_ACC_CFG_EL1         sys_reg(3, 5, 15, 4, 0)\n#define SYS_APL_CYC_OVRD_EL1        sys_reg(3, 5, 15, 5, 0)\n#define SYS_APL_ACC_OVRD_EL1        sys_reg(3, 5, 15, 6, 0)\n#define SYS_APL_ACC_EBLK_OVRD_EL?   sys_reg(3, 5, 15, 6, 1)\n\n#define SYS_APL_MMU_ERR_STS_EL1     sys_reg(3, 6, 15, 0, 0)\n\n#define SYS_APL_E_MMU_ERR_STS_EL1   sys_reg(3, 6, 15, 2, 0)\n\n#define SYS_APL_AFPCR_EL0           sys_reg(3, 6, 15, 2, 5)\n\n#define SYS_APL_APSTS_EL1           sys_reg(3, 6, 15, 12, 4)\n\n#define SYS_APL_UPMCR0_EL1          sys_reg(3, 7, 15, 0, 4)\n#define SYS_APL_UPMESR0_EL1         sys_reg(3, 7, 15, 1, 4)\n#define SYS_APL_UPMECM0_EL1         sys_reg(3, 7, 15, 3, 4)\n#define SYS_APL_UPMECM1_EL1         sys_reg(3, 7, 15, 4, 4)\n#define SYS_APL_UPMPCM_EL1          sys_reg(3, 7, 15, 5, 4)\n#define SYS_APL_UPMSR_EL1           sys_reg(3, 7, 15, 6, 4)\n#define SYS_APL_UPMECM2_EL1         sys_reg(3, 7, 15, 8, 5)\n#define SYS_APL_UPMECM3_EL1         sys_reg(3, 7, 15, 9, 5)\n#define SYS_APL_UPMESR1_EL1         sys_reg(3, 7, 15, 11, 5)\n\n/* Note: out of order wrt above */\n#define SYS_APL_UPMC0_EL1           sys_reg(3, 7, 15, 7, 4)\n#define SYS_APL_UPMC1_EL1           sys_reg(3, 7, 15, 8, 4)\n#define SYS_APL_UPMC2_EL1           sys_reg(3, 7, 15, 9, 4)\n#define SYS_APL_UPMC3_EL1           sys_reg(3, 7, 15, 10, 4)\n#define SYS_APL_UPMC4_EL1           sys_reg(3, 7, 15, 11, 4)\n#define SYS_APL_UPMC5_EL1           sys_reg(3, 7, 15, 12, 4)\n#define SYS_APL_UPMC6_EL1           sys_reg(3, 7, 15, 13, 4)\n#define SYS_APL_UPMC7_EL1           sys_reg(3, 7, 15, 14, 4)\n#define SYS_APL_UPMC8_EL1           sys_reg(3, 7, 15, 0, 5)\n#define SYS_APL_UPMC9_EL1           sys_reg(3, 7, 15, 1, 5)\n#define SYS_APL_UPMC10_EL1          sys_reg(3, 7, 15, 2, 5)\n#define SYS_APL_UPMC11_EL1          sys_reg(3, 7, 15, 3, 5)\n#define SYS_APL_UPMC12_EL1          sys_reg(3, 7, 15, 4, 5)\n#define SYS_APL_UPMC13_EL1          sys_reg(3, 7, 15, 5, 5)\n#define SYS_APL_UPMC14_EL1          sys_reg(3, 7, 15, 6, 5)\n#define SYS_APL_UPMC15_EL1          sys_reg(3, 7, 15, 7, 5)\n</code></pre>"},{"location":"hw/cpu/system-registers/#hid-registers","title":"HID registers","text":"<p>This naming convention most likely comes from PowerPC. A lot of chicken bits seem to be located here.</p> <p>These are mostly chicken bits to disable CPU features, and likely many only apply only to certain CPU generations. However, their definitions are global.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_hid0_el1","title":"SYS_APL_HID0_EL1","text":"<ul> <li>[20] Loop Buffer Disable</li> <li>[21] AMX Cache Fusion Disable</li> <li>[25] IC Prefetch Limit One \"Brn\"</li> <li>[28] Fetch Width Disable</li> <li>[33] PMULL Fuse Disable</li> <li>[36] Cache Fusion Disable</li> <li>[45] Same Pg (page?) Power Optimization</li> <li>[62:60] Instruction Cache Prefetch Depth</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid0_el1","title":"SYS_APL_EHID0_EL1","text":"<ul> <li>[45] nfpRetFwdDisb</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid1_el1","title":"SYS_APL_HID1_EL1","text":"<ul> <li>[14] Disable CMP-Branch Fusion</li> <li>[15] ForceMextL3ClkOn</li> <li>[23] rccForceAllIexL3ClksOn</li> <li>[24] rccDisStallInactiveIexCtl</li> <li>[25] disLspFlushWithContextSwitch</li> <li>[44] Disable AES Fusion across groups</li> <li>[49] Disable MSR Speculation DAIF</li> <li>[54] Trap SMC</li> <li>[58] enMDSBStallPipeLineECO</li> <li>[60] Enable Branch Kill Limit / SpareBit6</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid1_el1","title":"SYS_APL_EHID1_EL1","text":"<ul> <li>[30] Disable MSR Speculation DAIF</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid2_el1","title":"SYS_APL_HID2_EL1","text":"<ul> <li>[13] Disable MMU MTLB Prefetch</li> <li>[17] Force Purge MTB</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid2_el1","title":"SYS_APL_EHID2_EL1","text":"<ul> <li>[17] Force Purge MTB</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid3_el1","title":"SYS_APL_HID3_EL1","text":"<ul> <li>[2] Disable Color Optimization</li> <li>[25] Disable DC ZVA Command Only</li> <li>[44] Disable Arbiter Fix BIF CRD</li> <li>[54] Disable Xmon Snp Evict Trigger L2 Starvation Mode</li> <li>[63] Dev Pcie Throttle Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid3_el1","title":"SYS_APL_EHID3_EL1","text":"<ul> <li>[2] Disable Color Optimization</li> <li>[25] Disable DC ZVA Command Only</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid4_el1","title":"SYS_APL_HID4_EL1","text":"<ul> <li>[1] Disable STNT Widget</li> <li>[9] Disable Speculative LS Redirect</li> <li>[11] Disable DC MVA Ops</li> <li>[33] Disable Speculative Lnch Read</li> <li>[39] Force Ns Ord Ld Req No Older Ld (Non-speculative Ordered Load Requires No Older Load?)</li> <li>[41:40] Cnf Counter Threshold</li> <li>[44] Disable DC SW L2 Ops</li> <li>[49] Enable Lfsr Stall Load Pipe 2 Issue</li> <li>[53] Enable Lfsr Stall Stq Replay</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid5_el1","title":"SYS_APL_HID5_EL1","text":"<ul> <li>[15:14] Crd Edb Snp Rsvd</li> <li>[44] Disable HWP Load</li> <li>[45] Disable HWP Store</li> <li>[54] Enable Dn FIFO Read Stall</li> <li>[57] Disable Full Line Write</li> <li>[61] Disable Fill 2C Merge</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid5_el1","title":"SYS_APL_EHID5_EL1","text":"<ul> <li>[35] Disable Fill Bypass</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid6_el1","title":"SYS_APL_HID6_EL1","text":"<ul> <li>[9:5] Up Crd Tkn Init C2</li> <li>[55] Disable ClkDiv Gating</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid7_el1","title":"SYS_APL_HID7_EL1","text":"<ul> <li>[7] Disable Cross Pick 2</li> <li>[10] Disable Nex Fast FMUL</li> <li>[16] Force Non Speculative If Spec Flush Ptr Invalid And MP Valid</li> <li>[20] Force Non Speculative If Stepping</li> <li>[25:24] Force Non Speculative Target Timer Sel</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid8_el1","title":"SYS_APL_HID8_EL1","text":"<ul> <li>[7:4] DataSetID0</li> <li>[11:8] DataSetID1</li> <li>[35] Wke Force Strict Order</li> <li>[59:56] DataSetID2</li> <li>[63:60] DataSetID3</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid9_el1","title":"SYS_APL_HID9_EL1","text":"<ul> <li>[16] TSO Enable</li> <li>[26] TSO Allow DC ZVA WC</li> <li>[29] TSO Serialize VLD Microops</li> <li>[48] EnableFixBug51667805</li> <li>[49] EnableFixBug51667717</li> <li>[50] EnableFixBug57817908</li> <li>[52] Disable STNT (Store Non-Temporal?) Widget For Unaligned</li> <li>[53] EnableFixBug58566122</li> <li>[54] EnableFixBug47221499</li> <li>[55] HidEnFix55719865</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid9_el1","title":"SYS_APL_EHID9_EL1","text":"<ul> <li>[5] Dev Throttle 2 Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid10_el1","title":"SYS_APL_HID10_EL1","text":"<ul> <li>[0] Disable Hwp Gups</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid10_el1","title":"SYS_APL_EHID10_EL1","text":"<ul> <li>[19] RCC Disable Power Save Prf (performance?) Clock Off</li> <li>[32] Force Wait State Drain UC</li> <li>[49] Disable ZVA Temporal TSO</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid11_el1","title":"SYS_APL_HID11_EL1","text":"<ul> <li>[1] Disable X64 NT Lnch Optimization</li> <li>[7] Disable Fill C1 Bub(ble?) Optimization</li> <li>[15] HID Enable Fix UC 55719865</li> <li>[23] Disable Fast Drain Optimization</li> <li>[59] Disable LDNT (Load Non-Temporal?) Widget</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid11_el1","title":"SYS_APL_EHID11_EL1","text":"<ul> <li>[41:40] SMB Drain Threshold</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid13_el1","title":"SYS_APL_HID13_EL1","text":"<ul> <li>[17:14] PreCyc</li> <li>[63:60] Reset Cycle count</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid14_el1","title":"SYS_APL_HID14_EL1","text":"<ul> <li>[?:0] Nex Sleep Timeout Cyclone</li> <li>[32] Nex Power Gating Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid16_el1","title":"SYS_APL_HID16_EL1","text":"<ul> <li>[18] LEQ Throttle Aggr</li> <li>[56] SpareBit0</li> <li>[57] Enable RS4 Sec</li> <li>[59] SpareBit3</li> <li>[60] Disable xPick RS 45</li> <li>[61] Enable MPx Pick 45</li> <li>[62] Enable MP Cyclone 7</li> <li>[63] SpareBit7</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid17_el1","title":"SYS_APL_HID17_EL1","text":"<ul> <li>[2:0] Crd Edb Snp Rsvd</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid18_el1","title":"SYS_APL_HID18_EL1","text":"<ul> <li>[14] HVC Speculation Disable</li> <li>[49] SpareBit17</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ehid20_el1","title":"SYS_APL_EHID20_EL1","text":"<ul> <li>[8] Trap SMC</li> <li>[15] Force Nonspeculation If Oldest Redir Valid And Older</li> <li>[16] Force Nonspeculation If Spec Flush Pointer != Blk Rtr Pointer</li> <li>[22:21] Force Nonspeculation Targeted Timer</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_hid21_el1","title":"SYS_APL_HID21_EL1","text":"<ul> <li>[19] Enable LDREX Fill Reply</li> <li>[34] LDQ RTR Wait For Old ST Rel Cmpl</li> <li>[35] Disable Cdp Reply Purged Trans</li> <li>[52] Purge MMU On Any SPR SYNC</li> </ul>"},{"location":"hw/cpu/system-registers/#acccyc-registers","title":"ACC/CYC Registers","text":"<p>These seem to relate to the core complex and power management configuration</p>"},{"location":"hw/cpu/system-registers/#sys_apl_acc_ovrd_el1","title":"SYS_APL_ACC_OVRD_EL1","text":"<ul> <li>[14:13] OK To Power Down SRM (3=deepsleep)</li> <li>[16:15] Disable L2 Flush For ACC Sleep (2=deepsleep)</li> <li>[18:17] OK To Train Down Link (3=deepsleep)</li> <li>[26:25] OK To Power Down CPM (2=deny 3=deepsleep)</li> <li>[28:27] CPM Wakeup (3=force)</li> <li>[29] Disable Clock Dtr</li> <li>[32] Disable PIO On WFI CPU</li> <li>[34] Enable Deep Sleep</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_acc_cfg_el1","title":"SYS_APL_ACC_CFG_EL1","text":"<p>Branch predictor state retention across ACC sleep</p> <ul> <li>[3:2] BP Sleep (2=BDP, 3=BTP)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_cyc_ovrd_el1","title":"SYS_APL_CYC_OVRD_EL1","text":"<ul> <li>[0] Disable WFI Return</li> <li>[25:24] OK To Power Down (2=force up, 3=force down)</li> <li>[21:20] FIQ mode (2=disable)</li> <li>[23:22] IRQ mode (2=disable)</li> </ul>"},{"location":"hw/cpu/system-registers/#memory-subsystem-registers","title":"Memory subsystem registers","text":"<p>Mainly error control?</p>"},{"location":"hw/cpu/system-registers/#sys_apl_lsu_err_sts_el1","title":"SYS_APL_LSU_ERR_STS_EL1","text":"<ul> <li>[54] L1 DTLB Multi Hit Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_lsu_err_ctl_el1","title":"SYS_APL_LSU_ERR_CTL_EL1","text":"<ul> <li>[3] L1 DTLB Multi Hit Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_l2c_err_sts_el1","title":"SYS_APL_L2C_ERR_STS_EL1","text":"<p>L2 subsystem fault control and info. This register is cluster-level and shared among all cores within a cluster.</p> <ul> <li>[1] Recursive fault (fault occurred while another fault was pending?)</li> <li>[7] Access fault (unmapped physical address, etc)</li> <li>[38..34] Enable flags? (all 1 on entry from iBoot)</li> <li>[39] Enable SError interrupts (asynchronous errors)</li> <li>[43..40] Enable flags? (all 1 on entry from iBoot)</li> <li>[56] Enable write-1-to-clear behavior for fault flags</li> <li>[60] Some enable? (1 on entry)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_l2c_err_adr_el1","title":"SYS_APL_L2C_ERR_ADR_EL1","text":"<p>Fault address for L2 subsystem fault.</p> <ul> <li>[?:0] Physical address of the fault</li> <li>[42] ? sometimes 1 after a recursive instruction fetch fault</li> <li>[57:55] 5=data write 6=data read 7=instruction fetch?</li> <li>[62..61] Core within cluster that caused fault</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_l2c_err_inf_el1","title":"SYS_APL_L2C_ERR_INF_EL1","text":"<p>L2 subsystem error information.</p> <p>Low bits values seen:</p> <p>Writes:</p> <ul> <li>1: Write to unmapped or protected space, or nGnRnE write to PCIe BAR space</li> <li>2: 8-bit or 16-bit write to 32-bit only peripheral</li> <li>3: nGnRE write to SoC I/O space</li> </ul> <p>Reads:</p> <ul> <li>1: Read from unmapped or protected space</li> </ul> <p>Higher bits:</p> <ul> <li>[26] Something to do with address alignment (seen on 16-bit and 32-bit reads/writes to addr 4 mod 8)</li> </ul>"},{"location":"hw/cpu/system-registers/#ctrr-registers","title":"CTRR Registers","text":"<p>Configurable Text Read-only Region</p>"},{"location":"hw/cpu/system-registers/#sys_apl_ctrr_ctl_el1","title":"SYS_APL_CTRR_CTL_EL1","text":"<ul> <li>[0] A MMU off write protect</li> <li>[1] A MMU on write protect</li> <li>[2] B MMU off write protect</li> <li>[3] B MMU on write protect</li> <li>[4] A PXN</li> <li>[5] B PXN</li> <li>[6] A UXN</li> <li>[7] B UXN</li> </ul>"},{"location":"hw/cpu/system-registers/#aprr-registers","title":"APRR Registers","text":""},{"location":"hw/cpu/system-registers/#sys_apl_aprr_el0-sys_apl_aprr_el1","title":"SYS_APL_APRR_EL0 / SYS_APL_APRR_EL1","text":"<p>This is a table. The value is a 4-bit field:</p> <ul> <li>[0] X</li> <li>[1] W</li> <li>[2] R</li> </ul> <p>The index is the access protection and execution protection settings for a PTE.</p> <ul> <li>[0] XN</li> <li>[1] PXN</li> <li>[2] AP[0]</li> <li>[3] AP[1]</li> </ul> <p>The register value is 16 4-bit fields, in natural order ((_rwx) &lt;&lt; (4*prot)).</p>"},{"location":"hw/cpu/system-registers/#ipi-registers","title":"IPI registers","text":"<p>These are used for \"fast\" IPIs not using AIC</p>"},{"location":"hw/cpu/system-registers/#sys_apl_ipi_rr_local_el1","title":"SYS_APL_IPI_RR_LOCAL_EL1","text":"<ul> <li>[3:0] Target CPU</li> <li>[29:28] RR Type (0=immediate, 1=retract, 2=deferred, 3=nowake)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ipi_rr_global_el1","title":"SYS_APL_IPI_RR_GLOBAL_EL1","text":"<ul> <li>[3:0] Target CPU</li> <li>[20:16] Target cluster</li> <li>[29:28] RR Type (0=immediate, 1=retract, 2=deferred, 3=nowake)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ipi_cr_el1","title":"SYS_APL_IPI_CR_EL1","text":"<p>Global register.</p> <ul> <li>[15:0] Deferred IPI countdown value (in REFCLK ticks)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_vm_tmr_lr_el2","title":"SYS_APL_VM_TMR_LR_EL2","text":"<p>(Name unofficial)</p> <p>Seems to be similar to ICH_LR_EL2 in GIC; state gets set to pending (63:62 == 1) when guest CNTV fires, is not masked in SYS_APL_HV_TMR_MASK, and is masked in HACR_EL2."},{"location":"hw/cpu/system-registers/#sys_apl_vm_tmr_fiq_ena_el2","title":"SYS_APL_VM_TMR_FIQ_ENA_EL2","text":"<p>(Name unofficial)</p> <ul> <li>[0] CNTV guest timer mask bit (1=enable FIQ, 0=disable FIQ)</li> <li>[1] CNTP guest timer mask bit (1=enable FIQ, 0=disable FIQ)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_ipi_sr_el1","title":"SYS_APL_IPI_SR_EL1","text":"<p>Status register</p> <ul> <li>[0] IPI pending (write 1 to clear)</li> </ul> <p>Needs a barrier (ISB SY) after clearing to avoid races with IPI handling.</p>"},{"location":"hw/cpu/system-registers/#virtual-memory-system-architecture-lock","title":"Virtual Memory System Architecture Lock","text":""},{"location":"hw/cpu/system-registers/#sys_apl_vmsa_lock_el1","title":"SYS_APL_VMSA_LOCK_EL1","text":"<ul> <li>[0] Lock VBAR</li> <li>[1] Lock SCTLR</li> <li>[2] Lock TCR</li> <li>[3] Lock TTBR0</li> <li>[4] Lock TTBR1</li> <li>[63] Lock SCTLR M bit</li> </ul> <p>This is used to lock down writes to some Arm registers for security reasons at boot time.</p>"},{"location":"hw/cpu/system-registers/#pointer-authentication-related-registers","title":"Pointer Authentication related registers","text":""},{"location":"hw/cpu/system-registers/#sys_apl_apctl_el1","title":"SYS_APL_APCTL_EL1","text":"<ul> <li>[0] Apple Mode</li> <li>[1] Kernel Key enable</li> <li>[2] AP Key 0 Enable</li> <li>[3] AP Key 1 Enable</li> <li>[4] User Key Enable</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_apsts_el1","title":"SYS_APL_APSTS_EL1","text":"<ul> <li>[0] M Key Valid</li> </ul>"},{"location":"hw/cpu/system-registers/#performance-counter-registers","title":"Performance Counter registers","text":"<p>Writes to the control register need <code>isb</code> to take effect.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_pmc0-9_el1","title":"SYS_APL_PMC0-9_EL1","text":"<p>Performance counter.</p> <p>On M1: 48 bits, bit 47 triggers PMI.  On M2: 64 bits, bit 63 triggers PMI.</p> <ul> <li>PMC #0: fixed cpu cycle count if enabled</li> <li>PMC #1: fixed instruction count if enabled</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_pmcr0_el1","title":"SYS_APL_PMCR0_EL1","text":"<ul> <li>[7:0] Counter enable for PMC #7-0</li> <li>[10:8] Interrupt mode (0=off 1=PMI 2=AIC 3=HALT 4=FIQ)</li> <li>[11] PMI interrupt is active (write 0 to clear)</li> <li>[19:12] Enable PMI for PMC #7-0</li> <li>[20] Disable counting on a PMI</li> <li>[22] Block PMIs until after eret</li> <li>[23] Count global (not just core) L2C events</li> <li>[30] User-mode access to registers enable</li> <li>[33:32] Counter enable for PMC #9-8</li> <li>[45:44] Enable PMI for PMC #9-8</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_pmcr1_el1","title":"SYS_APL_PMCR1_EL1","text":"<p>Controls which ELx modes count events</p> <ul> <li>[7:0] EL0 A32 enable PMC #0-7 (not implemented on modern chips)</li> <li>[15:8] EL0 A64 enable PMC #0-7</li> <li>[23:16] EL1 A64 enable PMC #0-7</li> <li>[31:24] EL3 A64 enable PMC #0-7 (not implemented except on old chips with EL3)</li> <li>[33:32] EL0 A32 enable PMC #9-8 (not implemented on modern chips)</li> <li>[41:40] EL0 A64 enable PMC #9-8</li> <li>[49:48] EL1 A64 enable PMC #9-8</li> <li>[57:56] EL3 A64 enable PMC #9-8 (not implemented on modern chips)</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_pmcr2_el1","title":"SYS_APL_PMCR2_EL1","text":"<p>Controls watchpoint registers.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_pmcr3_el1","title":"SYS_APL_PMCR3_EL1","text":"<p>Controls breakpoints and address matching.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_pmcr4_el1","title":"SYS_APL_PMCR4_EL1","text":"<p>Controls opcode matching.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_pmsr_el1","title":"SYS_APL_PMSR_EL1","text":"<ul> <li>[9:0] Overflow detected on PMC #9-0</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_pmesr0_el1","title":"SYS_APL_PMESR0_EL1","text":"<p>Event selection register for PMC #2-5</p> <ul> <li>[7:0] event for PMC #2</li> <li>[15:8] event for PMC #3</li> <li>[23:16] event for PMC #4</li> <li>[31:24] event for PMC #5</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_pmesr1_el1","title":"SYS_APL_PMESR1_EL1","text":"<p>Event selection register for PMC #6-9</p> <ul> <li>[7:0] event for PMC #6</li> <li>[15:8] event for PMC #7</li> <li>[23:16] event for PMC #8</li> <li>[31:24] event for PMC #9</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_upmcx_el1","title":"SYS_APL_UPMCx_EL1","text":"<p>Uncore PMCs. 48 bits wide, bit 47 is an overflow bit and triggers a PMI.</p>"},{"location":"hw/cpu/system-registers/#sys_apl_upmcr0_el1","title":"SYS_APL_UPMCR0_EL1","text":"<ul> <li>[15:0] Counter enable for counter #15-0</li> <li>[18:16] Interrupt mode (0=off 2=AIC 3=HALT 4=FIQ)</li> <li>[35:20] Enable PMI for counter #15-0</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_upmsr_el1","title":"SYS_APL_UPMSR_EL1","text":"<ul> <li>[0] Uncore PMI</li> <li>[1] CTI</li> <li>[17:2] Overflow on uncore counter #15-0</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_upmpcm_el1","title":"SYS_APL_UPMPCM_EL1","text":"<ul> <li>[7:0] PMI core mask for uncore PMIs - which cores have PMIs delivered to them</li> </ul>"},{"location":"hw/cpu/system-registers/#sys_apl_upmesr0_el1","title":"SYS_APL_UPMESR0_EL1","text":"<p>Event selection register</p>"},{"location":"hw/cpu/system-registers/#sys_apl_upmesr1_el1","title":"SYS_APL_UPMESR1_EL1","text":"<p>Event selection register</p>"},{"location":"hw/cpu/system-registers/#sys_apl_upmecm0-3_el1","title":"SYS_APL_UPMECM[0-3]_EL1","text":"<p>Sets core masks for each event in the cluster, i.e. only events from those cores will be counted in uncore PMCs.</p>"},{"location":"hw/cpu/system-registers/#general-config-registers","title":"General config registers","text":""},{"location":"hw/cpu/system-registers/#actlr_el1-arm-standard-not-standard","title":"ACTLR_EL1 (ARM standard-not-standard)","text":"<ul> <li>[1] Enable TSO</li> <li>[3] Disable HWP</li> <li>[4] Enable APFLG</li> <li>[5] Enable Apple FP extensions. This makes FPCR.FZ a don't care, and replaces it with AFPCR.DAZ and AFPCR.FTZ.</li> <li>[6] Enable PRSV</li> <li>[12] IC IVAU Enable ASID</li> </ul>"},{"location":"hw/cpu/system-registers/#hacr_el2-arm-standard-not-standard","title":"HACR_EL2 (ARM standard-not-standard)","text":"<ul> <li>[20] Mask guest CNTV timer (1=masked)</li> </ul> <p>This works differently from SYS_APL_GTIMER_MASK; that one masks the timers earlier, this one leaves the FIQ \"pending\" in SYS_APL_HV_TMR_LR.</p>"},{"location":"hw/cpu/system-registers/#floating-point-and-amx-registers","title":"Floating-point and AMX registers","text":""},{"location":"hw/cpu/system-registers/#sys_apl_afpcr_el0","title":"SYS_APL_AFPCR_EL0","text":"<p>Apple-specific floating point related bits.</p> <ul> <li>[0] DAZ (Denormals as Zero)</li> <li>[1] FTZ (Flush to Zero)</li> </ul> <p>These implement the SSE equivalent mode bits. This must be enabled to be useful, with ACTLR_EL1.AFP.</p> <p>The AArch64 FEAT_AFT feature implements equivalent support, but Apple implemented it before it was standardized. The standard version is that you need to set FPSCR[1] (AH) to 1, and then FPCR[0] (FIZ) is like DAZ, and FPCR[24] (FZ) is like FTZ.</p>"},{"location":"hw/cpu/system-registers/#id-registers","title":"ID registers","text":""},{"location":"hw/cpu/system-registers/#midr_el1-arm-standard","title":"MIDR_EL1 (ARM standard)","text":"<ul> <li> <p>[15:4] PartNum</p> <ul> <li>1: Alcatraz Cyclone (A7 / H6P)</li> <li>2: Fiji Typhoon (A8 / H7P)</li> <li>3: Capri Typhoon (A8X / H7G)</li> <li>4: Malta / Elba Twister (TSMC A9 / A9X / H8P / H8G)</li> <li>5: Maui Twister (Samsung A9 / H8P)</li> <li>6: Cayman / Gibraltar Hurricane-Zephyr (A10 / T2 / H9P / H9M Fusion core)</li> <li>7: Myst Hurricane-Zephyr (A10X / H9G Fusion core)</li> <li>8: Skye Monsoon (A11 / H10 p-core)</li> <li>9: Skye Mistral (A11 / H10 e-core)</li> <li>11: Cyprus Vortex (A12 / H11P p-core)</li> <li>12: Cyprus Tempest (A12 / H11P e-core)</li> <li>15: M9 (S4/S5)</li> <li>16: Aruba Vortex (A12X/Z / H11G p-core)</li> <li>17: Aruba Tempest (A12X/Z / H11G e-core)</li> <li>18: Cebu Lightning (A13 / H12 p-core)</li> <li>19: Cebu Thunder (A13 / H12 e-core)</li> <li>34: M1 Icestorm (H13G e-core)</li> <li>35: M1 Firestorm (H13G p-core)</li> <li>38: Turks (S6 / M10)</li> </ul> </li> <li> <p>[31:24] Implementer (0x61 = 'a' = Apple)</p> </li> </ul>"},{"location":"hw/cpu/system-registers/#mpidr_el1-arm-standard","title":"MPIDR_EL1 (ARM standard)","text":"<ul> <li>[23:16] Aff2: 0: e-core, 1:p-core</li> <li>[15:8] Aff1: Cluster ID</li> <li>[7:0] Aff0: CPU ID</li> </ul>"},{"location":"hw/cpu/system-registers/#aidr_el1-arm-standard-not-standard","title":"AIDR_EL1 (ARM standard-not-standard)","text":"<ul> <li>[0] MUL53</li> <li>[1] WKDM</li> <li>[2] ARCHRETENTION</li> <li>[4] AMX</li> <li>[9] TSO</li> <li>[19] APFLG</li> <li>[20] PSRV</li> </ul>"},{"location":"hw/cpu/system-registers/#unknown-registers","title":"Unknown registers","text":""},{"location":"hw/cpu/system-registers/#s3_6_c15_c1_0_el1-s3_6_c15_c1_5_el1-s3_6_c15_c1_6_el1","title":"s3_6_c15_c1_0_EL1 / s3_6_c15_c1_5_EL1 / s3_6_c15_c1_6_EL1","text":"<p>These look like a newer version of APRR</p>"},{"location":"hw/cpu/system-registers/#s3_4_c15_c5_0_el1","title":"s3_4_c15_c5_0_EL1","text":"<p>This gets written with the core ID (within the cluster) during init.</p>"},{"location":"hw/cpu/system-registers/#ahcr_el2","title":"AHCR_EL2","text":"<p>Encoding unknown. Related to ACTLR_EL1[12].</p>"},{"location":"hw/cpu/system-registers/#s3_4_c15_c10_4-labeled-siq_cfg_el1-in-m1n1","title":"s3_4_c15_c10_4 (labeled SIQ_CFG_EL1 in m1n1)","text":"<p>If a core writes 0x3 to it's copy of the register, AICv2 will not send IRQs to that core. FIQs unaffected, as those are part of the core complexes themselves. (0x0 and 0x2 are known values that will enable IRQs on a core, but 0x0 seems to cause weird EL1 problems)</p>"},{"location":"hw/devices/device-list/","title":"Device List","text":"<p>This is a list of devices Asahi Linux intends to support. The Product and SoC are used for matching against device trees. Please check Feature Support for the state of support for specific models.</p>"},{"location":"hw/devices/device-list/#devices","title":"Devices","text":"Marketing name Device Product SoC Mac mini (M1, 2020) Macmini9,1 J274AP T8103 MacBook Pro (13-inch, M1, 2020) MacBookPro17,1 J293AP T8103 MacBook Air (M1, 2020) MacBookAir10,1 J313AP T8103 iMac (24-inch (4-port), M1, 2021) iMac21,1 J456AP T8103 iMac (24-inch (2-port), M1, 2021) iMac21,2 J457AP T8103 MacBook Pro (16-inch, M1 Pro, 2021) MacBookPro18,1 J316sAP T6000 MacBook Pro (16-inch, M1 Max, 2021) MacBookPro18,2 J316cAP T6001 MacBook Pro (14-inch, M1 Pro, 2021) MacBookPro18,3 J314sAP T6000 MacBook Pro (14-inch, M1 Max, 2021) MacBookPro18,4 J314cAP T6001 Mac Studio (M1 Max, 2022) Mac13,1 J375cAP T6001 Mac Studio (M1 Ultra, 2022) Mac13,2 J375dAP T6002 MacBook Pro (13-inch, M2, 2022) Mac14,7 J493AP T8112 MacBook Air (13-inch, M2, 2022) Mac14,2 J413AP T8112 Mac mini (M2, 2023) Mac14,3 J473AP T8112 Mac mini (M2 Pro, 2023) Mac14,12 J474sAP T6020 MacBook Pro (14-inch, M2 Pro, 2023) Mac14,9 J414sAP T6020 MacBook Pro (16-inch, M2 Pro, 2023) Mac14,10 J416sAP T6020 MacBook Pro (14-inch, M2 Max, 2023) Mac14,5 J414cAP T6021 MacBook Pro (16-inch, M2 Max, 2023) Mac14,6 J416cAP T6021 MacBook Air (15-inch, M2, 2023) Mac14,15 J415AP T8112 Mac Studio (M2 Max, 2023) Mac14,13 J475cAP T6021 Mac Studio (M2 Ultra, 2023) Mac14,14 J475dAP T6022 Mac Pro (2023) Mac14,8 J180dAP T6022 iMac (24-inch (2-port), M3, 2023) Mac15,4 J433AP T8122 iMac (24-inch (4-port), M3, 2023) Mac15,5 J434AP T8122 MacBook Pro (14-inch, M3, Nov 2023) Mac15,3 J504AP T8122 MacBook Pro (14-inch, M3 Pro, Nov 2023) Mac15,6 J514sAP T6030 MacBook Pro (16-inch, M3 Pro, Nov 2023) Mac15,7 J516sAP T6030 MacBook Pro (14-inch, M3 Max, Nov 2023) Mac15,8 J514cAP T6031 MacBook Pro (16-inch, M3 Max, Nov 2023) Mac15,9 J516cAP T6031 MacBook Pro (14-inch, M3 Max, Nov 2023) Mac15,10 J514mAP T6034 MacBook Pro (16-inch, M3 Max, Nov 2023) Mac15,11 J516mAP T6034 MacBook Air (13-inch, M3, 2024) Mac15,12 J613AP T8122 MacBook Air (15-inch, M3, 2024) Mac15,13 J615AP T8122 Mac Studio (M3 Ultra, 2025) Mac15,4 J575dAP T6032 iMac (24-inch (2-port), M4, 2024) Mac16,2 J623AP T8132 iMac (24-inch (4-port), M4, 2024) Mac16,3 J624AP T8132 Mac mini (M4, 2024) Mac16,10 J773gAP T8132 Mac mini (M4 Pro, 2024) Mac16,11 J773sAP T6040 MacBook Pro (14-inch, M4, Nov 2024) Mac16,1 J604AP T8132 MacBook Pro (14-inch, M4 Pro, Nov 2024) Mac16,8 J614sAP T6040 MacBook Pro (16-inch, M4 Pro, Nov 2024) Mac16,7 J616sAP T6040 MacBook Pro (14-inch, M4 Max, Nov 2024) Mac16,6 J614cAP T6041 MacBook Pro (16-inch, M4 Max, Nov 2024) Mac16,5 J616cAP T6041 MacBook Air (13-inch, M4, 2025) Mac16,12 J713AP T8132 MacBook Air (15-inch, M4, 2025) Mac16,13 J715AP T8132 Mac Studio (M4 Max, 2025) Mac16,9 J575cAP T6041"},{"location":"hw/peripherals/ace3/","title":"ACE3","text":"<p>ACE3 is the new USB-C / USB-PD controller in M3 products. It has a sn201202x compatible value in the ADT.</p>"},{"location":"hw/peripherals/ace3/#spmi-registers","title":"SPMI registers","text":"<p>Unlike its predecessors, the ACE3 is accessed via SPMI rather than I2C. However the underlying interface hasn't changed, a thin transport layer allows accessing what were previously I2C registers (which we'll refer to as \"logical registers\") through the SPMI registers.</p> <ul> <li>0x00 (logical register address) [RW]: writing <code>0x80 | logical_register_address</code> to this SPMI register triggers a logical register selection process. Once finished, the SPMI registers below are updated, the MSB in this register is cleared and an interrupt is asserted (see \"Interrupts\").</li> </ul> <p>Note 1: The \"register 0 write\" SPMI command can also be used (the 7-bit value is completed with MSB=1 and will therefore trigger a logical register selection). In fact selections triggered using this command appear to have stricter semantics and seem to be needed in some cases, see \"Dual-slave operation\" below.   Note 2: Writes with MSB=0 will update the register's value, but won't trigger a selection.</p> <ul> <li> <p>0x1F (logical register size) [RO]: when a logical register is selected, its size in bytes is written here by the hardware.</p> </li> <li> <p>0x20..0x5F (logical register data) [RW]: when a logical register is selected, its data is read, zero-padded and written here by the hardware. Writes anywhere in this area cause the area's contents to be written (truncated as appropriate) to the last selected logical register.</p> </li> </ul> <p>Note 1: There doesn't seem to be a way to monitor the completion of a logical register write, but it seems to block further selections.   Note 2: There doesn't seem to be a way to hold off the logical register write until later, so only logical registers of size \u2264 16 can be written atomically.</p> <p>Other observations:</p> <ul> <li> <p>Only the first 0x60 addresses are mapped, but address bits 7 and higher seem to be ignored, causing the block to be aliased every 0x80 bytes. Many consecutive SPMI registers can be accessed at once using extended (or extended long) commands.</p> </li> <li> <p>The device also supports the sleep and wakeup SPMI commands, and it's sleeping at boot. When sleeping, writes to SPMI registers are ACKed but ignored. It takes some time for the device to wake up after receiving the command (see also \"Interrupts\"). Even while in sleeping state, the ACE3 can respond to events (such as plugging a cable) and send the appropriate interrupts.</p> </li> </ul>"},{"location":"hw/peripherals/ace3/#interrupts","title":"Interrupts","text":"<p>Interrupts are no longer delivered through a GPIO pin; instead they are delivered through the SPMI controller, which thus also acts as an interrupt controller. I don't know how this works at the bus level, maybe delivery happens via a master write command? See the SPMI controller documentation for more info on how to receive these \"SPMI interrupts\".</p> <p>The ADT lists 3 odd interrupts for each ACE3; we call the smaller of those <code>BASE</code>.</p> <ul> <li> <p>[<code>BASE + 0</code>] Logical interrupts (marked as type 0 in the ADT): Asserted when an unacked (logical register 0x14) and unmasked (logical register 0x16) interrupt becomes pending. This serves the same purpose as the previous GPIO pin, however SPMI interrupts have edge/MSI semantics: each (unmasked) interrupt causes <code>BASE + 0</code> to be asserted once (even if there were other unacked+unmasked interrupts already) and not asserted again until ACKed.</p> </li> <li> <p>[<code>BASE + 2</code>] Selection complete? (doesn't appear in the ADT): Asserted each time a logical register selection completes.</p> </li> <li> <p>[<code>BASE + 4</code>] (doesn't appear in the ADT): Never observed in the wild.</p> </li> <li> <p>[<code>BASE + 6</code>] Sleep complete? (marked as type 2 in the ADT): Asserted when an SPMI sleep command is sent to the slave, even if the slave was already in that state. Possibly to indicate when the operation completes?</p> </li> <li> <p>[<code>BASE + 8</code>] Wakeup complete? (marked as type 3 in the ADT): Asserted when an SPMI wakeup command is sent to the slave, even if the slave was already in that state. Possibly to indicate when the operation completes? But the registers become writable much much earlier than receipt of the interrupt, so it may be something else.</p> </li> </ul> <p>The reason for this spacing of 2 in between (possible) interrupts is to support the dual-slave operation outlined below.</p>"},{"location":"hw/peripherals/ace3/#dual-slave-operation","title":"Dual-slave operation","text":"<p>Each ACE3 seems to have two SPMI slaves at the bus: one listening at the address listed in the ADT (even), presumably for use by the AP, and another listening at the address immediately after (odd), presumably for use by something else (the SMC, perhaps). This seems to allow the ACE3 to be accessed by two masters without fighting over the state of the interface (SPMI registers, interrupts, etc). In particular:</p> <ul> <li> <p>Each slave holds its own selection, even though they operate over the same logical registers. Each slave also seems to have some sort of cache for selections, which appears to be invalidated when the \"register 0 write\" command is used. By contrary, using a normal write to trigger a selection uses the cache and may return stale data: for example, logical registers may appear out of sync among the two slaves, and command execution (which involves writing a command to logical register 8) may appear to not finish, since subsequent reads of register 8 return the cached command rather than the result of the execution. Logical register writes are always committed immediately on writes to the 0x20..0x5F area, regardless how the selection was made.</p> </li> <li> <p>Each slave holds its own interrupt state: the \"AP slave\" uses register 0x14 for pending interrupts, register 0x16 for unmasked interrupts and register 0x18 to ACK interrupts. The other slave uses the same registers but shifted by +1 (0x15 for pending, 0x17 for unmasked, 0x19 for ACK). Drivers should be careful not to touch these (along with any other state owned by the secondary slave).</p> </li> <li> <p>Each slave holds its own sleeping state, but the ACE3 is only put to sleep if both slaves are in sleeping state. In this state, both slaves ignore writes to SPMI registers (but still ACK the commands). If at least one of the slaves is woken up, this doesn't happen (neither slave ignores writes). Whatever is using the secondary slave makes sure to only wake up the slave temporarily, perform the commands it needs to, and put it to sleep again. The \"AP slave\" is sleeping at boot.</p> </li> <li> <p>While the \"AP slave\" uses the SPMI interrupts documented above, the other slave uses the same interrupts but shifted by -1 (not +1). So for example selecting a register in the secondary slave causes a <code>BASE + 1</code> interrupt, the triggering of one of the interrupts in register 0x17 causes a <code>BASE - 1</code> interrupt, sending a sleep command to the secondary slave causes a <code>BASE + 5</code> interrupt and so on.</p> </li> </ul> <p>The secondary slave triggers abundant interrupts when e.g. plugging in a cable, making it clear something else is actually operating it. The fact that these interrupts make it to our SPMI controller hints at the interrupt delivery mechanism not being a \"master write\" command, since that's addressed to a single master and presumably the other user isn't using our SPMI controller but a separate SPMI master.</p>"},{"location":"hw/peripherals/camera/","title":"Camera and Image Signal Processor","text":""},{"location":"hw/peripherals/camera/#isp","title":"ISP","text":"<p>This information is based on Macbook Pro M1 2020 ISP. It may differ for other devices.</p>"},{"location":"hw/peripherals/camera/#sensor-type-isp-version","title":"Sensor Type -&gt; ISP Version","text":"Sensor Type ISP Version 0xee 0xf 0x54 0xb 0x55 0xb 0x56 0xb 0x57 0xb 0xe4 0xb 0xe5 0xb 0xe0 0xb 0xe1 0xb 0xe2 0xb 0xe3 0xb 0x1 0xb 0x2 0xb 0x3 0xb 0xe8 0xc 0xe7 0xc 0xe9 0xc 0xea 0xc 0x1a 0xc 0x1b 0xc 0xb 0xb 0xc 0xb 0xf5 0xb 0xd 0xc 0xe 0xc 0x13 0xc 0x14 0xc 0x15 0xc 0x16 0xc 0x9a 0xc 0x5 0xc 0x6 0xc 0x7 0xc 0x18 0xb 0x19 0xb 0x1c 0xf 0x1d 0xf ## Registers <ul> <li>ISP registers (regs[0]): Depending on chip revision different registers are used.</li> </ul> Register Name ISP Version ISP Revision? Offset Notes ISP_REVISION 0xF N/A 0x1800000 31:0 bits are used. ([31:0] == 0x1) =&gt; 0x15a  ([31:0] != 0x1001) =&gt; 0x15b 0xC N/A 0x1800000 31:0 bits are used. ([31:0] == 0x90) =&gt; 0x14a  ([31:0] != 0x1090) =&gt; 0x14b  ([31:0] == 0x3091) =&gt; 0x14c 0xB N/A 0x1800000 31:0 bits are used. ([31:0] == 0x90) =&gt; 0x13a  ([31:0] != 0x3091) =&gt; 0x13c --- --- --- --- --- SENSOR_REF_CLOCK0 0xF != 0x15b 0x24c41f0 Sensor Ref Clock 0 0xF == 0x15b 0x24c41f4 Sensor Ref Clock 0 0xC != 0x14c 0x24c41d0 Sensor Ref Clock 0 0xC == 0x14c 0x2104190 Sensor Ref Clock 0 Other * 0x2104190 Sensor Ref Clock 0 SENSOR_REF_CLOCK1 0xF != 0x15b 0x24c41f4 Sensor Ref Clock 1 0xF == 0x15b 0x24c41f8 Sensor Ref Clock 1 0xC != 0x14c 0x24c41d4 Sensor Ref Clock 1 0xC == 0x14c 0x2104194 Sensor Ref Clock 1 Other * 0x2104194 Sensor Ref Clock 1 SENSOR_REF_CLOCK2 0xF != 0x15b 0x24c41f8 Sensor Ref Clock 2 0xF == 0x15b 0x24c41fc Sensor Ref Clock 2 0xC != 0x14c 0x24c41d8 Sensor Ref Clock 2 0xC == 0x14c 0x2104198 Sensor Ref Clock 2 Other * 0x2104198 Sensor Ref Clock 2 SENSOR_REF_CLOCK3 0xF != 0x15b 0x24c41fc Sensor Ref Clock 3 0xF == 0x15b 0x24c4200 Sensor Ref Clock 3 0xC != 0x14c 0x24c41dc Sensor Ref Clock 3 0xC == 0x14c 0x210419c Sensor Ref Clock 3 --- --- --- --- --- POWER_ON? 0xF * 0x24a0080 Set to 0x1 during power on POWER_ON? 0xC != 0x14c 0x24a0080 Set to 0x1 during power on POWER_ON? Other * 0x20e0080 Set to 0x1 during power on --- --- --- --- --- UNKNOWN0 0xF * 0x24c41d0 0xC != 0x14c 0x24c41b0 Other Other 0x2104170 UNKNOWN1 0xF * 0x24c41d4 0xC != 0x14c 0x24c41b4 Other Other 0x2104174 UNKNOWN2 0xF * 0x24c41d8 0xC != 0x14c 0x24c41b8 Other Other 0x2104178 UNKNOWN3 0xF * 0x24c41dc 0xC != 0x14c 0x24c41bc Other Other 0x210417c UNKNOWN4 0xF * 0x24c41e0 0xC != 0x14c 0x24c41c0 Other Other 0x2104180 UNKNOWN5 0xF * 0x24c41e4 0xC != 0x14c 0x24c41c4 Other Other 0x2104184 UNKNOWN6 0xF * 0x24c41e8 0xC != 0x14c 0x24c41c8 Other Other 0x2104188 UNKNOWN7 0xF * 0x24c41ec 0xC != 0x14c 0x24c41cc 0xC * 0x210418c 0xB * 0x188 SMBUS_REG_MTXFIFO0 * * 0x2110000 I2C Channel 0 SMBUS_REG_MRXFIFO0 * * 0x2110004 SMBUS_REG_UNKNOWN0_1 * * 0x2110008 SMBUS_REG_UNKNOWN0_2* * * 0x211000c SMBUS_REG_UNKNOWN0_3* * * 0x2110010 SMBUS_REG_SMSTA0 * * 0x2110014 SMBUS_REG_UNKNOWN0_4 * * 0x2110018 SMBUS_REG_CTL0 * * 0x211001c SMBUS_REG_UNKNOWN0_5 * * 0x2110030 SMBUS_REG_UNKNOWN0_6 * * 0x2110034 SMBUS_REG_UNKNOWN0_7 * * 0x211003c --- --- --- --- --- SMBUS_REG_MTXFIFO1 * * 0x2111000 I2C Channel 1 SMBUS_REG_MRXFIFO1 * * 0x2111004 SMBUS_REG_UNKNOWN1_1 * * 0x2111008 SMBUS_REG_UNKNOWN1_2* * * 0x211100c SMBUS_REG_UNKNOWN1_3* * * 0x2111010 SMBUS_REG_SMSTA1 * * 0x2111014 SMBUS_REG_UNKNOWN1_4 * * 0x2111018 SMBUS_REG_CTL1 * * 0x211101c SMBUS_REG_UNKNOWN1_5 * * 0x2111030 SMBUS_REG_UNKNOWN1_6 * * 0x2111034 SMBUS_REG_UNKNOWN1_7 * * 0x211103c --- --- --- --- --- SMBUS_REG_MTXFIFO2 * * 0x2112000 I2C Channel 2 SMBUS_REG_MRXFIFO2 * * 0x2112004 SMBUS_REG_UNKNOWN2_1 * * 0x2112008 SMBUS_REG_UNKNOWN2_2* * * 0x211200c SMBUS_REG_UNKNOWN2_3* * * 0x2112010 SMBUS_REG_SMSTA2 * * 0x2112014 SMBUS_REG_UNKNOWN2_4 * * 0x2112018 SMBUS_REG_CTL2 * * 0x211201c SMBUS_REG_UNKNOWN2_5 * * 0x2112030 SMBUS_REG_UNKNOWN2_6 * * 0x2112034 SMBUS_REG_UNKNOWN2_7 * * 0x211203c --- --- --- --- --- SMBUS_REG_MTXFIFO3 * * 0x2113000 I2C Channel 3 SMBUS_REG_MRXFIFO3 * * 0x2113004 SMBUS_REG_UNKNOWN3_1 * * 0x2113008 SMBUS_REG_UNKNOWN3_2* * * 0x211300c SMBUS_REG_UNKNOWN3_3* * * 0x2113010 SMBUS_REG_SMSTA3 * * 0x2113014 SMBUS_REG_UNKNOWN3_4 * * 0x2113018 SMBUS_REG_CTL3 * * 0x211301c SMBUS_REG_UNKNOWN3_5 * * 0x2113030 SMBUS_REG_UNKNOWN3_6 * * 0x2113034 SMBUS_REG_UNKNOWN3_7 * * 0x211303c --- --- --- --- --- REG_DPE_UNKNOWN0 * * 0x2504000 REG_DPE_UNKNOWN1 * * 0x2508000 --- --- --- --- --- REG_UNKNOWN * * 0x1050000 <pre><code>- Unknown (offset: 0x1400044)\n- Unknown (offset: 0x1aa801c)\n</code></pre> <ul> <li>PS registers (regs[1]): Depending on chip revision different register range is used. Most chip revisions seems to use 0x4000-0x4060<ul> <li>Unknown (offset: 0x00)</li> <li>Unknown (offset: 0x08)</li> <li>Unknown (offset: 0x10)</li> <li>Unknown (offset: 0x18) </li> <li>Unknown (offset: 0x20)</li> <li>Unknown (offset: 0x28)</li> <li>Unknown (offset: 0x30)</li> <li>Unknown (offset: 0x38)</li> <li>Unknown (offset: 0x40) </li> <li>Unknown (offset: 0x328)</li> <li>Unknown (offset: 0x3d8)      </li> <li>Unknown (offset: 0x4000) </li> <li>Unknown (offset: 0x4008)</li> <li>Unknown (offset: 0x4010)</li> <li>Unknown (offset: 0x4018)</li> <li>Unknown (offset: 0x4020)</li> <li>Unknown (offset: 0x4028)</li> <li>Unknown (offset: 0x4030)</li> <li>Unknown (offset: 0x4038)</li> <li>Unknown (offset: 0x4040)</li> <li>Unknown (offset: 0x4048)</li> <li>Unknown (offset: 0x4050)</li> <li>Unknown (offset: 0x4058)</li> <li>Unknown (offset: 0x4060)</li> <li>Unknown (offset: 0x1c3e8)</li> <li>Unknown (offset: 0x1c400)</li> <li>Unknown (offset: 0x1c418)   </li> </ul> </li> <li> <p>SOC SPMI CSR registers (regs[2])</p> <ul> <li>Unknown (offset: 0x80a0) (Initialized as 1 &lt;&lt; 2^(1..5))</li> <li>Unknown (offset: 0x80a4) (Value here seems to be ORed with one of following values: 0x4000000, 0x8000000, 0x1, 0x2)</li> <li>Unknown (offset: 0x28) (Initialized as 0)</li> <li>Unknown (offset: 0x90) (Initialized as 1)</li> <li>Unknown (offset: 0x40) (Initialized as 0x4000000)</li> </ul> </li> <li> <p>SOC SPMI0 registers (regs[3])</p> <ul> <li>Unknown (offset: 0x80a0) (Initialized as 1 &lt;&lt; 2^(1..5))</li> <li>Unknown (offset: 0x80a4) (Value here seems to be ORed with one of following values: 0x4000000, 0x8000000, 0x1, 0x2)</li> <li>Unknown (offset: 0x28) (Initialized as 0)</li> <li>Unknown (offset: 0x90) (Initialized as 1)</li> <li>Unknown (offset: 0x40) (Initialized as 0x4000000)</li> </ul> </li> <li> <p>SOC SPMI1 registers (regs[4])</p> <ul> <li>Unknown (offset: 0x80a0) (Initialized as 1 &lt;&lt; 2^(1..5))</li> <li>Unknown (offset: 0x80a4) (Value here seems to be ORed with one of following values: 0x4000000, 0x8000000, 0x1, 0x2)</li> <li>Unknown (offset: 0x28) (Initialized as 0)</li> <li>Unknown (offset: 0x90) (Initialized as 1)</li> <li>Unknown (offset: 0x40) (Initialized as 0x4000000)</li> </ul> </li> </ul>"},{"location":"hw/peripherals/keyboard-backlight/","title":"Keyboard Backlight Controller","text":"<p>On the MacBook Pro, the keyboard backlight shows up in the ADT as:</p> <pre><code>fpwm {\n  [...]\n  AAPL.phandle = 59\n  clock-gates = 37\n  device_type = fpwm\n  reg = [889470976, 16384]\n\n  kbd-backlight {\n    [...]\n  }\n}\n</code></pre> <p>That suggests that there's a PWM at 0x235044000, enabled by the clock gate at 0x23b7001e0, which controls the keyboard backlight. That does appear to be the case :-)</p> <p>Registers, as far as I've figured them out:</p> <pre><code>+0x00: write 0x4239 to enable or after counter values changed\n+0x04: unknown, no effect\n+0x08: status bits: bit 0x01 is set when the light comes on, 0x02 is set when the light comes off. Write-to-clear.\n+0x0c: unknown, no effect\n+0x18: off period, in 24 MHz ticks\n+0x1c: on period, in 24 MHz ticks\n</code></pre> <p>So a complete m1n1 sequence to make the keyboard backlight flash in an annoying and possibly seizure-inducing way is:</p> <pre><code>&gt;&gt;&gt; write32(0x23b7001e0, 0xf)\n&gt;&gt;&gt; write32(0x23504401c, 1200000)\n&gt;&gt;&gt; write32(0x235044018, 1200000)\n&gt;&gt;&gt; write32(0x235044000, 0x4239)\n</code></pre> <p>changing the frequency while keeping a 50% duty cycle:</p> <pre><code>&gt;&gt;&gt; write32(0x235044018, 4000)\n&gt;&gt;&gt; write32(0x23504401c, 4000)\n&gt;&gt;&gt; write32(0x235044000, 0x4239)\n</code></pre> <p>PR at https://github.com/AsahiLinux/linux/pull/5</p>"},{"location":"hw/soc/accelerators/","title":"Apple Silicon Accelerators","text":"<p>The SoC has several onboard accelerator units, this is a useful list of the names and what they refer to. Most of the accelerators run firmware that can be found in the pre-boot partition <code>/System/Volumes/Preboot/[UUID]/restore/Firmware</code>, packaged as im4p files which may be extracted with https://github.com/19h/ftab-dump/blob/master/rkos.py and some dd. </p> <p>*Update none of the ANE, AVE, ADT im4p's extract with that. I'm not sure which ones do. You are better off following the im4p extraction steps in ADT. Can we make a progress matrix regarding firmware?</p>"},{"location":"hw/soc/accelerators/#names","title":"Names","text":"<p>Names can be formatted the following ways depending on their official-ness: * Names in quotes with a question mark like: \"?\" are inventions/uncertain in origin. * Names in bold like:  are found in Apple official documentation. * Names in italics like:  are either common unofficial names or have uncertain but safe sources."},{"location":"hw/soc/accelerators/#a","title":"A","text":"<ul> <li>AGX: \"Apple Graphics? Accel(x)lerator?\" (via <code>gfx</code>) The internal name for Apple's GPU series. </li> <li>AMX: Apple Matrix eXtensions. A matrix coprocessor partially integrated into the ISA.</li> <li>ANE: Apple Neural Engine Neural network execution acceleration based on convolutions. Think of Google's TPU</li> <li>AOP: Always On Processor. \"hey siri\" activation and \"other sensor stuff\"</li> <li>APR: APR ProRes. Handles ProRes video encoding + decoding.</li> <li>AVE: AVE Video Encoder. Handles video encoding. Ostensibly the A is for Apple [citation needed], but I see a recursive acronym.</li> <li>AVD: AVD Video Decoder. Handles video decoding. ^</li> </ul>"},{"location":"hw/soc/accelerators/#d","title":"D","text":"<ul> <li>DCP: \"Display Compression Processor?\"/\"Display Control Processor?\". Displayport/Display control of some sort.</li> </ul>"},{"location":"hw/soc/accelerators/#p","title":"P","text":"<ul> <li>PMP: \"Power Management Processor?\". Handles power functionality</li> </ul>"},{"location":"hw/soc/accelerators/#s","title":"S","text":"<ul> <li>SEP: Secure Enclave Processor. The M1's built-in HSM/TPM/etc device. Handles Touch ID and most crypto, as well as boot policy decisions. Harmless to Linux, but we can use its features if we want to. Contrast to AP.</li> </ul>"},{"location":"hw/soc/agx/","title":"Apple GPU (AGX)","text":""},{"location":"hw/soc/agx/#linas-agx-notes","title":"Lina's AGX notes","text":"<p>Reader beware, here be dragons. Pointer-shaped dragons. Lots of them.</p> <p>This document focuses on the AGX architecture from the point of view of a kernel driver. It will not discuss aspects that are purely of userspace concern, like shaders, texture sampling, pipeline command encoders, etc.</p>"},{"location":"hw/soc/agx/#overview","title":"Overview","text":"<p>AGX is a heavily PowerVR-inspired (but largely bespoke) GPU design. The OS interface is brokered almost exclusively via an ASC (ARM64) coprocessor, which runs Apple firmware. All communication occurs via shared memory and a few mailbox doorbell messages. All memory is coherent as far as we can tell (we haven't used a single cache management instruction yet and everything still works).</p> <p>The layers involved in getting a triangle on the screen are roughly:</p> <ul> <li>UAT (MMU)</li> <li>Firmware init</li> <li>GPU Channels</li> <li>GPU Contexts</li> <li>Work Queues</li> <li>Work Items</li> <li>Micro Sequences</li> <li>Tiler buffer management</li> <li>Event management</li> <li>(All the userspace stuff goes here)</li> </ul>"},{"location":"hw/soc/agx/#uat-unified-address-translator","title":"UAT (Unified Address Translator)","text":"<p>The UAT is the AGX's MMU. It is essentially the ARM64 MMU, and uses identical page tables. In fact, the AGX ASC literally configures UAT page table bases as its TTBR0/1 registers. There may be some nuance to how the GPU proper interprets page permissions and other attributes compared to how a CPU would; this is still largely unexplored.</p> <p>GPU VAs are 40 bits, with the top bit sign-extended to 64 bits. As with ARM64, there is a kernel/user address space split. Pages are always 16K.</p> <p>There is a global, fixed page of memory that contains GPU context page table base addresses. There are up to 16 contexts (TODO: double check this limit is real and not driver-controlled), each with two base registers for the kernel/user page tables. </p> <p>macOS always uses context 0 for the kernel only (no user pages for that one) and shares the kernel half of the page tables for all contexts. User VA space is unique per context.</p> <p>The kernel address space literally maps ASC firmware too, as it is the ASC's CPU page table. This is in a VA range that the firmware controls by itself, and sets up during initialization. The host OS is responsible for the rest of the page tables in this half of the address space, which is where all the GPU control structures go.</p> <p>Note: firmware is loaded by the bootloader and write-protected. While hijacking the page tables to completely take over AGX firmware is plausible with the current design, clearly Apple's intent and direction is for ASC firmwares to be hardened against takeover, so we will not consider using our own firmware at this point. Talking to Apple's firmware to make this GPU work is considered non-negotiable.</p> <p>TODO: UAT TLB invalidation. There's some shared memory involved and poking the firmware.</p>"},{"location":"hw/soc/agx/#firmware-init","title":"Firmware init","text":"<p>Firmware communication uses the RTKit framework common to other ASCs, which will not be covered here. Only the memory/buffer management is different (other ASCs use either DART IOMMUs, SART address filters, or can only access dedicated SRAM).</p> <p>To initialize the GPU, a single message is sent containing a pointer to an inititalization data structure. This is a complex nested data structure with more pointers, containing things such as:</p> <ul> <li>Channel ring buffer control area and ring buffer area pointers</li> <li>Power management data including DVFS states</li> <li>Shared memory regions containing various (largely unknown) data</li> <li>Colorspace conversion coefficients</li> <li>MMIO mapping list (OS is responsible for mapping MMIO regions the ASC needs to access)</li> <li>UAT layout information</li> <li>Various unknown buffers</li> </ul> <p>Data structures: see initdata.py</p>"},{"location":"hw/soc/agx/#channels","title":"Channels","text":"<p>Communication with the firmware happens via channel ring buffers. Channels hold small, fixed-size messages delivered in-line in the ring buffers. A control structure has the read/write buffer pointers and size, cacheline-aligned so the GPU/CPU do not bounce things all the time. There are channels in both directions.</p> <p>Data structures: see channels.py</p>"},{"location":"hw/soc/agx/#cpu-gpu-channels","title":"CPU-&gt;GPU channels","text":"<ul> <li>Work Channels: four groups (0-3), each with three channels, one per GPU work type<ul> <li>TA (Tile Accelerator; vertex processing)</li> <li>3D (3D; pixel processing)</li> <li>CP (Compute)</li> </ul> </li> </ul> <p>TODO: there is probably some priority scheme for work submitted to different channels.</p> <ul> <li>DeviceControl channel, for device-wide messages (e.g. GPU init and presumably power management related stuff)</li> </ul>"},{"location":"hw/soc/agx/#gpu-cpu-channels","title":"GPU-&gt;CPU channels","text":"<ul> <li>Event: work-related event notifications<ul> <li>Work completion flag events</li> <li>These have a 128-bit array indicating which event indices are firing</li> <li>Fault notifications</li> <li>GPU faults seem to be quite poorly handled as a stop-the-world process; macOS actually goes off dumping GPU MMIO registers directly, and the firmware seems to be quite clueless as to what to do.</li> </ul> </li> <li>Statistics messages<ul> <li>We ignore these. The firmware will complain once if the buffer overflows, but it's harmless.</li> </ul> </li> <li>Firmware syslogs<ul> <li>This one is weird in that there are multiple sub-channels for some reason, with control structures laid out contiguously.</li> </ul> </li> <li>An unknown channel (tracing?)</li> </ul>"},{"location":"hw/soc/agx/#gpu-contexts","title":"GPU contexts","text":"<p>GPU contexts map to a few small shared structures, some populated by the ASC. This is mostly still TBD.</p>"},{"location":"hw/soc/agx/#work-queues","title":"Work Queues","text":"<p>A work queue holds work items of a specific type. There are usually multiple work queues per context (e.g. at least 3D and TA for 3D rendering). Work queues are represented by a few structures, mostly a main structure initialized by the CPU and managed by the GPU, with pointers to context structures, a ring buffer, a ring buffer pointer block, and others. The ring buffer is an array of pointers to individual items (not in-line).</p> <p>To process a work queue, the OS submits a message on a work channel with a pointer to the work queue management structure and the most recent ring buffer write pointer, plus an event index to signal work completion, and a flag indicating whether this is the first submission from a new work queue.</p> <p>Data structures: see cmdqueue.py</p>"},{"location":"hw/soc/agx/#work-items","title":"Work items","text":"<p>Work items represent GPU work or related operations. These are fairly large buffers containing embedded sub-structures in a particular layout (pointers to some of these sub-structures exist, but the firmware assumes the embedding in a particular way, so the layout must be respected).</p> <p>Data structures: see cmdqueue.py</p>"},{"location":"hw/soc/agx/#micro-sequences","title":"Micro Sequences","text":"<p>The ASC firmware contains a command sequencer that can run fairly complex \"scripts\" as part of work commands, but it is usually used in a fairly basic manner. These sequences are packed buffers of commands that are executed as part of a work item. The typical sequence is:</p> <ul> <li>Start (3D/TA/CP)</li> <li>Write Timestamp</li> <li>Wait For Idle</li> <li>Write Timestamp</li> <li>Finish (3D/TA/CP)</li> </ul> <p>Data structures: see microsequence.py</p>"},{"location":"hw/soc/agx/#tiler-buffer-management","title":"Tiler buffer management","text":"<p>The GPU tiler needs a buffer to store vertex attribute and primitive data. This is done through a few fixed-size buffers provided by the driver, and a heap that the GPU firmware allocates stuff out of at its discretion. The heap is managed via a buffer manager object and a few buffers it points to, where the CPU provides a list of blocks (4 pages) and pages (32K each, aligned in VA space (!)).</p> <p>The tiler buffer overflow / partial store / reload process is entirely managed by ASC firmware.</p> <p>Data structures: see BufferManager* in microsequence.py</p>"},{"location":"hw/soc/agx/#event-management","title":"Event Management","text":"<p>Work completion is signaled by writing values to stamp objects, which are 32-bit words in RAM. Typically initialized at 0 and increment by 0x100 for each work item processed. Each work item is also associated with an event ID (0-127), and an event management structure. The structure is shared between 3D/TA for a single user, and contains the base barrier value and (?) a number of events threshold. When the threshold is reached, the corresponding event ID(s) are asserted in an Event message to the CPU. How this works/counts is still unclear, since the same structure is shared between different queues using different barrier objects which increment in lockstep, but each only increments by one while the threshold needs to be 2 to get both events... TBD</p>"},{"location":"hw/soc/agx/#drawing-a-3d-frame","title":"Drawing a 3D frame","text":"<p>To draw a frame first you need these things:</p> <ul> <li>A pair of 3D/TA channels to use</li> <li>A pair of event indexes for completion notification</li> <li>A pair of WorkQueues</li> <li>A context ID for the UAT</li> <li>A shared context structure</li> <li>Tiler static buffers</li> <li>Tiler heap manager &amp; associated buffers/lists</li> <li>Four stamp objects</li> </ul>"},{"location":"hw/soc/agx/#tiler-buffers","title":"Tiler buffers","text":"<ul> <li>(U) TVB tile array (depends on tile count)</li> <li>(U) TVB list array (depends on tile count?)</li> <li>(U) TVB heap metadata block (fixed size?)</li> <li>(K) TVB heap manager &amp; (U) heap (arbitrary size &gt;= 3 128K blocks, CPU can dynamically adjust in response to overflows for future frames)</li> </ul> <p>macOS allocates these in the kernel. Do we want to do it in the kernel or userspace? Userspace should probably be in control of sizing at least? Could let the kernel decide, or have userspace donate pages to the buffer manager. Kernel needs to handle the heap manager structure at least.</p>"},{"location":"hw/soc/agx/#stamp-objects-event-management","title":"Stamp objects &amp; event management","text":"<p>There are 128 event indices. A render needs 4 stamp objects, 2 each for TA/3D. Current theory is one stamp indicates completion of the work, the other indicates the completion event was delivered to the CPU (work was reaped?)</p>"},{"location":"hw/soc/agx/#ta-work","title":"TA work","text":"<p>The TA work usually looks like this:</p>"},{"location":"hw/soc/agx/#initialize-heap-manager","title":"Initialize Heap Manager","text":"<p>Needed the first time or when the heap size changes. Tells the GPU that the CPU re-initialized the management structure.</p> <p>There is an unknown context-related ID involved. This might be a heap manager ID? The (new) TA stamp value is also passed.</p>"},{"location":"hw/soc/agx/#execute-ta","title":"Execute TA","text":"<p>Note: this is all summarized and glosses over tons of unknown/fixed/magic numbers</p> <ul> <li>UAT context ID for this job</li> <li>Event management structure pointer</li> <li>Heap manager structure pointer</li> <li>Pointer to some kind of related buffer descriptor (?)</li> <li>Pointer to unknown buffer (empty)</li> <li>Timestamp 1 ptr</li> <li>Timestamp 2 ptr</li> <li>Timestamp 3 ptr</li> <li>Unknown buffer 2 (empty)</li> <li>Embedded structures:<ul> <li>Tiler parameters (tile counts/etc)</li> <li>TA work struct 2</li> <li>TVB tilemap ptr</li> <li>TVB list ptr</li> <li>Three small buffers passed from userspace (alyssa calls these \"deflake\")</li> <li>Command encoder ptr (i.e. actual gfx pipeline to run, from userspace)</li> <li>Pipeline window base (4GiB window into VAs used for 32-bit shader pointers)</li> <li>TA work struct 3</li> <li>One of the deflake ptrs</li> <li>Encoder ID (unique ID, GPU likely does not care)</li> <li>\"Unknown buffer\" (the one with incrementing numbers, from userspace)</li> <li>Pointer to TA barrier 1 and 2</li> <li>Stamp value to write on completion</li> <li>Some UUID</li> </ul> </li> <li>Micro sequence pointers</li> <li>Completion stamp value again</li> <li>Event number assigned to 3D (for TA/3D coordination on TVB overflows?)</li> <li>TVB tile array again &amp; size</li> </ul>"},{"location":"hw/soc/agx/#ta-micro-sequence","title":"TA Micro Sequence","text":"<p>The micro sequence is pointed to by the TA work and has these commands:</p>"},{"location":"hw/soc/agx/#start-ta","title":"Start TA","text":"<ul> <li>Tiling params ptr</li> <li>TA work struct 2 ptr</li> <li>Heap manager ptr</li> <li>Buffer descriptor thing pointer</li> <li>Some pointer into an array in the shared GPU initdata (?)</li> <li>Pointer back to the work queue control structure involved</li> <li>UAT context ID</li> <li>That other context-related ID (heap mgr id?)</li> <li>TA work struct 3 ptr</li> <li>Pointer to one of the unknown buffers in Execute TA</li> <li>UUID</li> </ul>"},{"location":"hw/soc/agx/#timestamp","title":"Timestamp","text":"<ul> <li>Flag=1</li> <li>Points to three timestamp pointers in Execute TA: #1, #2, #2</li> <li>UUID</li> </ul>"},{"location":"hw/soc/agx/#wait-for-idle","title":"Wait For Idle","text":"<ul> <li>Args: 1, 0, 0</li> </ul>"},{"location":"hw/soc/agx/#timestamp_1","title":"Timestamp","text":"<ul> <li>Flag=0</li> <li>Points to three timestamp pointers in Execute TA: #1, #2, #3 (note difference)</li> <li>UUID</li> </ul>"},{"location":"hw/soc/agx/#finish-ta","title":"Finish TA","text":"<ul> <li>Pointer to that buffer thing</li> <li>Pointer to heap manager</li> <li>Same initdata pointer as in Start TA</li> <li>Pointer back to work queue</li> <li>UAT context ID</li> <li>Pointer to TA Struct 3</li> <li>UUID</li> <li>Pointer to TA stamp 2</li> <li>Stamp value to write</li> <li>Offset back to Start TA micro command (presumably to restart for partial renders?)</li> </ul>"},{"location":"hw/soc/agx/#3d-work","title":"3D work","text":""},{"location":"hw/soc/agx/#barrier-wait-for-stamp","title":"Barrier (Wait for Stamp)","text":"<p>This blocks 3D until TA is done. Unclear what black magic makes partial renders work.</p> <ul> <li>Pointer to TA stamp #2</li> <li>Value to wait for</li> <li>Value to wait for again (? range?)</li> <li>TA event index (presumably this signals the actual poll)</li> <li>UUID</li> </ul>"},{"location":"hw/soc/agx/#execute-3d","title":"Execute 3D","text":"<ul> <li>UAT Context ID</li> <li>Event management structure pointer</li> <li>Tiler heap manager pointer</li> <li>Pointer to that buffer descriptor thing</li> <li>Unknown empty buffer</li> <li>TVB tile array pointer</li> <li>More unknown empty buffers</li> <li>Timestamp 1 ptr</li> <li>Timestamp 2 ptr</li> <li>Timestamp 3 ptr</li> <li>Embedded structures:<ul> <li>3D work struct 1</li> <li>Some floats?</li> <li>Depth clear value</li> <li>Stencil clear value</li> <li>Depth bias array ptr</li> <li>Scissor array ptr</li> </ul> </li> </ul> <p>(unfinished)</p>"},{"location":"hw/soc/agx/#phires-m1x-gpu-infodump","title":"phire's M1x GPU infodump","text":"<p>(Moved here from <code>phire-gpu-infodump.md</code>)</p> <p>All my work was done on my T6000 14\" M1 Max with MacOS 12.2</p> <p>So far, this is mostly an adventure to find how work is submitted to the GPU.</p>"},{"location":"hw/soc/agx/#uat-iommu-aka-unified-address-translator","title":"UAT iommu (aka Unified Address Translator)","text":"<p>There is a reasonably complete implementation of UAT in m1n1/hw/uat.py</p> <p>It is a 4 level pagetable:</p> <ul> <li>L0: 2 entries</li> <li>L1: 8 entries</li> <li>L2: 2048 entries</li> <li>L3: 2048 entries</li> </ul> <p>Pages are fixed-sized at 16KB</p> <p>The (slightly weird) layout allows for shared VM regions (above <code>0xf80_00000000</code>) to be in L0[1] and all per-context allocations to be in L0[0], making for easy constriction of L0 tables for new contexts </p> <p>I have not found a TTBR register, or any registers. It seems gfx-asc is in full control of this iommu. It does set up it's own pagetables for the private IO region</p> <p>This has security implications, gfx-asc has access to every single physical page, and some (if not all) MMIO registers. Panic messages from the MacOS kernel suggest there might be a \"microPPL\" running on the gfx-asc coprocessor, similar to the PPL in MacOS, and that's hopefully the only part that can modify page tables.</p> <p>The MacOS kernel has a useful kernel option, <code>iouat_debug=1</code> that logs out all allocations and  de-allocations in this address space.</p> <p>See m1n1.hw.PTE for details on the PTE format</p>"},{"location":"hw/soc/agx/#gpu-virtual-address-space","title":"GPU Virtual Address Space","text":"<p>MacOS (at least on my machine) uses GPU VAs in the following ranges:</p> <p><code>0x015_00000000</code>: Most userspace allocations <code>0x011_00000000</code>: Some additional userspace allocations <code>0x06f_ffff8000</code>: No idea. Only a single page <code>0xf80_00000000</code>: ASC's private VM region, that it allocates itself. Mostly contains the ASC firmware This region lines up with <code>/arm-io/sgx/rtkit-private-vm-region-base</code></p> <p><code>0xf80_10000000</code>: IO region mapped by ASC firmware. Only contains the ASC mailbox registers. <code>0xfa0_00000000</code>: Region where macos kernel allocates things <code>0xfa0_10000000</code>: IO region mapped by MacOS. Points to ASC regions, PMRG registers, MCC registers (and more?)</p> <p>Pointers are sometimes sign extended, so you will sometimes see pointers in the range <code>0xffffff80_00000000</code> or <code>0xffffffa0_00000000</code>, but there are only actually 40 bits of address space. Logs from the kernel usually report 44 bits, hence <code>0xfa_00000000</code> address</p> <p>UAT is in control of this address space.</p>"},{"location":"hw/soc/agx/#gfx-asc","title":"gfx-asc","text":"<p>The ASC interface seems like it would be natural interface for submitting work.</p> <p>However there is shocking little traffic on this interface, especially when compared to what I've seen of DCP.</p>"},{"location":"hw/soc/agx/#endpoints","title":"Endpoints","text":"<p>0x0: Standard Management, I didn't see anything weird here.  0x1: Standard Crashlog endpoint 0x20: I called this Pong. Receives regular \"pongs\" 0x21: I called this Kick.  </p>"},{"location":"hw/soc/agx/#crashlog-endpoint","title":"Crashlog Endpoint","text":"<p>The entire traffic is:</p> <pre><code>RX 0x0012000000000000\nTX 0x00104fa00c388000\n</code></pre> <p>And happens right around initialization</p> <p>0xfa00c388000 is a GPU VA, and points at a single page allocation. the gfx firmware fills this with a repeating pattern during initialization (16KB of repeating 0xef byte), and then never touches it again.</p>"},{"location":"hw/soc/agx/#pong-endpoint","title":"Pong Endpoint","text":"<p>Crashlogs call this endpoint \"User01\"</p> <p>I probably misnamed this, the number of Pong messages don't line up with kicks. Might be more of a heartbeat, or might be the gfx firmware telling the cpu that it touched the pagetables.</p> <p>There is also some more initialization that happens on this endpoint after the Init endpoint.</p> <p>Messages: <code>RX 0x0042000000000000</code>: The pong. Never sets the lower bits to anything other than zero. <code>TX 0x00810fa0000b0000</code>: Initialization, sent once  </p> <p>If you send a null pointer as the Initialization data, you get the following crash over Crashlog:</p> <pre><code>GFX PANIC - Unable to grab init data from host - agx_background(2)\n</code></pre> <p>The painclog shows the following active tasks:</p> <ul> <li>rtk_ep_work</li> <li>power</li> <li>agx_background</li> </ul> <p>And the panic happens in agx_background. Does this mean this endpoint belongs to agx_background?</p> <p>Once the initialization data has been supplied, I didn't managed to crash this endpoint by sending it messages</p>"},{"location":"hw/soc/agx/#pong-initialization","title":"Pong Initialization","text":"<p>This also contains a GPU VA, pointing at a data structure that is prefilled by the cpu:</p> <pre><code>&gt;&gt;&gt; chexdump32(gfx.uat.ioread(0, 0xfa0000b0000, 0x4000))\n00000000  000b8000 ffffffa0 00000000 00000000 0c338000 ffffffa0 00020000 ffffffa0\n00000020  000c0000 ffffffa0 030e4000 240e0e08 40000008 00000001 00000000 ffffc000\n00000040  000003ff 00000000 00000070 190e0e08 40000800 00000001 00000000 ffffc000\n00000060  000003ff fe000000 0000000f 0e0e0e08 40000800 00000001 00000000 ffffc000\n00000080  000003ff 01ffc000 00000000 00000000 00000000 00000000 00000000 00000000\n000000a0  00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n000000c0  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n</code></pre> <p>I called this ControlStruct in my m1n1/trace/agx.py code.</p> <p>After initialization, the CPU never touches this.</p> <p>unkptr_18 appears to be a heap or stack used by the asc-firmware?</p>"},{"location":"hw/soc/agx/#kick","title":"Kick","text":"<p>Crashlogs call this endpoint \"User02\"</p> <p>Messages: </p> <p><code>0x83000000000000</code>: Submit TA channel <code>0x83000000000001</code>: Submit 3D channel <code>0x83000000000002</code>: Submit CL channel <code>0x83000000000010</code>: Kick Firmware <code>0x83000000000011</code>: Device Control</p> <p>These Kicks might be triggering work submission, but with only 5 bits of entropy, the actual information must be somewhere in shared memory. But at this point I have not found shared memory that is altered between kicks. It's also possible I mislabeled this, and the kicks are actually TLB invalidation</p> <p>Sending <code>0x0083000000000000</code> messages with out-of-range kicks doesn't cause a crash message types 0x84 and 0x85 </p>"},{"location":"hw/soc/agx/#channels_1","title":"Channels","text":""},{"location":"hw/soc/agx/#channel-0","title":"Channel 0","text":"<p>Used by <code>0x83000000000000</code>: Submit TA channel</p> <p>00000000 0c000000 ffffffa0 00000002 00000000 00000001 00000000 0c3a8000 ffffffa0 00000002 00000002 00000001 00000000 0c000000 ffffffa0 00000003 00000000 00000000 00000000 0c3a8000 ffffffa0 00000003 00000002 00000000 00000000 0c3a8000 ffffffa0 00000004 00000002 00000000 00000000 0c3a8000 ffffffa0 00000005 00000002 00000000</p>"},{"location":"hw/soc/agx/#channel-1","title":"Channel 1","text":"<p>Used by <code>0x83000000000001</code>: Submit 3D channel</p> <p>00000001 0c002cc0 ffffffa0 00000002 00000001 00000001 00000001 0c3aacc0 ffffffa0 00000002 00000003 00000001 00000001 0c002cc0 ffffffa0 00000004 00000001 00000000 00000001 0c3aacc0 ffffffa0 00000004 00000003 00000000 00000001 0c3aacc0 ffffffa0 00000006 00000003 00000000 00000001 0c3aacc0 ffffffa0 00000008 00000003 00000000 00000001 0c002cc0 ffffffa0 00000006 00000001 00000000 00000001 0c3aacc0 ffffffa0 0000000a 00000003 00000000</p>"},{"location":"hw/soc/agx/#channel-12","title":"Channel 12","text":"<p>Used by Device Control - <code>0x83000000000011</code></p> <p>The kernel puts a message in channel 12 before even initializing gfx-asc.</p> <p>Message Type 0x19</p> <p>then</p> <p>Message Type 0x23</p> <p>Message 0x17:</p> <pre><code>Seen when launching my metal test\n</code></pre>"},{"location":"hw/soc/agx/#channel-13","title":"Channel 13","text":"<p>From GPU firmware?</p> <p>Transfers are actually 0x38 bytes long, instead of the regular 0x30</p> <pre><code># chan[13]-&gt;ptrB (0xffffffa000031f00..0xffffffa0000350af)\nffffffa000031f00 00000001 00000001 00000000 00000000 00000000 4b430000 534b5452 4b434154 | ......................CKRTKSTACK\nffffffa000031f20 534b5452 4b434154 534b5452 4b434154 534b5452 4b434154 00000001 00000002 | RTKSTACKRTKSTACKRTKSTACK........\nffffffa000031f40 00000000 00000000 00000000 ffff0000 00000080 00000000 000040e8 00000000 | .........................@......\nffffffa000031f60 00001180 00021300 000040e0 00000000 00000000 00000000 00000000 00000000 | .........@......................\n</code></pre>"},{"location":"hw/soc/agx/#channel-14","title":"Channel 14","text":"<p>A reply to channel 12?</p> <p>Message Type 0x4</p>"},{"location":"hw/soc/agx/#channel-16","title":"Channel 16","text":"<p>The timestamp channel.</p> <p>This might show the timestamps of every function or mode the gpu firmware (or gpu itself) was in</p> <p>Type 0xc - Nothing has happened</p>"},{"location":"hw/soc/agx/#tasks","title":"Tasks","text":"<p>According to crashlogs, gfx-asc is running the following tasks:</p> <ul> <li>rtk_ep_work</li> <li>power</li> <li>agx_background</li> <li>agx_recovery</li> <li>agx_interrupt</li> <li>agx_power</li> <li>agx_sample</li> </ul>"},{"location":"hw/soc/agx/#arm-iosgxs-various-shared-memory-ranges","title":"/arm-io/sgx's various shared memory ranges","text":"<p>Talking about shared memory, these are the obvious ones. Allocated by iboot and listed in ADT</p> <p>gpu-region-base:</p> <p>Single page containing the L0 tables for UAT. Controlled by CPU.</p> <p>The L0 for a given context can be found at <code>gpu-region-base + context * 0x10</code></p> <p>gfx-shared-region-base:</p> <p>Contains all the private pagetables that gfx-asc allocates itself during initialization.</p> <p>Mostly controlled by gfx-asc, though the cpu controls the PPE <code>L0[1][2]</code> and points it to an L2 table in it's own memory.</p> <p>There seems to be a convention that the <code>L0[1]</code> PTE will point to the start of this region. </p> <p>gfx-handoff-base:</p> <p><code>0x10ffffb4000</code> : u64 - microPPL magic value of <code>0x4b1d000000000002</code> <code>0x10ffffb4008</code> : u64 - microPPL magic value of <code>0x4b1d000000000002</code> </p> <p>Corrupting this value results in the following panic:</p> <pre><code>panic(cpu 4 caller 0xfffffe0013c5d848): UAT PPL 0xfffffdf030af4160 (IOUAT): \nInvalid microPPL magic value found in the handoff region. \nExpected: 0x4b1d000000000002, Actual: 0x0\n</code></pre> <p><code>0x10ffffb4018</code> : u32 - Commonly read as u8 - initialized to 0xffffffff <code>0x10ffffb4038</code> : u32 - Flush state (commonly set to 0 or 2)  </p> <p>The CPU has a pattern of setting this to 2, changing some of the following values, and then setting it back to 0. I suspect this might be a mutex?</p> <p>Changing this to 2 when the cpu doesn't expect it will cause it to panic with:</p> <pre><code>panic(cpu 0 caller 0xfffffe0013b6d8c4): UAT PPL 0xfffffdf0429d0160 (IOUAT): \n    Attempted to call prepareFWUnmap() before completing previous cache flush. \n    flush_state: 2 | start_addr: 0x150e540000 | size: 0x730000 | context_id: 1\n</code></pre> <p><code>0x10ffffb4040</code> : u64 - CPU sometimes writes GPU VAs here <code>0x10ffffb4048</code> : u64 - Size? set to nice round numbers like 0x28000 and 0x8000 <code>0x10ffffb4050</code> : u64 - CPU sometimes writes GPU VAs here <code>0x10ffffb4058</code> : u64 - another size  </p> <p><code>0x10ffffb4098</code> : u64 - Treated the same way as 4038, but when touching 40a0 <code>0x10ffffb40a0</code> : u64 - CPU sometimes writes GPU VAs here, I've only seen this when running a metal app <code>0x10ffffb40a8</code> : u64 - size?  </p> <p><code>0x10ffffb4620</code> : u32 - ? <code>0x10ffffb4638</code> : u8 - Always checked before 0x4038 is changed.  </p> <p>The CPU writes interesting GPU VA pointers to this range. I spent a long time thinking this must be how work is submitted to the GPU. But it doesn't seem to be related to the Kicks or Pongs. Sometimes the kernel will overwrite pointers multiple times with zero Kicks or Pongs in-between. Other times it will do hundreds of kicks without ever changing anything in this region.</p> <p>My current theory is that this region is exclusive used to track the status of page table updates, and is accessible to both MacOS and gfx-asc so they can syncronise access for pagetable updates</p> <p>The following panic message <code>GFX PANIC - Host-mapped FW allocations are disabled, but FW only supports enabled</code> (seen when setting byte 0xa0 of initdata to 0) suggests that this \"firmware control of pagetable\"  functionally isn't actually enabled in this version of the firmware.  With any luck We might be able to get away with not writing anything to this handoff region at all.</p>"},{"location":"hw/soc/agx/#sgx-registers","title":"sgx registers","text":"<p>the CPU never writes to these registers, only reads. </p> <p>These registers are read once, during initialization:</p> <pre><code>0x4000 : u32 - version number? 0x4042000\n0x4010 : u32 - version number? 0x30808\n0x4014 : u32 - version number? 0x40404\n0x4018 : u32 - unknown 0x1320200\n0x401c : u32 - 0x204311\n0x4008 : u32 - 0x40a06\n0x1500 : u32 - 0xffffffff\n0x1514 : u32 - 0x0\n0x8024 : u32 = 0x43ffffe - (this matches sgx/ttbat-phys-addr-base from the ADT)\n</code></pre> <p>These status registers are continually checked by something on the CPU</p> <pre><code>0x11008 : u32 - Always counts up whenever work is done\n0x1100c : u32 - Useally 0\n0x11010 : u32 - Another work counter? counts up slower\n0x11014 : u32 - Useally 0\n</code></pre> <p>There doesn't seem to be a good relationship of when these status registers are read, relative to the ASC Pong and Kicks. </p>"},{"location":"hw/soc/aic/","title":"Apple Interrupt Controller (AIC)","text":"<p>AIC is the Apple Interrupt Controller. These are some scattered RE notes.</p> <p>Apple likes to use a particular SET/CLR register pair style:</p> <ul> <li>SET: reads current state, writes set bits set to 1</li> <li>CLR: reads current state, writes clear bits set to 1</li> </ul>"},{"location":"hw/soc/aic/#registers","title":"Registers","text":"<pre><code>0000~ global stuff\n  0004: NR_IRQ?\n  0010: GLOBAL_CFG? (impl bits: f8fffff1)\n2000~ interrupt acks, IPIs, etc\n\n3000~ IRQ_TGT (1 per reg, CPU bitfield each reg)\n4000~ SW_GEN_SET (bitfields)\n4080~ SW_GEN_CLR (bitfields)\n4100~ IRQ_MASK_SET (bitfields)\n4180~ IRQ_MASK_CLR\n4200~ HW_IRQ_MON (current interrupt line state?)\n\n8020 Low 32 bits of MSR CNTPCT_EL0 (system timer)\n8028 High 32 bits of MSR CNTPCT_EL0 (system timer)\n\nMirror accessing per-core state for the current CPU core:\n2004 IRQ_REASON\n2008 IPI_SEND - Send an IPI, bits 0..&lt;31 send an other IPI to a CPU, bit 31 sends a \"self\" IPI to this CPU\n200c IPI_ACK  - Acks an IPI, bit 0 acks an \"other\" IPI, and bit 31 acks a \"self\" IPI\n2024 IPI_MASK_SET - Mask bits for IPIs correspond to the same type and position of the bits for IPI_ACK\n2028 IPI_MASK_CLR\n\nTODO Document direct access to per-core state offsets\n</code></pre>"},{"location":"hw/soc/aic/#usage","title":"Usage","text":"<p>IPI flow:</p> <ul> <li>Write bit to IPI_SEND</li> <li>ARM IRQ asserted</li> <li>Read IRQ_REASON<ul> <li>IPI is masked in IPI_MASK</li> <li>ARM irq is desasserted</li> </ul> </li> <li>Write bit to IPI_ACK</li> <li>Write bit to IPI_MASK_CLR<ul> <li>IPI is unmasked</li> <li>if IPI_ACK was not cleared, ARM irq would reassert here</li> </ul> </li> </ul> <p>HW irq flow:</p> <ul> <li>Set target bitfield in IRQ_TGT</li> <li>Write bit to IRQ_MASK_CLR</li> <li>(later) HW IRQ asserted</li> <li>Read IRQ_REASON<ul> <li>IRQ_MASK is automatically set</li> <li>ARM irq is desasserted</li> </ul> </li> <li>(clear the IRQ in the specific hardware)</li> <li>Write bit to IRQ_MASK_CLR<ul> <li>IRQ is unmasked</li> <li>if hardware line was not cleared, ARM irq would reassert here</li> </ul> </li> </ul> <p>There are 11 targets? CPUs 0-7 and some auxiliary ones?</p> <p>Bits set in SW_GEN are ORed with the hardware IRQ lines</p>"},{"location":"hw/soc/aic/#timer","title":"Timer","text":"<p>The system timer is the standard ARM64 MSR stuff, and bypasses AIC. It is wired straight to FIQ.</p>"},{"location":"hw/soc/aop/","title":"Always-On Processor (AOP)","text":""},{"location":"hw/soc/aop/#aop","title":"AOP","text":"<p>AOP is the \"Always-On Processor\", which alludes more to the kind of functionality it implements (e.g. the 'Hey Siri' voice trigger) than it alludes to the fact that it should be always on (it's not).</p>"},{"location":"hw/soc/apcie/","title":"Apple PCIe controller","text":"<p>The PCIe host bridge includes at least some Synopsys DesignWare derived logic.  The release version encoded at offset 0x8f8/0x8fc in PCIE config space indicates version 530*-ea15 (5.30a-ea15).</p>"},{"location":"hw/soc/apcie/#adt-bindings","title":"ADT bindings","text":"Property Value Meaning compatible apcie,t8103 compatible string #address-cells 3 normal PCI DT: <code>&lt;BAR type&gt;&lt;addr&gt;len&gt;</code> #size-cells 2 normal PCI DT interrupt-parent - phandle of AIC interrupts (0x2b7, 0x2ba, 0x2bd) \u00a0Administrative interrupts. Maybe AER? msi-parent-controller - phandle of AIC #msi-vectors 32 number of IRQs in AIC for MSI msi-address 0xfffff000 program this into the MSI-X address BAR msi-vector-offset 0x2c0 (this + msi_id) go to the MSI-X value field in the MSI-X device BAR #ports 3 number of DART bindings apcie-common-tunables 0x2c, 0x4, 0xff, 0x0, 0x1, 0x0, 0x54, 0x4, 0xffffffff, 0x0, 0x140, 0x0 ? apcie-axi2af-tunables todo ? apcie-phy-tunables todo ? apcie-phy-ip-pll-tunables todo ? apcie-phy-ip-auspma-tunables todo ?"},{"location":"hw/soc/apcie/#reg","title":"reg","text":"Address Length Meaning 0x690000000 0x10000000 ECAM space 0x680000000 0x40000 Ctrl 0x680080000 0x90000 Phy config 0x6800c0000 0x20000 ? 0x68c000000 0x4000 ? 0x3d2bc000 0x1000 ? 0x681000000 0x8000 port0 link / control registers 0x681010000 0x1000 port0 0x680084000 0x4000 port0 phy 0x6800c8000 0x16610 port0 0x682000000 0x8000 port1 link / control registers 0x682010000 0x1000 port1 0x680088000 0x4000 port1 phy 0x6800d0000 0x6000 port1 0x683000000 0x8000 port2 link / control registers 0x683010000 0x1000 port2 0x68008c000 0x4000 port2 phy 0x6800d8000 0x6000 port2"},{"location":"hw/soc/apcie/#known-register-meanings","title":"Known register meanings","text":"Space Offset name Meaning / Values Ctrl 0x28 Refclk 1 &lt;&lt; 4 is good Ctrl 0x50 ? Write 1 to enable PCIe Ctrl 0x58 ? Reads 1 after 0x50 write Phy config 0x0 ? Writing bits 0x1 and 0x2 toggle 0x4 and 0x8 respectively portX link 0x100 pcielint portX link 0x208 linksts Bit 0x1 means link is enabled. Requires write to 0x804 portX link 0x210 linkcdmsts portX link 0x800 ? Read in initializeRootComplex() portX link 0x804 ? Read in enablePortHardware() portX phy 0x0 PhyGlueLaneReg / RefClockBuffer Writing bits 0x1 and 0x2 toggle bits 0x4 and 0x2 respectively"},{"location":"hw/soc/apcie/#tunables","title":"Tunables","text":"<p>The following set of tunables operate on config space of the per-port PCIe bridge devices.</p>"},{"location":"hw/soc/apcie/#pcie-rc-tunables","title":"pcie-rc-tunables","text":"<p>On the 2020 M1 mini, this set of register writes modifies some bits on standardized capability structures as well as some other registers.</p> register capability effect 0x194 L1 PM Substates clear Port Common_Mode_Restore_Time clear Port T_POWER_ON Scale clear Port T_POWER_ON Value 0x2a4 Data Link Feature clear Data Link Feature Exchange Enable 0xb80 not part of an (extended) capability structure 0xb84 not part of an (extended) capability structure 0x78 PCI Express clear Max_Read_Request_Size"},{"location":"hw/soc/apcie/#pcie-rc-gen3-shadow-tunables","title":"pcie-rc-gen3-shadow-tunables","text":"register capability effect 0x154 Secondary PCI Express set Downstream Port 8.0 GT/s Transmitter Preset set Upstream Port 8.0 GT/s Transmitter Preset 0x890 not part of an (extended) capability structure appears to be the Synopsys Designware PCIe GEN3_RELATED register 0x8a8 not part of an (extended) capability structure appears to be the Synopsys Designware PCIe GEN3_EQ_CONTROL register"},{"location":"hw/soc/apcie/#pcie-rc-gen4-shadow-tunables","title":"pcie-rc-gen4-shadow-tunables","text":"register capability effect 0x178 Physical Layer 16.0 GT/s set Downstream Port 16.0 GT/s Transmitter Preset set Upstream Port 16.0 GT/s Transmitter Preset 0x890 not part of an (extended) capability structure (see above) 0x8a8 not part of an (extended) capability structure (see above) <p>So the changes to documented registers seem to disable some (buggy?) features as well do some lane equalization tuning. Maybe Apple hopes to re-enable this in a future respin of the silicon without having to specify specific silicon revs in their xnu driver?</p>"},{"location":"hw/soc/apcie/#dt-bindings","title":"DT bindings","text":"<p>Device tree bindings have been accepted upstream.</p> <p>Some open questions remain: * How do we enable the WiFi/BT PCIe device?  This device needs to be explicitly enabled through the SMC before it shows up as a PCIe device.  It has been suggested that this is how Apple implements \"Airplane Mode\" and there is a separate \"amfm\" node in the ADT for this.  So maybe it makes sense to have some sort of rfkill device/node that takes care of this.  Hopefully this means the APCIe device gets an interrupt when it is turned on such that we can (re)train the PCIe link.</p> <p>This proposed binding has been successfully implemented/tested in u-boot and OpenBSD.  However, we still need clock, pinctrl/gpio and DART bindings to make this all work.</p>"},{"location":"hw/soc/asc/","title":"ASC","text":""},{"location":"hw/soc/asc/#asc-registers","title":"ASC registers","text":"<pre><code>0x40 - some flags/ctrl\n\n0x44 - CPU_CTRL\n    4 - CPU_START\n\n0x48 - CPU_STATUS\n    5 - MBOXES_TO_AP_EMPTY\n    4 - ?\n    3 - FIQ_NOT_PENDING\n    2 - IRQ_NOT_PENDING\n    1 - CPU_STOPPED\n    0 - CPU_IDLE\n\n0x400\n    10 - set when the CPU is started (probably by firmware)\n\n0x80c - IRQ_CONFIG\n    0 - IRQ_CONTROLLER_ENABLE\n\n0x818 - IRQ_EVENT_IRQ?\n0x820 - IRQ_EVENT_FIQ?\n\n0xa00.. - IRQ_MASK_SET\n0xa80.. - IRQ_MASK_CLEAR\n0xb00.. - IRQ_MASK2_SET?\n0xb80.. - IRQ_MASK2_CLEAR?\n\n0x1000 - CFG?\n    1 - IPIs to IRQ, not FIQ?\n0x1010 - A_SET\n0x1014 - B_SET\n0x1018 - A_CLR\n    2 - triggers FIQ IPI?\n    1 - triggers IRQ IPI?\n0x101c - B_CLR\n\n0x1030 - C_SET\n0x1034 - D_SET\n0x1038 - C_CLR\n0x103c - D_CLR\n\n0x8000 - mirror of CPU_STATUS?\n\n0x4000~ and 0x8000~ are mailbox stuff\n</code></pre>"},{"location":"hw/soc/asc/#mailboxes","title":"Mailboxes","text":"<p>Communication between the M1's main CPU cores and the ASCs/IOPs (I/O processors) uses hardware mailboxes to send 128-bit notifications back and forth between the processors, in addition to larger messages sent using shared memory. The usual protocol is that one of the processors writes to shared memory, then sends a mailbox notification to the other processor which triggers an interrupt which causes the other processor to look at the modified memory and interpret a larger message.</p> <p>While protocols differ between processors, a common element appears to be that the low-order 8 bits of the second 64-bit half of the message encode the endpoint at the IOP side of the message. The first 64 bits appear to be passed through by the mailbox without further changes and very different encodings are used for them.</p> <p>The hardware side of the mailbox is located at offset +0x8000 in MMIO space, and uses four interrupts numbered consecutively at the AIC, two of which are useful to us.</p> <p>Data is sent from the main CPU to the IOP when two 64-bit writes target offsets +0x8800 and +0x8808. Once the IOP reads the data and removes it from the queue, the interrupt with the lowest number at the AIC will trigger until it is disabled or further data is written.</p> <p>Data from the IOP is read by the main CPU, and removed from the queue, by performing 64-bit MMIO reads at offsets +0x8830 and +0x8838. While data is available, the interrupt with the highest number at the AIC will trigger.</p> <p>A 32-bit status register at +0x8110 indicates whether the CPU-to-IOP queue is empty (bit 17) or not empty (bit 16). Symmetrically, the status register at +0x8114 indicates whether the IOP-to-CPU queue is empty (bit 17) or not empty (bit 16).</p> <p>It is possible for several messages to be queued in the same direction at the same time, and this is used by IOPs which send more than one notification to the CPU without waiting for an ack.</p>"},{"location":"hw/soc/avd/","title":"Apple Video Decoder","text":"<p>Apple Video Decoder.</p> <p>Supports AVC, HEVC, AV1, VP9.</p> <p>Notes: https://web.archive.org/web/20240105073841/https://eiln.net/avd-notes.html</p>"},{"location":"hw/soc/clocks/","title":"Clocks","text":"<p>There are (at least) two different kinds of clocks defined in the ADT:</p> <ul> <li><code>clock-gates</code> or <code>power-gates</code> which index into the <code>devices</code> array of the <code>pmgr</code> ADT node</li> <li><code>clock-ids</code> which represent clocks with a frequency and index into the <code>clock-frequencies</code> array of the <code>arm-io</code> node</li> </ul>"},{"location":"hw/soc/clocks/#clock-gates-power-gates","title":"clock-gates / power-gates","text":"<p>Gated clocks are used to remove the clock signal to certain peripherals when they are not used. The ids for a specific ADT node usually need to be turned on before the MMIO region of that device can be accessed.</p> <p>There is probably also some topology involved in these clocks since e.g. <code>SIO</code>, <code>UART_P</code> and <code>UART0</code> seem to be required to access the UART MMIO region even though the UART node only requests <code>UART0</code>.</p>"},{"location":"hw/soc/clocks/#clock-ids","title":"clock-ids","text":"<p>These clocks are likely preconfigured by iBoot and never touched by XNU itself. Their frequencies are passed as nodes in the ADT. Low indexes (&lt;0x100, but probably only 6 or so) are clocks given in the <code>cpu0</code> node (e.g. <code>bus-frequency</code>) and for now all seem to be set to 24 MHz. Indexes above 0x100 map to the <code>clock-frequencies</code> array of the <code>arm-io</code> node. These are usually used as reference clocks for e.g. the UART or the I2C bus. </p> <p>There is also the <code>clock-frequencies-regs</code> property but it's unknown how exactly the registers in there map to the above mentioned clocks. That property also seems to be completely unused by XNU. </p>"},{"location":"hw/soc/display-controllers/","title":"Display Controllers","text":"<p>M series of chips have two kinds of display controllers, <code>dcp</code> and <code>dcpext</code>. Both kinds support - DP 1.4 (4 lanes) with DSC. No MST! - HDMI via dp2hdmi converter. See below for routing restrictions. - USB-C ports: DP altmode, or USB4 tunneling with 2 controllers max per port. See below for routing restrictions.</p> <p>Controller-specific information:</p> Type Mode limits <code>dcp</code> 5K, 60Hz, 10bpp (Apple-provided information, not tested) <code>dcpext</code> 6K, 60Hz, 10bpp (Apple-provided information, not tested) <p>M1 routing restrictions:</p> Controller Internal display HDMI USB-C <code>dcp</code> + + <code>dcpext</code> + <p>M2 and later routing restrictions:</p> Controller Internal display HDMI USB-C <code>dcp</code> + + + <code>dcpext</code> + + <p>SoC-specific information:</p> SoC Number of <code>dcp</code> Number of <code>dcpext</code> Notes M1 1 1 M1 Pro 1 2 M1 Max 1 4 M1 Ultra 1 8 There are no Ultra devices with internal display. <code>dcp</code> is disabled on one of the dies, another <code>dcp</code> is routed to HDMI M2 1 1 M2 Pro 1 2 M2 Max 1 4 M2 Ultra 0 8 There are no Ultra devices with internal display. <code>dcp</code> on both dies are disabled M3 1 1 M3 Pro 1 2 M3 Max 1 4 M4 ? ? TBD M4 Pro ? ? TBD M4 Max ? ? TBD"},{"location":"hw/soc/gpio/","title":"GPIO Controller","text":""},{"location":"hw/soc/gpio/#dt-binding","title":"DT binding","text":"<p>The \"gpio,t8101\" nodes in the ADT represent a GPIO controller with pinmux facilities. Judging from the Corellium code base the pins can be switched between \"gpio\" functionality and \"periph\" functionality. There may be more options though sine there are unknown bits right next to the bit that controls switching between those two modes. Given that the controller implements pinmux functionality we need to model this hardware as a pinctrl node in the FDT.  This can be done entirely using generic pinctrl/pinmux/gpio binding properties:</p> <pre><code>#define APPLE_PINMUX(pin, func) ((pin) | ((func) &lt;&lt; 16))\n\n                pinctrl: pinctrl@23c100000 {\n                        compatible = \"apple,t8103-pinctrl\";\n                        reg = &lt;0x2 0x3c100000 0x0 0x100000&gt;;\n                        clocks = &lt;&amp;gpio_clk&gt;;\n\n                        gpio-controller;\n                        #gpio-cells = &lt;2&gt;;\n                        gpio-ranges = &lt;&amp;pinctrl 0 0 212&gt;;\n\n                        pcie_pins: pcie-pins {\n                                pinmux = &lt;APPLE_PINMUX(150, 1)&gt;,\n                                         &lt;APPLE_PINMUX(151, 1)&gt;,\n                                         &lt;APPLE_PINMUX(32, 1)&gt;;\n                        };\n                };\n</code></pre> <p>Using <code>pinmux</code> has the benefit that we don't have to invent names for pins and functions and hardcode those in the driver. The purpose of pins is likely to vary between SoCs and between controllers on a single SoC.  There are four controllers on the M1 SoC! The example here uses a simple split of the 32-bit pinmux cell. The lower 16 bits encode the pin number whereas the upper 16 bits encode the pin function. It is unlikely we need the full 16 bits to encode the pin function so we repurpose some of those bits if we need to in the future.</p> <p>Some open questions: * Should the compatible string be \"apple,t8101-gpio\" given the name of the node in the ADT?  Or should we mention both? * The controllers seem to provide interrupt functionality as well.  The standard bindings allow for an <code>interrupt-controller</code> property so this this can be handled as well. There are (up to) 7 AIC interrupts per controllers each handling a group of GPIO pins.  It seems GPIO pins can be freely assigned to a group although the ADT contains properties that suggest that not all groups are functional on some of the controllers.</p> <p>The gpio controller provides interrupt functionality to devices which uses it as <code>interrupt-parent</code>. Those devices have 2 <code>#interrupt-cells</code>. The first cell specifies the GPIO pin. The meaning of the second pin is unknown. <code>audio-tas5770L-speaker</code>, <code>audio-codec-output</code>, <code>hpmBusManager</code> use 0x1, <code>wlan</code> 0x2 and <code>bluetooth</code> 0x2000002. The second cells' value does not seem to correspond to the pin's configuration register.</p> device pin 2nd cell config by iboot (mac mini) hpmBusManager 106 0x1 0x76b80 bluetooth 136 0x2000002 0x76a80 audio-tas5770L-speaker 182 0x1 0x76b81 audio-codec-output 183 0x1 0x76b81 wlan 196 0x2 0x76ac0 <p>Observed Mac OS behavior for device <code>/arm-io/gpio</code> at address <code>0x23c100000</code>: 1. read pin config (4 bytes) from offset <code>0x0000</code> to <code>0x34c</code> (212 pins) 2. clear interrupts for all 7 groups? writing ones 7 x 4 bytes in seven groups to the offsets <code>0x800</code>, <code>0x840</code>, <code>0x880</code>, <code>0x8C0</code>, <code>0x900</code>, <code>0x940</code>, <code>0x980</code></p>"},{"location":"hw/soc/memmap/","title":"T8103 Memory Map","text":""},{"location":"hw/soc/memmap/#m1-t8103-memory-map","title":"M1 (T8103) memory map","text":"<p>(Incomplete)</p> <pre><code>0 00000000      unmapped (L2C faults)\n\n== Apple Core Cluster (E) ==\n\n2 10x10000 :    40000    cpu&lt;x&gt; coresight (size probably wrong in adt)\n2 10x40000 :    10000    cpu&lt;x&gt; uttdbg\n2 10x50000 :    10000    cpu&lt;x&gt; impl reg\n\n2 10e40000 :    10000    cpm impl reg\n2 10f00000 :    50000    ACC impl registers\n\n== Apple Core Cluster (P) ==\n\n2 11x10000 :    40000    cpu&lt;x&gt; coresight (size probably wrong in adt)\n2 11x40000 :    10000    cpu&lt;x&gt; uttdbg\n2 11x50000 :    10000    cpu&lt;x&gt; impl reg\n\n2 11e40000 :    10000    cpm impl reg\n2 11f00000 :    50000    ACC impl registers\n\n== I2C ==\n\n2 35010000 :     4000    I2C0 (Type C controllers)\n2 35014000 :     4000    I2C1 (Speaker amp)\n2 35018000 :     4000    I2C2 (Audio codec)\n\n== UARTs ==\n\n2 35200000 :     4000    UART0 (debug console)\n2 35204000 :     4000    UART1? (not in adt?)\n2 35208000 :     4000    UART2 (wlan debug)\n\n== AIC ==\n\n2 3b100000 :     c000    AIC\n\n== PMGR ==\n\n2 3b700000 :   100000    PMGR\n\n== GPIO ==\n\n2 3c100000 :   100000    GPIO\n\n== WDT ==\n\n2 3d2b0000 :     4000    WDT\n\n== DRAM ==\n\n8 00000000 :  (8/16G)    Main DRAM (beware of carveouts!)\n\n</code></pre>"},{"location":"hw/soc/memmap/#mmio-ranges-that-respond-to-probe-reads-t8103","title":"MMIO ranges that respond to probe reads (t8103)","text":"<p>The list below was generated by attempting a read on the first 32-bit word of every page in range 0x2_2000_0000 to 0x3_0000_0000. Sometimes an associated power domain was found (which had to be enabled for the reads to go through).</p> <pre><code>224000000 - 22402c000 |                  | \n224030000 - 224034000 |                  | \n224048000 - 22404c000 |                  | \n225000000 - 225004000 |                  | pmgr[47]\n225004000 - 225008000 |                  | pmgr[48]\n225008000 - 22500c000 |                  | pmgr[49]\n225010000 - 225014000 |                  | \n225020000 - 225024000 |                  | \n226000000 - 226004000 |                  | pmgr[50]\n226004000 - 226008000 |                  | pmgr[51]\n226008000 - 22600c000 |                  | pmgr[52]\n226010000 - 226014000 |                  | \n226020000 - 226024000 |                  | \n227000000 - 22700c000 |                  | \n227010000 - 227014000 |                  | \n227020000 - 227024000 |                  | \n228180000 - 228184000 | DISPDFR_FE       | \n228200000 - 228210000 | DISPDFR_FE       | \n228300000 - 228308000 | DISPDFR_FE       | \n228400000 - 228404000 | DISPDFR_BE       | \n2284c0000 - 2284c4000 | DISPDFR_BE       | \n228500000 - 228504000 | DISPDFR_BE       | \n228540000 - 228544000 | DISPDFR_BE       | \n228580000 - 228584000 | DISPDFR_BE       | \n2285c0000 - 2285c4000 | DISPDFR_BE       | \n228600000 - 228604000 | MIPI_DSI         | \n228640000 - 228644000 | MIPI_DSI         | \n228680000 - 228684000 | MIPI_DSI         | \n2287c0000 - 2287c4000 | DISPDFR_BE       | \n229000000 - 229004000 | DISPDFR_FE       | pmgr[44]\n229008000 - 22900c000 | DISPDFR_FE       | pmgr[44]\n22a000000 - 22a004000 | ISP_SYS          | pmgr[37]\n22a008000 - 22a00c000 | ISP_SYS          | pmgr[37]\n22c0c0000 - 22c0c4000 | ISP_SYS          | \n22c0c8000 - 22c0cc000 | ISP_SYS          | \n22c0d0000 - 22c0d4000 | ISP_SYS          | \n22c0e0000 - 22c100000 | ISP_SYS          | \n22c104000 - 22c108000 | ISP_SYS          | \n22c110000 - 22c11c000 | ISP_SYS          | \n22c500000 - 22c514000 | ISP_SYS          | \n230000000 - 23001c000 |                  | disp0[0]\n230040000 - 23004c000 |                  | disp0[0]\n230050000 - 230074000 |                  | disp0[0]\n230080000 - 230088000 |                  | disp0[0]\n230094000 - 230098000 |                  | disp0[0]\n2300a8000 - 2300b8000 |                  | disp0[0]\n2300f0000 - 2300f4000 |                  | disp0[0]\n2300fc000 - 230118000 |                  | disp0[0]\n230170000 - 23019c000 |                  | disp0[0]\n2301a0000 - 2301d4000 |                  | disp0[0]\n230230000 - 23025c000 |                  | disp0[0]\n23038c000 - 2303e8000 |                  | disp0[0]\n230800000 - 23081c000 |                  | \n230840000 - 23084c000 |                  | \n230850000 - 230874000 |                  | \n230880000 - 230888000 |                  | \n230894000 - 230898000 |                  | \n2308a8000 - 2308b8000 |                  | \n2308f0000 - 2308f4000 |                  | \n2308fc000 - 230918000 |                  | \n230970000 - 23099c000 |                  | \n2309a0000 - 2309d4000 |                  | \n230a30000 - 230a5c000 |                  | \n230b8c000 - 230be8000 |                  | \n2310c0000 - 2310c4000 |                  | \n231100000 - 231108000 |                  | \n231180000 - 231184000 |                  | \n2311bc000 - 23120c000 |                  | \n231300000 - 231304000 |                  | dart-disp0[1]\n231304000 - 231308000 |                  | dart-disp0[0]\n23130c000 - 231310000 |                  | dart-dcp[0]\n231310000 - 231318000 |                  | \n231324000 - 23132c000 |                  | \n231340000 - 231344000 |                  | \n231344000 - 231348000 |                  | disp0[2]\n231800000 - 231850000 |                  | disp0[3]\n231850000 - 231854000 |                  | dcp[1] disp0[3]\n231854000 - 231a00000 |                  | disp0[3]\n231c00000 - 231c6c000 |                  | dcp[0] disp0[3]\n232000000 - 232004000 |                  | pmgr[38]\n232008000 - 23200c000 |                  | pmgr[38]\n234000000 - 234004000 |                  | pmgr[45]\n234008000 - 23400c000 |                  | pmgr[45]\n235000000 - 235004000 |                  | \n235004000 - 235008000 |                  | dart-sio[0]\n235008000 - 23500c000 |                  | \n23500c000 - 235010000 | AES              | aes[0]\n235010000 - 235014000 | I2C0             | i2c0[0]\n235014000 - 235018000 | I2C1             | i2c1[0]\n235018000 - 23501c000 | I2C2             | i2c2[0]\n23501c000 - 235020000 | I2C3             | \n235020000 - 235024000 | I2C4             | \n235030000 - 235034000 |                  | \n235040000 - 235044000 | FPWM0            | pwm[0]\n235044000 - 235048000 | FPWM1            | \n235048000 - 23504c000 | FPWM2            | \n235050000 - 235054000 | AES              | \n235100000 - 235104000 | SPI0             | \n235104000 - 235108000 | SPI1             | spi1[0]\n235108000 - 23510c000 | SPI2             | \n23510c000 - 235110000 | SPI3             | \n235110000 - 235114000 | SPI4             | \n235114000 - 235200000 | SPI_P            | \n235200000 - 235204000 |                  | uart0[0]\n235204000 - 235208000 | UART1            | \n235208000 - 23520c000 | UART2            | uart2[0]\n23520c000 - 235210000 | UART3            | \n235210000 - 235214000 | UART4            | \n235214000 - 235218000 | UART5            | \n235218000 - 23521c000 | UART6            | \n23521c000 - 235220000 | UART7            | \n235220000 - 235224000 | UART8            | \n235224000 - 235300000 |                  | \n236000000 - 236050000 |                  | \n236050000 - 236054000 |                  | sio[1]\n236054000 - 236200000 |                  | \n236400000 - 23646c000 |                  | sio[0]\n238200000 - 238234000 | SIO_ADMA         | admac-sio[0]\n238234000 - 238300000 | SIO_ADMA         | \n238300000 - 238304000 | AUDIO_P          | mca-switch[1] mca0[1]\n238304000 - 238308000 | AUDIO_P          | mca-switch[1] mca0[2]\n238308000 - 23830c000 | AUDIO_P          | mca-switch[1] mca1[1]\n23830c000 - 238310000 | AUDIO_P          | mca-switch[1] mca1[2]\n238310000 - 238318000 | AUDIO_P          | mca-switch[1]\n238318000 - 23831c000 | AUDIO_P          | mca-switch[1] mca3[1]\n23831c000 - 238320000 | AUDIO_P          | mca-switch[1] mca3[2]\n238320000 - 238330000 | AUDIO_P          | mca-switch[1]\n238330000 - 238334000 | DPA0             | \n238334000 - 238338000 | DPA1             | \n238338000 - 238400000 | AUDIO_P          | \n238400000 - 238404000 | AUDIO_P          | mca0[0] mca-switch[0]\n238404000 - 238408000 | AUDIO_P          | mca-switch[0] mca1[0]\n238408000 - 23840c000 | AUDIO_P          | mca-switch[0]\n23840c000 - 238410000 | AUDIO_P          | mca-switch[0] mca3[0]\n238410000 - 238418000 | AUDIO_P          | mca-switch[0]\n238500000 - 238504000 | AUDIO_P          | mca-switch[3]\n238504000 - 238600000 | AUDIO_P          | \n23b000000 - 23b02c000 |                  | pmgr[2] error-handler[15]\n23b038000 - 23b0400d4 |                  | pmgr[2] error-handler[15]\n23b044000 - 23b058000 |                  | pmgr[2] error-handler[15] nco[0]\n23b058000 - 23b064000 |                  | pmgr[2] error-handler[15]\n23b06c000 - 23b070000 |                  | pmgr[2] error-handler[15]\n23b070000 - 23b078000 |                  | \n23b100000 - 23b108000 |                  | aic[0]\n23b108000 - 23b109000 |                  | aic[1] aic-timebase[0] aic[0]\n23b110000 - 23b11c000 |                  | \n23b200000 - 23b204000 |                  | dwi[0]\n23b204000 - 23b208000 |                  | pmgr[31]\n23b218000 - 23b220000 |                  | \n23b230000 - 23b234000 | PMS_FPWM0        | \n23b234000 - 23b238000 | PMS_FPWM1        | \n23b238000 - 23b23c000 | PMS_FPWM2        | \n23b23c000 - 23b240000 | PMS_FPWM3        | \n23b240000 - 23b244000 | PMS_FPWM4        | \n23b280000 - 23b288000 |                  | mtrtempsensor3[0] pmgr[21] mtrtempsensor4[0] mtrtempsensor5[0]\n23b288000 - 23b298000 |                  | \n23b298000 - 23b2a0000 |                  | mtrtempsensor6[0]\n23b2a0000 - 23b2a8000 |                  | mtrtempsensor7[0]\n23b2a8000 - 23b2b8000 |                  | \n23b2c0000 - 23b2c4000 |                  | \n23b2c4000 - 23b2d0000 |                  | tempsensor0[0] tempsensor1[0] tempsensor2[0]\n23b2d8000 - 23b2dc000 |                  | tempsensor0[0] tempsensor1[0] tempsensor2[0]\n23b2dc000 - 23b2e0000 | DEVC0_IVDMC      | tempsensor0[0] tempsensor1[0] tempsensor2[0]\n23b2e0000 - 23b2e8000 |                  | mtrtempsensor18[0] tempsensor0[0] tempsensor1[0] mtrtempsensor17[0] tempsensor2[0]\n23b2e8000 - 23b2f0000 |                  | tempsensor0[0] tempsensor1[0] tempsensor2[0]\n23b2f8000 - 23b2fc000 |                  | \n23b300000 - 23b304000 |                  | dart-pmp[0]\n23b304000 - 23b308000 |                  | \n23b310000 - 23b31c000 |                  | \n23b37c000 - 23b380000 |                  | \n23b3c0000 - 23b3c4000 |                  | \n23b3d0000 - 23b3d4000 |                  | dispext0[4] disp0[4]\n23b3d8000 - 23b3dc000 |                  | \n23b440000 - 23b444000 |                  | \n23b448000 - 23b44c000 |                  | \n23b460000 - 23b47c000 |                  | \n23b480000 - 23b488000 |                  | \n23b500000 - 23b580000 | PMS_SRAM         | pmp[2]\n23b700000 - 23b708000 |                  | ane[1] pmgr[0] error-handler[16]\n23b708000 - 23b70c000 |                  | ane[1] pmgr[0] ave[3] error-handler[16]\n23b70c000 - 23b738000 |                  | ane[1] pmgr[0] error-handler[16]\n23b738000 - 23b739000 |                  | ane[1] pmgr[0] dispext0[5] disp0[5] error-handler[16]\n23b739000 - 23b750000 |                  | ane[1] pmgr[0] error-handler[16]\n23b754000 - 23b758000 |                  | ane[1] pmgr[0] error-handler[16]\n23b75c000 - 23b774000 |                  | ane[1] pmgr[0] error-handler[16]\n23b778000 - 23b78c000 |                  | ane[1] pmgr[0] error-handler[16]\n23b800000 - 23b850000 | PMP              | \n23b850000 - 23ba00000 | PMP              | pmp[1]\n23bc00000 - 23bc2c000 | PMP              | pmp[0]\n23bc2c000 - 23bc3c000 | PMP              | pmgr[22] pmp[0]\n23bc3c000 - 23bc3d000 | PMP              | pmgr[22] pmp[0] dispext0[6] disp0[6]\n23bc3d000 - 23bc60000 | PMP              | pmgr[22] pmp[0]\n23bc60000 - 23bc6c000 | PMP              | pmgr[22]\n23c100000 - 23c104000 | GPIO             | pmp[37] gpio[0]\n23c140000 - 23c144000 |                  | gpio[0]\n23c1c0000 - 23c1c4000 |                  | gpio[0]\n23c220000 - 23c224000 | GPIO             | \n23c260000 - 23c264000 |                  | \n23c280000 - 23c284000 | SOC_SPMI0        | \n23c290000 - 23c294000 | SOC_SPMI1        | \n23c2a0000 - 23c2a4000 | SOC_SPMI2        | \n23d000000 - 23d004000 |                  | \n23d004000 - 23d005000 |                  | pmgr[4]\n23d005000 - 23d00c000 |                  | \n23d010000 - 23d020000 |                  | \n23d030000 - 23d034000 |                  | \n23d080000 - 23d084000 |                  | \n23d090000 - 23d094000 |                  | \n23d098000 - 23d0a0000 |                  | \n23d0d8000 - 23d0d8400 |                  | pmp[32]\n23d0e0000 - 23d0e0400 |                  | \n23d100000 - 23d104000 |                  | pmgr[23] pmp[30]\n23d108000 - 23d10c000 |                  | pmgr[23] pmp[30]\n23d10c000 - 23d10c018 |                  | pmgr[23] dockchannel-uart[1] pmp[30]\n23d10c018 - 23d114000 |                  | pmgr[23] pmp[30]\n23d114000 - 23d11c000 |                  | pmgr[23]\n23d128000 - 23d138000 |                  | pmgr[23] dockchannel-uart[0] pmp[31]\n23d138000 - 23d158000 |                  | pmgr[23] pmp[31]\n23d158000 - 23d188000 |                  | pmgr[23]\n23d1a0000 - 23d1a4000 |                  | \n23d1bc000 - 23d1c0000 |                  | \n23d1f0000 - 23d1f4000 |                  | nub-gpio[0]\n23d200000 - 23d204000 |                  | pmgr[3]\n23d240000 - 23d244000 |                  | pmgr[3]\n23d27c000 - 23d280000 |                  | pmgr[3]\n23d280000 - 23d28c000 |                  | pmgr[1]\n23d298000 - 23d2a0000 |                  | pmgr[1]\n23d2a8000 - 23d2a8008 |                  | admac-aop-audio[1] pmgr[1] aop[3] admac-sio[1]\n23d2a8008 - 23d2b0000 |                  | pmgr[1]\n23d2b0000 - 23d2b4000 |                  | pmgr[1] wdt[0]\n23d2b4000 - 23d2b8008 |                  | pmgr[1]\n23d2bc000 - 23d2bd000 |                  | pmgr[1] apciec1[2] atc-phy0[23] apcie[5] atc-phy1[23] apciec0[2]\n23d2be000 - 23d2c8000 |                  | pmgr[1]\n23d2d0000 - 23d2d4000 |                  | aes[1] pmgr[1]\n23d2d4000 - 23d2f4000 |                  | pmgr[1]\n23d310000 - 23d32c000 |                  | \n23d338000 - 23d384000 |                  | \n23d390000 - 23d3b0000 |                  | \n23d430000 - 23d434000 |                  | \n23d800000 - 23d854000 | MSG              | \n23df00000 - 23df20000 |                  | \n23e000000 - 23e050000 | SMC_CPU          | \n23e050000 - 23e054000 | SMC_CPU          | smc[1]\n23e054000 - 23e200000 | SMC_CPU          | \n23e400000 - 23e46c000 | SMC_CPU          | smc[0]\n23e800000 - 23e810000 | SMC_AON          | \n23e820000 - 23e824000 | SMC_GPIO         | smc-gpio[0]\n23ed04000 - 23ed08000 | SMC_I2CM0        | \n23ed08000 - 23ed0c000 | SMC_I2CM1        | \n23ed0c000 - 23ed10000 | SMC_I2CM2        | \n23ed10000 - 23ed14000 | SMC_I2CM3        | \n23ed14000 - 23ed18000 | SMC_I2CM4        | \n23fe44000 - 23fe4c000 | SMC_FABRIC       | \n240000000 - 2412c0000 |                  | \n2412c0000 - 2412c4000 |                  | dart-sep[0]\n241300000 - 241400000 |                  | \n241400000 - 241440000 |                  | error-handler[14]\n241440000 - 241480000 |                  | error-handler[13]\n241480000 - 242050000 |                  | \n242050000 - 2420b0000 |                  | sep[1]\n2420b0000 - 242400000 |                  | \n242400000 - 24246c000 |                  | sep[0]\n24246c000 - 244000000 |                  | \n24a800000 - 24a808000 | AOP_BASE         | \n24a808000 - 24a80c000 | AOP_FILTER       | dart-aop[0]\n24a80c000 - 24a810000 | AOP_FILTER       | dart-aop[1]\n24a810000 - 24a818000 | AOP_FR           | \n24a820000 - 24a824000 | AOP_GPIO         | aop-gpio[0]\n24a824000 - 24a828000 | AOP_SPMI0        | \n24a828000 - 24a828400 | AOP_SPMI1        | \n24a838000 - 24a84c000 | AOP_FR           | \n24a850000 - 24a854000 | AOP_SPI0         | \n24a854000 - 24a858000 | AOP_I2CM0        | \n24a858000 - 24a85c000 | AOP_I2CM1        | \n24a85c000 - 24a870000 | AOP_PDMC_LPD     | \n24a870000 - 24a874000 | AOP_MCA0         | \n24a874000 - 24a878000 | AOP_MCA1         | \n24a878000 - 24a87c000 | AOP_MCA2         | \n24a87c000 - 24a880000 | AOP_MCA3         | \n24a880000 - 24a884000 | AOP_MCA4         | \n24a884000 - 24a888000 | AOP_MCA5         | \n24a900000 - 24a980000 | AOP_ADMA0        | \n24a980000 - 24a9b4000 | AOP_AUDIO_ADMA0  | admac-aop-audio[0]\n24a9b4000 - 24aa00000 | AOP_AUDIO_ADMA0  | \n24aa00000 - 24aa04000 | AOP_UART0        | \n24aa04000 - 24aa08000 | AOP_UART1        | \n24aa08000 - 24aa0c000 | AOP_UART2        | \n24aa0c000 - 24aa14000 | AOP_MCA0         | \n24aa14000 - 24aa1c000 | AOP_MCA1         | \n24aa1c000 - 24aa24000 | AOP_MCA2         | \n24aa24000 - 24aa2c000 | AOP_MCA3         | \n24aa2c000 - 24aa34000 | AOP_MCA4         | \n24aa34000 - 24aa3c000 | AOP_MCA5         | \n24aa3c000 - 24aa40000 | AOP_PDMC_LPD     | \n24aa40000 - 24ab00000 | AOP_SHIM         | \n24ab00000 - 24ab40000 | AOP_LEAP         | \n24ab40000 - 24ac00000 | AOP_AUDIO_SHIM   | \n24b000000 - 24b400000 | AOP_LEAP         | \n24be00000 - 24be04000 | AOP_LEAP         | \n24bf00000 - 24bf08000 | AOP_LEAP         | \n24c000000 - 24c004000 | AOP_LEAP         | \n24c100000 - 24c120000 | AOP_LEAP         | \n262000000 - 262004000 | MSR              | pmgr[32]\n262008000 - 26200c000 | MSR              | pmgr[32]\n263000000 - 263028000 | MSR              | scaler0[0]\n263200000 - 263204000 | MSR              | dart-scaler[0]\n263204000 - 263208000 | MSR              | \n263210000 - 263214000 | MSR              | scaler0[1]\n263214000 - 263218000 | MSR              | \n263220000 - 263224000 | MSR              | \n263230000 - 263240000 | MSR              | \n264000000 - 264004000 | JPG              | pmgr[33]\n264008000 - 26400c000 | JPG              | pmgr[33]\n265000000 - 265004000 | JPG              | jpeg0[0]\n265004000 - 265008000 | JPG              | dart-jpeg0[0]\n265008000 - 26500c000 | JPG              | jpeg1[0]\n26500c000 - 265010000 | JPG              | dart-jpeg1[0]\n265010000 - 26501c000 | JPG              | \n266000000 - 266004000 | VENC_SYS         | pmgr[34]\n266008000 - 26600c000 | VENC_SYS         | pmgr[34]\n267010000 - 267014000 | VENC_SYS         | \n267020000 - 267024000 | VENC_SYS         | dart-ave[2]\n267030000 - 267034000 | VENC_SYS         | dart-ave[1]\n267040000 - 267044000 | VENC_SYS         | dart-ave[0]\n267044000 - 267048000 | VENC_SYS         | dart-ave[3]\n267050000 - 267058000 | VENC_SYS         | ave[2]\n267058000 - 26705c000 | VENC_SYS         | \n267060000 - 267064000 | VENC_SYS         | \n267110000 - 267114000 | VENC_DMA         | ave[0]\n267120000 - 267124000 | VENC_DMA         | ave[0]\n267130000 - 267134000 | VENC_DMA         | ave[0]\n267150000 - 267154000 | VENC_DMA         | ave[0]\n267160000 - 26719c000 | VENC_DMA         | ave[0]\n2671dc000 - 2671e0000 | VENC_SYS         | ave[0]\n2671e0000 - 2671ec000 | VENC_ME0         | ave[0]\n2671f0000 - 2671fc000 | VENC_ME1         | ave[0]\n267240000 - 267250000 | VENC_PIPE4       | ave[0]\n267260000 - 267274000 | VENC_PIPE4       | ave[0]\n267278000 - 26727c000 | VENC_PIPE4       | ave[0]\n267280000 - 267294000 | VENC_PIPE4       | ave[0]\n267298000 - 26729c000 | VENC_PIPE4       | ave[0]\n2672a0000 - 2672b4000 | VENC_PIPE4       | ave[0]\n2672b8000 - 2672bc000 | VENC_PIPE4       | ave[0]\n2672c0000 - 2672e0000 | VENC_PIPE4       | ave[0]\n2672e0000 - 2672e4000 | VENC_DMA         | ave[0]\n2672e8000 - 2672ec000 | VENC_DMA         | ave[0]\n267310000 - 267314000 | VENC_PIPE5       | ave[0]\n267320000 - 267340000 | VENC_PIPE5       | ave[0]\n267350000 - 267358000 | VENC_PIPE5       | ave[0]\n267360000 - 2673a0000 | VENC_PIPE5       | ave[0]\n2673b0000 - 2673b4000 | VENC_PIPE5       | ave[0]\n2673c0000 - 2673e0000 | VENC_PIPE5       | ave[0]\n267400000 - 267404000 | VENC_DMA         | ave[0]\n267408000 - 26740c000 | VENC_DMA         | ave[0]\n267410000 - 267414000 | VENC_DMA         | ave[0]\n267420000 - 267424000 | VENC_DMA         | ave[0]\n267428000 - 26742c000 | VENC_DMA         | ave[0]\n267430000 - 267434000 | VENC_DMA         | ave[0]\n267440000 - 267444000 | VENC_PIPE4       | ave[0]\n267448000 - 26744c000 | VENC_PIPE4       | ave[0]\n267450000 - 267454000 | VENC_PIPE4       | ave[0]\n267460000 - 267464000 | VENC_PIPE4       | ave[0]\n267468000 - 26746c000 | VENC_PIPE4       | ave[0]\n267470000 - 267474000 | VENC_PIPE4       | ave[0]\n267480000 - 267484000 | VENC_PIPE4       | ave[0]\n267488000 - 26748c000 | VENC_PIPE4       | ave[0]\n267490000 - 267494000 | VENC_PIPE4       | ave[0]\n2674a0000 - 2674a4000 | VENC_PIPE4       | ave[0]\n2674a8000 - 2674ac000 | VENC_PIPE4       | ave[0]\n2674b0000 - 2674b4000 | VENC_PIPE4       | ave[0]\n2674c0000 - 2674c4000 | VENC_PIPE4       | ave[0]\n2674c8000 - 2674cc000 | VENC_PIPE4       | ave[0]\n2674d0000 - 2674d4000 | VENC_PIPE4       | ave[0]\n2674e0000 - 2674e4000 | VENC_PIPE5       | ave[0]\n2674e8000 - 2674ec000 | VENC_PIPE5       | ave[0]\n2674f0000 - 2674f4000 | VENC_PIPE5       | ave[0]\n267500000 - 267504000 | VENC_PIPE5       | ave[0]\n267508000 - 26750c000 | VENC_PIPE5       | ave[0]\n267510000 - 267514000 | VENC_PIPE5       | ave[0]\n267520000 - 267524000 | VENC_PIPE5       | ave[0]\n267528000 - 26752c000 | VENC_PIPE5       | ave[0]\n267530000 - 267534000 | VENC_PIPE5       | ave[0]\n267540000 - 267544000 | VENC_PIPE5       | ave[0]\n267548000 - 26754c000 | VENC_PIPE5       | ave[0]\n267550000 - 267554000 | VENC_PIPE5       | ave[0]\n267800000 - 267a00000 | VENC_SYS         | ave[1]\n267c00000 - 267c6c000 | VENC_SYS         | ave[1]\n268000000 - 268004000 | AVD_SYS          | pmgr[35] avd[0]\n268008000 - 26800c000 | AVD_SYS          | pmgr[35] avd[0]\n269000000 - 269004000 | AVD_SYS          | avd[0]\n269010000 - 269014000 | AVD_SYS          | dart-avd[0] avd[0]\n269020000 - 269024000 | AVD_SYS          | avd[0]\n269070000 - 269074000 | AVD_SYS          | avd[0]\n269080000 - 26909c000 | AVD_SYS          | avd[0]\n269100000 - 269110000 | AVD_SYS          | avd[0]\n269400000 - 269404000 | AVD_SYS          | avd[0]\n270000000 - 27001c000 |                  | dispext0[0]\n270040000 - 270074000 |                  | dispext0[0]\n270080000 - 270084000 |                  | dispext0[0]\n2700a8000 - 2700ac000 |                  | dispext0[0]\n2700f0000 - 2700f4000 |                  | dispext0[0]\n2700fc000 - 270118000 |                  | dispext0[0]\n270800000 - 27081c000 |                  | \n270840000 - 270874000 |                  | \n270880000 - 270884000 |                  | \n2708a8000 - 2708ac000 |                  | \n2708f0000 - 2708f4000 |                  | \n2708fc000 - 270918000 |                  | \n2710c0000 - 2710c4000 |                  | \n271200000 - 271204000 |                  | \n271300000 - 271304000 |                  | dart-dispext0[1]\n271304000 - 271308000 |                  | dart-dispext0[0]\n27130c000 - 271310000 |                  | dart-dcpext[0]\n271310000 - 271318000 |                  | \n271324000 - 27132c000 |                  | \n271340000 - 271344000 |                  | \n271344000 - 271348000 |                  | dispext0[2]\n271800000 - 271850000 |                  | dispext0[3]\n271850000 - 271854000 |                  | dispext0[3] dcpext[1]\n271854000 - 271a00000 |                  | dispext0[3]\n271c00000 - 271c6c000 |                  | dispext0[3] dcpext[0]\n272000000 - 272004000 |                  | pmgr[43]\n272008000 - 27200c000 |                  | pmgr[43]\n277000000 - 277050000 | ANS2             | \n277050000 - 277054000 | ANS2             | ans[1]\n277054000 - 277200000 | ANS2             | \n277400000 - 27746c000 | ANS2             | ans[0]\n279000000 - 279004000 | ANS2             | ans[4] pmgr[46]\n279008000 - 27900c000 | ANS2             | ans[4] pmgr[46]\n27bb90000 - 27bb98000 | ANS2             | ans[5]\n27bc50000 - 27bc60000 | ANS2             | sart-ans[0]\n27bcc0000 - 27bcc8000 | ANS2             | ans[3]\n27bccc000 - 27bcd0000 | ANS2             | ans[3]\n27bce4000 - 27bcec000 | ANS2             | ans[3]\n27bd60000 - 27bd68000 | ANS2             | \n27bd70000 - 27bd78000 | ANS2             | \n27bdd0000 - 27bdd4000 | ANS2             |\n</code></pre>"},{"location":"hw/soc/sep/","title":"Secure Enclave Processor (SEP)","text":"<p>Some notes on the SEP based on past community research and digging into the SEP, along with some TODOs for anyone wanting to trace the SEP on Asahi Linux</p> <p>fair warning: this page is messy and will likely remain so, until enough understanding is built up to build a clean page.</p> <p>Notes for anyone tracing for Asahi:</p> <p>Since you don't control the SEP firmware that gets loaded, the parts that matter for Linux itself is really just the communication protocol between AP and SEP, similarly to other ASCs. For understanding the xART/Gigalocker creation and provisioning flow, creating a new user should provision new encryption keys for them which very likely would involve adding entries to the Gigalockers. Also goes without saying but the tracing should be done on the same macOS version as will be the firmware for Asahi Linux installs. (13.5 as of 11/13/2024) - Not fully true, SEP firmware is determined by the highest version macos to be ever installed on the device, but the protocol is backwards compatible.</p> <p>TODOs for tracing: - Massively reduce the message spam from the tracer over the Python console, it greatly slows down the system, and has led to panics on occasion as the message spam leads to things timing out. - currently the tracer seems to assume Monterey or Big Sur SEP firmware, update it for Ventura and newer. - Perhaps only trace SEP messages from individual SEP applets based on endpoint indices, and use separate Python scripts to trace the SKS flow or the SSE flow? - build a table of message types and data sent in for all endpoints (in XNU logs, a lot of the messages seem to have parts of the true SEP message masked out)</p> <p>Miscellaneous questions:</p> <ul> <li>when the debug endpoint is notifying the AP that an endpoint has come to life, the \"DATA\" field has a value of 0x2020202, 0x1010101, 0x0, or 0x2020404 - this is ool buffer sizes in pages, input and output. Not sure why they are doubled though.</li> <li>one part of the SEP shared mem buffer at the very beginning during endpoint setup changes the lower byte of the first 32-bit word from 02 to 1f. why would that be? is that a configuration bit? is that done by macOS or the SEP OS?</li> </ul> <p>Coprocessor information:</p> <p>As with other ASC coprocessors like DCP, this is an ASC coprocessor and thus communicates with the main AP through a similar mailbox interface and occasional shared buffers (in AppleSEPManager, they call these \"OOL\" buffers, supposedly out of line buffers). Unlike the other processors which run RTKit or a derivative of, SEP seems to run a custom OS Apple internally calls SEPOS. Additionally SEPOS itself seems to be broken up into many different applications that all run on the SEP itself.</p> <p>SEP seems to authenticate its own firmware (evidenced by kernel strings saying that SEP has \"accepted\" the IMG4), and seemingly will panic upon failure to authenticate the firmware. SEP firmware is encrypted by a separate GID from the normal AP GID, so a bootchain vuln in iBoot won't give you any ability to decrypt SEP firmware or load arbitrary SEP firmware unless you also manage to compromise SEP itself.</p> <p>Compared to the other ASC coprocessors, SEP is the only one that seems to have dedicated storage (at minimum for any sensitive information like wrapped keys and such) that no other processor on the device can talk to.</p> <p>T8112 ASC SEP mailbox base: 0x25E400000 (actual mailbox at +0x8000, like other ASC IOPs)</p> <p>Endpoint information:</p> Endpoint index Endpoint name Purpose 0x00 Control/CNTL seems to control some endpoint properties 0x08 Secure Biometrics (SBIO) biometric authentication 0x0a SCRD likely \"Secure/SEP credential manager\" used for user credential auth? 0x0c sse Somehow related to NFC, may be related to Apple Pay. 0x0e HDCP likely HDCP content protection 0x10 xars (according to tracer) xART setup? involved in startup/shutdown 0x12 Secure/SEP Key Store SEP encrypt/decrypt operations and key management 0x13 xART manager manages xARTs, gigalockers and keybags (needed for SKS to start) 0x14 hibe (according to tracer) hibernation related 0x15 pnon (tracer name) Boot policy related. We will eventually need it for Machine owner credentials handoff, but can be ignored for now 0x17 skdl CoreKDL. KDL stands for kext deny list, relevant for FairPlay, maybe relevant for HDCP and Apple Pay. 0x18 stac linked to the AppleTrustedAccessory extension, probably \"Secure/SEP Trusted Accessory Connection\" 0xFD Debug(?) More of a discovery endpoint, returns the endpoint list and OOL buffer sizes 0xFE Boot254 Signals SEP to boot into SEPOS with an IMG4 that will be set up in its protected memory region. 0xFF Boot255 Signals to SEP that the protected region of memory set up for it is ready for its own use <p>Gigalocker/xART format (thanks sven for this info!): | Section start-section end | Description | | ------------------------- | ----------- | | 0x00-0x01 | Always 0 (perhaps some kind of version identifier?) | | 0x01-0x12 | UUID/key (a key identifier for SKS?) | | 0x12-0x16 | length of key | | 0x16-0x1a | CRC of wrapped key | | 0x1a-0x22 | unknown purpose | | 0x22-end of payload | payload/wrapped keybag data |</p> <p>SEP Message format:</p> <p>bits 0-7 - Endpoint number</p> <p>bits 8-15 - a \"tag\" value (for the control endpoint, an inbound and outbound message may sometimes share tags, not used much in the SEP bootrom)</p> <p>bits 16-24 - message \"type\" (what you want the receiving end to act on, this field is how you communicate your desired action to the SEP)</p> <p>bits 25-31 - message parameters (debug endpoint, this is always the endpoint the debug endpoint is responding/receiving info about, SEP bootrom doesn't use this much)</p> <p>bits 32-63 - some kind of data (can be either a pointer, or a configuration value, but this is almost always required to be set for actions that change system state)</p> <p>the mailbox is capable of sending stuff in bits 127-63 but currently those bits go unused, SEP bootrom totally ignores them, and AppleSEPManager doesn't do it either.</p> <p>SEP boot flow: - iBoot preloads SEP firmware into a memory region that's recorded in ADT. - XNU sends a boottz0 message, bringing SEP into second stage boot (a portion of RAM is reserved for this) - XNU sends img4, SEP verifies integrity, if accepted, boots into SEP/OS (sending a malformed or invalid IMG4 is a panic on SEP side, making it unusuable for the rest of that boot until the device resets) - Endpoint setup (including xART/Gigalocker configuration, SKS setup including FileVault keys, etc.)</p> <p>xART init flow (incomplete atm, may be wrong):</p> <p>(message type 0 is some sort of fetch request, message type 0x5 is a fetch response it seems for individual lockers) (tags seem to be increasing in the order of the lockers within the gigalocker)</p> <p>```c: //Gigalocker initialization (TODO: verify if later OS versions use the same format)</p> <p>[cpu1] [SEPTracer@/arm-io/sep] [xarm] &gt;0x0(None) 0000010000000213 (EP=0x13, TAG=0x2, TYPE=0x0, PARAM=0x0, DATA=0x100)</p> <p>[cpu14] [SEPTracer@/arm-io/sep] [xarm] &lt;0x13(None) 0000000000130113 (EP=0x13, TAG=0x1, TYPE=0x13, PARAM=0x0, DATA=0x0)</p> <p>//SEP xART fetch from gigalocker (this xART itself seems to have many sublockers?)</p> <p>[cpu0] [SEPTracer@/arm-io/sep] [xarm] &gt;0x0(None) 0000000000000113 (EP=0x13, TAG=0x1, TYPE=0x0, PARAM=0x0, DATA=0x0)</p> <p>[cpu10] [SEPTracer@/arm-io/sep] [xarm] &lt;0x0(None) 0000010000000313 (EP=0x13, TAG=0x3, TYPE=0x0, PARAM=0x0, DATA=0x100)</p> <pre><code>\n\n\nSEP Trusted Accessory notes:\n\n```c:\n\n//ping\n[cpu0] [SEPTracer@/arm-io/sep] [stac] &gt;0xf(None) 00000000000ffc18 (EP=0x18, TAG=0xfc, TYPE=0xf, PARAM=0x0, DATA=0x0)\n\n//pong\n[cpu0] [SEPTracer@/arm-io/sep] [stac] &lt;0xf(None) 00000000000ffc18 (EP=0x18, TAG=0xfc, TYPE=0xf, PARAM=0x0, DATA=0x0)\n</code></pre> <p>AppleTrustedAccessory talks to this endpoint, likely for the Touch ID sensor on external keyboards.</p> <p>SEP backwards compatibility notes:</p> <p>SKS IPC is negotiated on both the kernel side and SEP side, lowest compatible version between both will be the IPC used for communication between main processor and SEP.</p> <p>This should ensure that SEP and OS can continue to be compatible with each other even if SEP gets upgraded (since it'll just use the older IPC version). (potential question: in the Linux driver how should this be accounted for?)</p> <p>Miscellaneous notes:</p> <p>The control endpoint seems to reply to incoming requests with a message type of 0x1 and input parameters if something was successful (likely an ack/okay from SEP side if all is good) (at least for messages that set input/output length or pointers)</p> <p>SKS is very spammy in normal mode as mailbox messages to/from sep with it as the endpoint are constantly being sent (this is likely because of how Data Protection works according to the Apple security guide, a lot of these likely are retrieving/updating keys from/to gigalocker)</p> <p>Single-user mode is helpful when doing tracing, as SKS will not be nearly as spammy and we can capture the initialization sequence.</p> <p>xART fetch notes:</p> <p>during the locker fetch sequence, a large number of the messages have 0x100 as the \"data\" part. responses from the SEP with respect to a locker fetch/unwrap request will always have parameter 0x10. A response with type 0x5 is success, 0x7 is an error (at minimum it's the error signaling that a user xART locker couldn't be found)</p>"},{"location":"hw/soc/serial-debug/","title":"Debugging via Serial Console","text":"<p>Taken from the original Developer Quickstart guide</p>"},{"location":"hw/soc/serial-debug/#getting-a-serial-console","title":"Getting a serial console","text":"<p>Having a serial console is indispensable for a fast development cycle and to debug low-level issues.</p> <p>M1 Macs expose their debug serial port over one of their Type C ports (the same one used for DFU). On MacBooks, this is the rear left port. On the Mac Mini, this is the port closest to the power plug.</p> <p>The target machine can also be hard-rebooted using USB-PD VDM commands, making for a quick test cycle (no holding down power buttons).</p> <p>See USB-PD for details on the USB-PD VDM commands and what you can do with them.</p> <p>The serial port is a UART using 1.2V logic levels, and requires vendor-specific USB-PD VDM commands to enable. Thus, making a compatible cable is nontrivial. You have the following options.</p>"},{"location":"hw/soc/serial-debug/#using-an-m1-machine","title":"Using an M1 machine","text":"<p>If you have two M1 boxes, this is the simplest solution. Just grab macvdmtool, connect both machines with a standard Type C SuperSpeed cable using the DFU port on both machines, and that's it!</p> <p>IMPORTANT NOTE: The cable needs to be the USB 3 / SuperSpeed type. USB 2 only cables won't work, the charging cable that comes with the MacBook/MacBook Air will not work and neither will most other cheap cables or cables marketed for their charging capacity. If it doesn't say \"SuperSpeed\" or \"USB3.0\" in the package it almost certainly won't work. If it's thin and bendy it is almost certainly not a SuperSpeed cable. Cables that work need to have upwards of 15 wires inside them; if it doesn't feel like it could possibly have that many wires inside, it is not the cable you need. If you are sure your cable is SuperSpeed capable (i.e. devices do enumerate as SuperSpeed through it) and it still doesn't work, then it is non-compliant and the manufacturer deserves to be shamed on their Amazon reviews page, because it means they didn't connect the SBU1/2 pins.</p> <pre><code>$ xcode-select --install\n$ git clone https://github.com/AsahiLinux/macvdmtool\n$ cd macvdmtool\n$ make\n$ sudo ./macvdmtool reboot serial\n</code></pre> <p>You should see something like this:</p> <pre><code>Mac type: J313AP\nLooking for HPM devices...\nFound: IOService:/AppleARMPE/arm-io@10F00000/AppleT810xIO/i2c0@35010000/AppleS5L8940XI2CController/hpmBusManager@6B/AppleHPMBusController/hpm0/AppleHPMARM\nConnection: Sink\nStatus: APP \nUnlocking... OK\nEntering DBMa mode... Status: DBMa\nRebooting target into normal mode... OK\nWaiting for connection........ Connected\nPutting target into serial mode... OK\nPutting local end into serial mode... OK\nExiting DBMa mode... OK\n</code></pre> <p>See the macvdmtool page or just run it without arguments for a list of supported commands. Your serial port device is <code>/dev/cu.debug-console</code>. You can try picocom with: <code>sudo picocom -q --omap crlf --imap lfcrlf -b 115200 /dev/tty.debug-console</code>.</p> <p>NOTE: if you have enabled serial debug output on your host machine (via nvram settings), the serial port device will be in use by the kernel. You need to turn that off to use it as a generic serial port.</p>"},{"location":"hw/soc/serial-debug/#diy-arduino-based-usb-pd-interface","title":"DIY Arduino-based USB-PD interface","text":"<p>You can build a DIY USB-PD interface with the following parts:</p> <ul> <li>An Arduino or clone</li> <li>An FUSB302 chip, either stand-alone or on a breakout board</li> <li>A USB Type C breakout board (get a male one, plugging in directly into the target, for the most flexibility)</li> <li>A 1.2V compatible UART interface</li> </ul> <p>Note that most FUSB302 breakout boards will not usefully break out the Type C pins you need, so it's best to use a separate full breakout board.</p> <p>Go to the vdmtool repository for more information and a wiring list. Documentation is a bit sparse at the moment. You can ask us on IRC (OFTC/#asahi) if you need help.</p> <p>1.2V compatible UART interfaces are relatively rare. 1.8V ones will usually work for input (RX); you can use a resistor divider to step down the TX voltage (<code>TX -- 220\u03a9 -+- 470\u03a9 -- GND</code> will step down 1.8V TX to 1.22V at the <code>+</code> point).</p> <p>The default <code>vdmtool</code> code will put serial on the SBU1/SBU2 pins. At the device side connector (no cable), TX (output from the Mac) will be on the SBU1 pin on the connector side that has the active CC line (you should only connect one), and RX (input to the Mac) will be directly opposite the CC line.</p> <p>This is all rather rudimentary because it's a stop-gap for the proper solution, which is...</p>"},{"location":"hw/soc/serial-debug/#inflexible-usb-pd-debug-interface-aka-central-scrutinizer","title":"Inflexible USB-PD Debug Interface (aka Central Scrutinizer)","text":"<p>An alternative to the above DIY approach is the Central Scrutinizer project, which started exactly as the above, only using a custom PCB instead of a breadboard. It has since evolved to support additional features, but the core functionality is exactly the same:</p> <p> </p> <p>Main features are: - RaspberryPi Pico as the micro-controller (yes, totally overkill, but cheaper than an Arduino!) - level shifters for the serial lines - USB2.0 pass-through to feed m1n1 - stackable (a single Pico is capable of driving two Central Scrutinizer boards) - USB-C orientation detection (v2+) - capable of using dumb USB2.0 cables for serial, at the expense of not being able to use the pass-through feature (v3+)</p> <p>The KiCad project is available here, and the corresponding firmware for the Pico is there. The hardware side of the project is pre-configured to production at JLCPCB, so that producing it is only a few clicks away. Alternatively, you can find some pre-built boards on Tindie, but building your own should be the first port of call.</p> <p>If you want more information about this project, feel free to get in touch with maz. </p>"},{"location":"hw/soc/serial-debug/#flexible-usb-pd-debug-interface-project-name-tbd","title":"Flexible USB-PD Debug Interface (project name TBD)","text":"<p>In the coming weeks we'll be designing an open hardware interface for interfacing to M1 serial ports, and more (supporting other debug pinsets on Apple devices, as well as UARTs on other devices such as certain Android phones, etc). Stay tuned for more information. Established kernel developers who want to get an early prototype when they become available should contact marcan.</p> <p>Note: This is indefinitely backburnered and mostly rendered obsolete by USB support in m1n1/hypervisor.</p>"},{"location":"hw/soc/smc/","title":"System Management Controller (SMC)","text":"<p>The SMC is a piece of hardware handling access to such things as temperature sensors, voltage/power meters, battery status, fan status, and the LCD backlight and lid switch.</p> <p>It is \"documented\", to the extent that it is, in https://github.com/corellium/linux-m1/blob/master/drivers/hwmon/apple-m1-smc.c, but that's just the protocol, which essentially allows you to do three things:</p> <ol> <li> <p>read data for each of many, many four-ASCII-character \"keys\". There are about 1,400 such keys on the MacBook Pro.</p> </li> <li> <p>read data for a key, supplying a payload.</p> </li> <li> <p>write data for a key.</p> </li> </ol> <p>In addition to receiving the bytes of data, the SMC provides a type for that data, encoded as four ASCII characters, and a flags byte.</p> <p>So far, I haven't been brave enough to try (2) or (3).</p>"},{"location":"hw/soc/smc/#smc-key-types","title":"SMC key types","text":"<p>Encoded as four ASCII characters, the last of which I omit if it's a space.</p> <ul> <li><code>flt</code>: a 32-bit single-precision IEEE float. In at least one case, the byte order is actually reversed.</li> <li><code>si8</code>, <code>ui8</code>, <code>si16</code>, <code>ui16</code>, <code>si32</code>, <code>ui32</code>, <code>si64</code>, <code>ui64</code>: signed/unsigned 8-/16-/32-/64-bit values</li> <li><code>hex_</code>: random binary data</li> <li><code>flag</code>: 1 or 0</li> <li><code>ioft</code>: this appears to be a 64-bit unsigned fixed-point value (48.16, most likely).</li> <li><code>ch8*</code>: ASCII string</li> <li><code>{jst</code>: unknown. Possibly some sort of binary-encoded structured document?</li> </ul>"},{"location":"hw/soc/smc/#smc-flags","title":"SMC flags","text":"<p>Almost totally unknown. Keys with <code>0xf0</code> flags don't appear to return non-zero values reliably (see Quirks).</p>"},{"location":"hw/soc/smc/#smc-keys","title":"SMC keys","text":"<p>Many. https://github.com/torvalds/linux/blob/master/drivers/hwmon/applesmc.c documents some, but mostly you have to guess based on the four-character name. There are more than 1,400 such keys on the MacBook Pro, with many apparently unused.</p> <p>Some guesses as to what they might mean: * <code>T???</code>: temperature values, in Celsius, as float. There are many of those. The question marks specify, presumably, the location (and possibly whether or not the value is averaged to provide a more meaningful reading?) * <code>TB0T</code>: battery temperature * <code>TCHP</code>: charger temperature (increases sligtly when charging) * <code>TW0P</code>: wireless temperature (increases slightly when wireless is turned on) * <code>Ts0P</code>: palm rest temperature * <code>Ts1P</code>: palm rest temperature * <code>V???</code>: voltages. Probably in volts. * <code>gP??</code>: \"GPIO\" pins. Actually output only, and there appears to be a bug preventing you from reading the level of a pin non-destructively, except it works for the very first such pin to be read. * <code>gP0d</code>: controls the WiFi/BT chips.  Without enabling this, the PCI devices for WiFi and BT don't show up.  Used to implement \"rfkill\" functionality? * <code>gP12</code>: on at least one system, the LCD backlight. Can be turned off, which reduces apparent power consumption, and turned back on. * <code>gp??</code> (note capitalization): presumably also some kind of GPIO pin? * <code>D1??</code>: information about the device connected to the first USB-C port * <code>D1in</code>: name of the connected charger * <code>D1is</code>: serial number of the connected charger * <code>D2??</code>: refer to <code>D1??</code> * <code>P???</code>: power meters, presumably in watts * <code>PSTR</code>: entire system's power consumption in W * <code>SBA?</code>: system battery information * <code>SBA1</code>: battery cell 1 voltage in mV * <code>SBA2</code>: battery cell 2 voltage in mV * <code>SBA3</code>: battery cell 3 voltage in mV * <code>SBAV</code>: battery voltage in mV (sum of <code>SBA1</code>, <code>SBA2</code> and <code>SBA3</code>, same as <code>B0AV</code> but as a <code>flt</code>) * <code>SBAR</code>: battery remaining capacity in mAh (same as <code>B0RM</code> but as a <code>flt</code>) * <code>SBAS</code>: battery charge in percent (same as <code>BRSC</code> but as a <code>flt</code>) * <code>RPlt</code>: platform name, such as \"J293\". * <code>a???</code>: highly volatile power-related measurement, so possibly current going to various device parts. * <code>F???</code>: fan information. Refer to https://github.com/torvalds/linux/blob/master/drivers/hwmon/applesmc.c. * <code>CL??</code>: various times, measured in microseconds since (possibly) manufacturing/RTC reset time * <code>CLKU</code>: continuously-updated current time * <code>CLBT</code>: SMC boot time (e.g. AC power applied) * <code>CLSP</code>: possibly the time the SMC last went to sleep * <code>CLWK</code>: possibly the time the SMC last woke up * <code>MSLD</code>: the lid switch, 1 for closed, 0 for open * <code>bHLD</code>: power button currently pressed * <code>MBSe</code>: power button pressed since last read, read-to-clear * <code>B0CT</code>: battery charge cycle count * <code>B0AV</code>: battery voltage in mV (same as <code>SBAV</code> but as an <code>si16</code>) * <code>BRSC</code>: battery charge in percent (same as <code>SBAS</code> but as a <code>ui16</code>) * <code>B0DC</code>: battery design capacity in mAh * <code>B0FC</code>: battery full capacity in mAh * <code>B0RM</code>: battery remaining capacity in mAh (same as <code>SBAR</code> but as a <code>ui16</code> in reverse byte order) * <code>B0TE</code>: battery time-to-empty in minutes * <code>B0TF</code>: battery time-to-full in minutes * <code>ID0R</code>: input current in A * <code>VD0R</code>: input voltage in V * <code>PDTR</code>: input power in W</p>"},{"location":"hw/soc/smc/#quirks","title":"Quirks","text":"<p>Or possibly quirks?</p> <ul> <li><code>#KEY</code>: contains the number of keys in the SMC, but in reversed byte order.</li> <li><code>VP3b</code>: apparently byte-reversed</li> <li><code>gP??</code>: latched in a weird way: the first time one of these keys is read, the data indicates the pin's power status. But reading any of the keys afterwards returns <code>0</code>, except after a write to one of them, which allows you to read data once more (but just once), for any of the pins. So you can read all pins by repeatedly writing 1 to a pin you know to be at high level, then reading the other pin levels one by one. Reading with a payload of 0xffffffff or 0x00000001 returns the right value.</li> <li><code>rLD0</code> etc. cannot be read normally, but can be read with a 0x00000001 or 0x00ffffff payload. Maybe that's related to the \"flags\" byte being 0xf0.</li> </ul>"},{"location":"hw/soc/smc/#notifications","title":"Notifications","text":"<p>Setting the \"NTAP\" (notify application processor, maybe?) flag to 1 makes the SMC send notifications when certain system events happen, such as power being connected and disconnected, the power button being pressed, or the lid being opened or closed. Notifications are mailbox messages apparently limited to the 64-bit payload.</p>"},{"location":"hw/soc/smc/#adc","title":"ADC","text":"<p>In addition to the keys accessible \"directly\" through the SMC, there is what appears to be a muxed single-channel ADC providing access to 111 further values.  It is accessed through \"aDC#\" (giving the number of keys), \"aDC?\" (query key name using a numeric payload), and \"aDCR\", the actual result value.</p>"},{"location":"hw/soc/soc-codenames/","title":"SoC Codenames","text":"<p>Apple likes to use many different names for the same devices.</p>"},{"location":"hw/soc/soc-codenames/#socs","title":"SoCs","text":"Marketing Internal Codename SoC P-Core E-Core S1 M7 S7002 Cortex-A7 S1P, S2, T1 M8 T8002 Cortex-A7 S3 M8P T8004 Cortex-A7 S5L8747 Cortex-A5 H2 Cortex-A8 A4 H3 S5L8930 Cortex-A8 A5 H4 S5L8940 Cortex-A9 A5 H4A S5L8942 Cortex-A9 A5 H4i S5L8947 Cortex-A9 A6 H5P Bali S5L8950 Swift A6X H5G Bali S5L8955 Swift A7 H6 Alcatraz S5L8960 Cyclone A8 H7P Fiji T7000 Typhoon A8X H7G Capri T7001 Typhoon A9 H8P (Samsung) Maui S8000 Twister A9 H8P (TSMC) Malta S8003 Twister A9X H8G Elba S8001 Twister A10 H9P Cayman T8010 Hurricane Zephyr (CLS) A10X H9G Myst T8011 Hurricane Zephyr (CLS) T2 H9M Gibraltar T8012 Hurricane Zephyr (CLS) A11 H10 Skye T8015 Monsoon Mistral A12 H11P Cyprus T8020 Vortex Tempest S4, S5 M9 T8006 - Tempest A12X, A12Z H11G Aruba T8027 Vortex Tempest Tinos T8028 Vortex - A13 H12 Cebu T8030 Lightning Thunder S6, S7, S8 M10 Turks T8301 - Thunder A14 H13P Sicily T8101 Firestorm Icestorm M1 (\"A14X\") H13G Tonga T8103 Firestorm Icestorm M1 Pro H13J Jade Chop T6000 Firestorm Icestorm M1 Max H13J Jade 1C T6001 Firestorm Icestorm M1 Ultra H13J Jade 2C T6002 Firestorm Icestorm R1 T6500 A15 H14P Ellis T8110 Avalanche Blizzard M2 H14G Staten T8112 Avalanche Blizzard M2 Pro H14J Rhodes Chop T6020 Avalanche Blizzard M2 Max H14J Rhodes 1C T6021 Avalanche Blizzard M2 Ultra H14J Rhodes 2C T6022 Avalanche Blizzard A16 H15P Crete T8120 Everest Sawtooth S9 M9 T8310 - Sawtooth A17 Pro H16P Coll T8130 M3 H15G Ibiza T8122 Everest Sawtooth M3 Pro H15J Lobos T6030 Everest Sawtooth M3 Max H15J/H15S Palma T6031 / T6034 Everest Sawtooth M4 H16G Donan T8132 M4 Pro H16S Brava Chop T6040 M4 Max H16C Brava T6041 A18 H17A Tupai T8140a A18 Pro H17P Tahiti T8140 Hidra Sotra_C Sotra_S Sotra_D Thera Komodo Tilos"},{"location":"hw/soc/spmi/","title":"SPMI","text":"<p>This block controls a single master in an SPMI bus. It allows sending SPMI commands and also acts as a 256-line interrupt controller for the bus participants. It has had several revisions, according to the ADT compatible:</p> <ul> <li><code>spmi,gen1</code>: used in M1</li> <li><code>spmi,gen2</code>: used in M2</li> <li><code>spmi,gen3</code>: used in M3, M4</li> </ul> <p>This document is written based on gen3. The revisions seem to have backwards compatible interfaces, but some functionality may not be present on older ones.</p>"},{"location":"hw/soc/spmi/#registers-overview","title":"Registers overview","text":"<p>The first of 3 MMIO areas in the ADT holds the following 32-bit registers:</p> <ul> <li>[0x00] STATUS [RO]: Status of the TX and RX FIFOs</li> <li>[0x04] TX_PUSH [WO]: Writes push a 32-bit word to the TX FIFO</li> <li>[0x08] RX_PULL [RO]: Reads consume a 32-bit word from the RX FIFO</li> </ul> <ul> <li>[0x20..0x3F] BUS_IRQ_MASK [RW]: IRQ mask area for bus-asserted interrupt lines</li> <li>[0x40] IRQ_MASK [RW]: IRQ mask area for controller-asserted interrupt lines</li> </ul> <ul> <li>[0x60..0x7F] BUS_IRQ_ACK [RW]: IRQ ACK area for bus-asserted interrupt lines</li> <li>[0x80] IRQ_ACK [RW]: IRQ ACK area for controller-asserted interrupt lines</li> </ul> <ul> <li>[0xA0] CONFIG1 [RW]: Bits 0..2 settable, initialized by iBoot to 6 (<code>nub-spmi-aN</code>) or 7 (others). Master address?</li> <li>[0xA4] ACTION1 [WO]: Writing 1 to some of the bits triggers some actions</li> </ul> <ul> <li>[0xB0] CURSORS [RO]: Read/write cursor positions for the TX and RX FIFOs</li> <li>[0xB4] PEEK_POS [RW]: FIFO and buffer position to peek</li> <li>[0xB8] PEEK_VALUE [RO]: Word at the position described by PEEK_POS</li> <li>[0xBC] STATUS1 [RO]: Only bit 0 seen, seems to indicate inability to talk on the bus?</li> </ul>"},{"location":"hw/soc/spmi/#general-operation","title":"General operation","text":"<p>To send an SPMI command on the bus, a batch of 32-bit words is pushed to the TX FIFO. When all of the following conditions are fulfilled:</p> <ul> <li>a complete, valid batch is next in the TX FIFO</li> <li>there is enough free space in the RX FIFO</li> <li>the bus is free</li> <li>CONFIG1 holds a nonzero value (?)</li> </ul> <p>the SPMI master side consumes the batch from the TX FIFO, sends the corresponding frames on the bus, and writes a batch of words to the RX FIFO. The general structure of a batch of words in either FIFO is as follows:</p> <ol> <li>a command word (TX FIFO) or reply word (RX FIFO).</li> <li>0 to 16 data bytes, which are packed into words in little-endian order, resulting in 0 to 4 words (as many as needed)<ul> <li>if the amount of bytes isn't divisible by 4, trailing bytes are added as needed; thus the last word may have its higher 0..3 bytes unused (TX FIFO) or set to 0 (RX FIFO)</li> </ul> </li> </ol> <p>For example, a batch with 5 data bytes consists of these 3 words:</p> <pre><code>+------------------------+  +--------+--------+--------+--------+  +--------------------+--------+\n|   command/reply word   |  | byte 3 | byte 2 | byte 1 | byte 0 |  |     unused/zero    | byte 4 |\n+------------------------+  +--------+--------+--------+--------+  +--------------------+--------+\n</code></pre> <p>The amount of data bytes is fully determined by the OPCODE field in the command/reply word. For RX FIFO batches (replies) the amount of data bytes always matches the amount of SPMI input frames, e.g. amount of bytes requested in a register read. For TX FIFO batches (commands) however, the relationship is more complicated, see below.</p> <p>The general structure of a command word is as follows:</p> <ul> <li>[Bits 0..7] OPCODE: 8-bit SPMI command opcode. Note that this isn't always the exact opcode that will be sent through the bus, sometimes it just identifies the general command type (e.g. register 0 write, read register), see SPMI commands below</li> <li>[Bits 8..11] SLAVE_ID: 4-bit slave address</li> <li>[Bit 15] NOTIFY: If set, the NOTIFY interrupt line is asserted when this command completes (see interrupts below)</li> <li>[Bits 16..31] PARAM: 16-bit space for extra opcode-dependent parameters that aren't carried in the data bytes</li> </ul> <p>The general structure of a reply word is as follows:</p> <ul> <li>[Bits 0..7] OPCODE: 8-bit SPMI opcode that was actually transmitted in the command frame (as stated above, this may not always exactly match the OPCODE field in the command word)</li> <li>[Bits 8..11] SLAVE_ID: 4-bit slave address (always matches command word)</li> <li>[Bit 15] ACK: If the SPMI command includes an acknowledgment frame (basically all commands except reads) this bit carries its value (1 if acknowledged by the slave), otherwise 0</li> <li>[Bits 16..31] PARITY: The N lower bits of this field (where N is the amount of input frames included in the SPMI command, and thus the amount of data bytes following this word) hold the result of the parity check for each of those frames (1 if the check succeeded), the rest are zero</li> </ul> <p>Entire batches of words are consumed and pushed from/to the FIFOs atomically; once the first word of a batch is available, there's no need to wait for the other words.</p>"},{"location":"hw/soc/spmi/#spmi-commands","title":"SPMI commands","text":"<p>Additional requirements for the command / reply word batches depend on the particular kind of command being issued:</p>"},{"location":"hw/soc/spmi/#simple-commands","title":"Simple commands","text":"<p>For power state management commands (reset, sleep, shutdown, wakeup) since they carry no additional parameters, the PARAM field is unused. No data bytes follow the command or reply.</p>"},{"location":"hw/soc/spmi/#basic-register-access","title":"Basic register access","text":"<p>For commands that read or write a single register (read register, write register, register 0 write) the PARAM field is structured as follows:</p> <ul> <li>[Bits 0..7] ADDRESS: Register address, 0..0x1F (unused for the register 0 write command)</li> <li>[Bits 8..15] VALUE: Written register value (unused for the read register command)</li> </ul> <p>In the command's OPCODE field, any bits specifying this info are ignored and replaced with the relevant bits from PARAM. No data bytes follow the command, and 0 (writes) or 1 (reads) data bytes follow the reply.</p>"},{"location":"hw/soc/spmi/#extended-register-access","title":"Extended register access","text":"<p>For commands that can operate on multiple registers at once, and also allow accessing an extended register address space (extended read, extended write, extended read long, extended write long) the PARAM field holds the register address (0..0xFF for extended read/write, 0..0xFFFF for extended read/write long).</p> <p>The amount of data bytes following the command (writes) or reply (reads) is the amount of registers/bytes being read/written, as encoded in OPCODE.</p>"},{"location":"hw/soc/spmi/#fifos","title":"FIFOs","text":"<p>Each of the FIFOs has a capacity of 64 words. Because all known batches can be at most 5 words, the controller can in the worst case hold up to 12 outstanding SPMI commands.</p> <p>STATUS and CURSORS return information about the TX FIFO in the low half-word, and the RX FIFO in the high half-word. A half-word in STATUS is structured as follows:</p> <ul> <li>[Bits 0..7] COUNT: Amount of words in the FIFO, 0..0x40</li> <li>[Bit 8] EMPTY: Set if the FIFO is empty, e.g. COUNT == 0</li> <li>[Bit 9] FULL: Set if the FIFO is full, e.g. COUNT == 0x40</li> </ul> <p>A half-word in CURSORS is structured as follows:</p> <ul> <li>[Bits 0..7] WRITE_CURSOR: Buffer position of the next word to push, 0..0x3F</li> <li>[Bits 8..15] READ_CURSOR: Buffer position of the next word to consume, 0..0x3F</li> </ul> <p>When both cursors are equal, the FIFO may be either empty or full; STATUS may be used to disambiguate.</p> <p>Writing a 1 to bit 0 of the ACTION1 register clears both FIFOs.</p> <p>There is a debug mechanism to read arbitrary words from the buffer of a FIFO. PEEK_POS selects which word:</p> <ul> <li>[Bit 8] FIFO_IDX: FIFO to select (0 = TX, 1 = RX)</li> <li>[Bits 16..24] CURSOR: Buffer position to read, 0..0x3F</li> </ul> <p>And PEEK_VALUE returns the current value at the selection.</p>"},{"location":"hw/soc/spmi/#interrupts","title":"Interrupts","text":"<p>The ADT lists several AIC interrupt lines, but only the second one seems to be of interest, since the other ones appear to be shared across all other SPMI controllers.</p> <p>The mask area is at 0x20..0x5F; each bit is set to 1 if the corresponding line is unmasked, 0 if masked.</p> <p>The ACK area is shifted by +0x40, at 0x60..0x9F; each bit is set to 1 when the corresponding line triggers; writing a 1 to the bit clears it.</p> <p>The AIC line is asserted if at least one bit is set in both areas. The first 256 lines (first half of each area) appear to be triggered by participants in the bus (the SPMI spec doesn't specify a command for this, could be a master write command?). The rest are triggered by the controller itself when certain events occur. Note that masking a line doesn't prevent it from being triggered (and the corresponding bit set to 1 in the ACK area).</p> <p>At M3, only the following controller-triggered lines are unmaskable:</p> <ul> <li>[Bit 0] NOTIFY: Triggered when a command with the NOTIFY flag completes and its reply has been pushed to the RX FIFO</li> </ul> <ul> <li>[Bit 4]</li> <li>[Bit 5]</li> <li>[Bit 6] READ_FAIL_1: Triggered when a read command completes with parity check failures</li> <li>[Bit 7] ACK_FAIL: Triggered when a (non-read) command completes and wasn't acknowledged by the slave</li> <li>[Bit 8]</li> <li>[Bit 9]</li> <li>[Bit 10]</li> <li>[Bit 11] READ_FAIL_2: Triggered when a read command completes with parity check failures</li> <li>[Bit 12]</li> <li>[Bit 13]</li> </ul> <ul> <li>[Bit 16]</li> <li>[Bit 17]</li> </ul> <ul> <li>[Bit 23] (only on <code>nub-spmiN</code>)</li> <li>[Bit 24] (only on <code>nub-spmiN</code>)</li> <li>[Bit 25] (only on <code>nub-spmiN</code>)</li> <li>[Bit 26] (only on <code>nub-spmiN</code>)</li> <li>[Bit 27] FAIL: Triggered when attempting to consume a word from the RX FIFO while empty. Unlike the rest this one seems to be level-triggered and I can't find the way to clear it (short of a PMGR reset)</li> <li>[Bit 28] (only on <code>nub-spmiN</code>)</li> <li>[Bit 29] (only on <code>nub-spmiN</code>)</li> </ul>"},{"location":"hw/soc/usb-debug/","title":"USB-PD Debugging Interface","text":"<p>This seems to be a built-in debugging USB interface.</p> <p>Commands via EP 0x01, replies via 0x81, 0x82 unknown</p> <p>RE notes trying to send it random stuff:</p> <pre><code>First 3 bytes are ignored? Fourth byte matters.\nFirst 5 bytes are echoed at the beginning of replies\nReplies seem to follow a uniform format\n\n&gt; 00000000 000c8000 00000000 00000000\n             OOLLLL\n\nReads LLLL bytes (rounded to dword) starting from dword register OO.\n\nReturns:\n00000000 00000000 &lt;u32:payload len&gt; &lt;data words&gt;* &lt;u32:data size&gt; &lt;u32:status=4?&gt;\n\n&gt; 00000000 02000000 00000000 00000000 00000000 00\n\nReturns:\n    00000000 02000000 08458400\n\nAnd then keeps flooding [a0030000] repeated forever\n\nSeems to be an insane length. Bug?\n</code></pre> <p>Register dump:</p> <pre><code>00000000  a0 03 00 00 91 00 06 10  91 00 81 08 09 22 00 00  |.............\"..|\n00000010  03 10 00 00 00 00 30 3d  02 00 00 00 0f 0f 00 00  |......0=........|\n00000020  15 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000080  00 01 00 04 01 01 0b 08  02 06 fe 40 00 00 00 00  |...........@....|\n00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000000f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000100  00 0a 00 00 01 03 00 00  02 04 00 00 03 08 00 00  |................|\n00000110  04 00 00 00 05 00 00 00  06 00 00 00 07 00 00 00  |................|\n00000120  08 00 00 00 09 00 00 00  0a 00 00 00 0b 00 00 00  |................|\n00000130  0c 00 00 00 0d 00 00 00  0e 00 00 00 0f 00 00 00  |................|\n00000140  10 00 00 00 11 00 00 00  12 00 00 00 13 00 00 00  |................|\n00000150  14 00 00 00 15 00 00 00  16 00 00 00 17 00 00 00  |................|\n00000160  18 00 00 00 19 00 00 00  1a 00 00 00 1b 00 00 00  |................|\n00000170  1c 00 00 00 1d 00 00 00  1e 00 00 00 1f 20 00 00  |............. ..|\n00000180  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000190  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001d0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n</code></pre>"},{"location":"hw/soc/usb-pd/","title":"USB-PD","text":""},{"location":"hw/soc/usb-pd/#introduction","title":"Introduction","text":"<p>Apple uses custom USB-PD messages to control pin muxing on their Type-C ports for debug and other purposes. USB-PD communication takes place over the CCx line of the port (CC1 or CC2 depending on port orientation)</p> <p>Thanks to the t8012dev folks for providing info. See https://web.archive.org/web/20211023034503/https://blog.t8012.dev/ace-part-1/ for reference. The controller on Apple M1 Macs (2020) is the CD3217 \"Ace2\".</p> <p>You should reference the USB-PD spec for background information.</p> <p>Apple uses vendor-specific structured VDM(Vendor Define Message) messages with their USB ID (0x5AC), but they require messages to use the SOP'DEBUG (if originating from the UFP) or SOP''DEBUG (if originating from the DFP) packet start tokens (which are unused in the standard, and some controllers may not be able to send them). The VDM header is of the form 0x5ac8000 | (command).</p> <p>It is recommended to run this protocol acting as a DFP (i.e. a power source), because the Macs will only act as a DFP themselves after the OS has been booted.</p> <p>The following commands are in hex-encoded comma-separated format for easy pasting into vdmtool's serial console. The protocol makes heavy use of 16-bit data units, packed high to low in the 32-bit VDM words, and zero terminated.</p> <p>Command replies use the request command ID | 0x40. The reply to command 0x10 is command 0x50, etc.</p>"},{"location":"hw/soc/usb-pd/#chips","title":"Chips","text":"<ul> <li>CD3215C00 \"ACE1\" - this seems to be a TPS65983 with different ROM/OTP code.</li> <li>CD3217B12 \"ACE2\" - this is probably actual new silicon with some differences, though this is uncertain. Might be equivalent to another TI part. The initial M1 devices all use this part. Firmware organization is somewhat different.</li> </ul>"},{"location":"hw/soc/usb-pd/#ports","title":"Ports","text":"<p>Each port on a Mac may have different VDM support. Debug stuff is usually only supported on one port</p>"},{"location":"hw/soc/usb-pd/#2020-macbook-air-m1","title":"2020 MacBook Air (M1)","text":"<p>The port closest to the edge has all debug stuff.</p>"},{"location":"hw/soc/usb-pd/#2020-mac-mini-m1","title":"2020 Mac Mini (M1)","text":"<p>The leftmost port (closest to the power input) has all the debug stuff.</p>"},{"location":"hw/soc/usb-pd/#2019-16-macbook-pro-macbookpro161-titan-ridge","title":"2019 16\" MacBook Pro (MacBookPro16,1 - Titan Ridge)","text":"<p>The front and rear left ports each report 7 actions.  The rear right port reports 4 actions.  The front right port reports 3 actions.</p>"},{"location":"hw/soc/usb-pd/#2019-13-macbook-pro-macbookpro152-titan-ridge","title":"2019 13\" MacBook Pro (MacBookPro15,2 - Titan Ridge)","text":"<p>The front left port reports 8 actions.  The rear left port reports 5 actions.  The rear right port reports 4 actions.  The front right port reports 3 actions.</p>"},{"location":"hw/soc/usb-pd/#2017-13-macbook-pro-macbookpro142-alpine-ridge","title":"2017 13\" MacBook Pro (MacBookPro14,2 - Alpine Ridge)","text":"<p>The rear left port reports 4 actions.  The front left and front right ports each report 3 actions.  The rear right port reports 2 actions.</p>"},{"location":"hw/soc/usb-pd/#commands","title":"Commands","text":""},{"location":"hw/soc/usb-pd/#0x10-get-action-list","title":"0x10 Get Action List","text":"<p><code>5ac8010</code></p> <p>Each \"action\" is either a thing to do or a signal to mux.</p> <p>Sample response from M1 Mac Mini (2020) left side port:</p> <pre><code>5ac8010\n&gt;VDM 5AC8010\n&lt;VDM RX SOP'DEBUG (7) [704F] 5AC8050 46060606 2060301 3060106 1050303 8030809 1030000\n                             ^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                             vdm hdr action list\n</code></pre> <p>This indicates support for actions 0x4606, 0x606, 0x206, 0x301, 0x306, 0x106, 0x105, 0x303, 0x803, 0x809, 0x103.</p> <p>The MacBookPro16,1 supports actions 0x602, 0x606, 0x601, 0x403, 0x302, 0x501 and 0x301 on the front left port, actions 0x205, 0x206, 0x103, 0x602, 0x302, 0x501 and 0x301 on the rear left port, actions 0xE04, 0x501, 0x301 and 0x302 on the rear right port and actions 0x302, 0x501 and 0x301 on the front right port.</p> <p>The MacBookPro15,2 supports actions 0x207, 0x205, 0x602, 0x606, 0x501, 0x601, 0x301 and 0x302 on the front left port, actions 0x403, 0x602, 0x302, 0x501 and 0x301 on the rear left port, actions 0x501, 0x103, 0x301 and 0x302 on the rear right port and actions 0x302, 0x501 and 0x301 on the front right port.</p> <p>The MacBookPro14,2 supports actions 0x403, 0x602, 0x301 and 0x302 on the rear left port, actions 0x302, 0x205 and 0x301 on the front left port, actions 0x302, 0x802 and 0x301 on the front right port and actions 0x301 and 0x302 on the rear right port.</p>"},{"location":"hw/soc/usb-pd/#0x11-get-action-info","title":"0x11 Get action Info","text":"<p><code>5ac8011,&lt;actionid&gt;</code></p> <p>This returns information on a specific action, in 16-bit short units (zero terminated).</p> <p>For the M1 Mac Mini the following information is returned for each action:</p> <pre><code>Action  Info reply\n4606    0183\n0606    0183\n0206    0187 020C 0318 8001\n0301    0187 020C 0303\n0306    0187 020C 800C\n0106    8001\n0105    8000\n0303    0187 0221 0303 809E 0030 6030 000C\n0803    0187 0221 8001\n0809    0187 0221 8001\n0103    8000\n</code></pre>"},{"location":"hw/soc/usb-pd/#0x12-perform-action","title":"0x12: Perform Action","text":"<p><code>5ac8012,&lt;actionid&gt;[,args]</code></p> <p>Performs or maps a given action to a set of pins.</p> <p><code>actionid</code> contains the action ID in the lower 16 bits, and fields as follows:</p> <pre><code>Bits  Description\n25    If 1 exits the mode, instead of entering it\n24    Persist through soft reset. Seems to do something in DFP mode.\n23    If 1 attempts to exit conflicting modes before entering this one\n22-16 Bit mask of lines to map to this action\n15-0  Action ID\n</code></pre> <p>Sample response:</p> <pre><code>5ac8012,40306\n&gt;VDM 5AC8012 40306\n&lt;VDM RX SOP'DEBUG (5) [504F] 5AC8052 44740000 306 0 0\n                             ^^^^^^^ ^^^^\\------------ pin states\n                             vdm hdr connection/line state \n</code></pre> <ul> <li>Connection/line state: A 16-bit header short (<code>(ConnectionState &lt;&lt; 14) | (LineState[i] &lt;&lt; (2 * i))</code> for i between 0 and 7, exclusive) followed by 7 shorts indicating which action is muxed out of each pin set. ConnectionState can be 0 for disconnected, 1 or 2 for a standard connected device depending on the orientation and 3 for audio and debug connections. LineState is a 2 bit value, which significance is not well known at the moment.</li> <li>Pin states: one action ID per pin pair, in 16-bit shorts.</li> </ul> <p>In this case action 306 is mapped to pin set 2 (the third pin set).</p>"},{"location":"hw/soc/usb-pd/#pin-sets","title":"Pin sets","text":"<p>From 2020 Mac Mini (M1):</p> <ul> <li>0: Secondary D+,D- (USB2 data pair on VCONN side of connector)</li> <li>1: Primary D+,D- (USB2 data pair on CC side of connector). These are not bridged host-side and can bring out different signals, which is a feature unique to debug ports. Cables only have one pair on the CC side!</li> <li>2: SBU1,SBU2</li> <li>3-6: unknown (SSTX/SSRX pairs?)</li> </ul> <p>The pins are automatically adjusted for connector orientation at the Mac side, so the pins will always be the same from the cable side. The device on the other end is responsible for adjusting for orientation on that end.</p>"},{"location":"hw/soc/usb-pd/#actions","title":"Actions","text":""},{"location":"hw/soc/usb-pd/#103-pd-reset","title":"103: PD reset","text":"<p>This needs a 0x8000 argument (taken from the get action info reply).</p> <pre><code>5AC8012,0103,80000000\n&gt;VDM(D) 5AC8012 103 80000000\nDisconnect: cc1=0 cc2=0\nVBUS OFF\nDisconnected\n(PD renegotiation occurs)\n</code></pre>"},{"location":"hw/soc/usb-pd/#105-reboot","title":"105: Reboot","text":"<p>This needs a 0x8000 argument (taken from the get action info reply).</p> <pre><code>5AC8012,0105,80000000\n&gt;VDM(D) 5AC8012 105 80000000\n&lt;VDM RX SOP\"DEBUG (5) [524F] 5AC8052 44740000 306 0 0\nDisconnect: cc1=0 cc2=0\nVBUS OFF\nDisconnected\nS: DISCONNECTED\nIRQ: VBUSOK (VBUS=OFF)\n(device reboots and PD renegotiates)\n</code></pre>"},{"location":"hw/soc/usb-pd/#about-reboot-command","title":"about reboot command","text":"<p>the command \"5AC8012,0105,80000000\" is sent through the Serial Monitor of Arduino IDE. if you want to reboot Mac more conveniently, you can try the following commands:</p> <pre><code>Option 1:\necho \"5AC8012,0105,80000000\" | picocom -c -b 500000 --imap lfcrlf -qrx 1000 /dev/&lt;your Arduino Serial device&gt;\n\nOption 2:\nstty 500000 &lt;/dev/&lt;your Arduino Serial device&gt; \necho &gt; /dev/&lt;your Arduino Serial device&gt; \necho 5AC8012,0105,80000000 &gt; /dev/&lt;your Arduino Serial device&gt; \n</code></pre> <p>However due to the default Arduino operations on Serial port, the above cmds probably will fail, and succeed randomly. It turns out that the following python code works fine by manually reseting Arduino before sending cmd data:</p> <pre><code>import serial\nimport time\nser = serial.Serial(\"/dev/&lt;your Arduino Serial device&gt;\", 500000, dsrdtr=True)\nser.dtr = True\nser.dtr = False\ntime.sleep(0.5)\nser.dtr = True\ntime.sleep(2)\nser.write(b'5AC8012,0105,80000000\\n')\nser.close() \n</code></pre>"},{"location":"hw/soc/usb-pd/#106-dfu-hold-mode","title":"106: DFU / hold mode","text":"<p>This needs a 0x8001 argument (taken from the get action info reply). It only works properly in DFP mode (Mac acting as UFP).</p> <pre><code>5AC8012,0106,80010000\n&gt;VDM(D) 5AC8012 106 80010000\n&lt;VDM RX SOP\"DEBUG (5) [544F] 5AC8052 44740000 306 0 0\n(device reboots in DFU mode, no PD renegotiation occurs)\n</code></pre> <p>This mode is special. On the Mac Mini, a hard shutdown normally disables PD communications and UFP mode (Rd open). However, a hard shutdown from this mode (e.g. holding down the power button) will power down the machine while PD communications remain active. The machine can also be rebooted via 105 into normal mode, and again PD is not reset and existing modes remain active. This can be used to maintain debug connectivity through a machine reset.</p> <p>FIXME: or maybe it's just the persist bit in the header. Needs more tests.</p>"},{"location":"hw/soc/usb-pd/#306-debug-uart","title":"306: Debug UART","text":"<p>Pin order: TX, RX</p> <p>This can be mapped to pin sets 0-2 (D+/D- B, D+/D- A, or SBU1/2). The UART uses 1.2V voltage levels.</p> <pre><code>5AC8012,840306\n&gt;VDM 5AC8012 840306\n&lt;VDM RX SOP'DEBUG (5) [584F] 5AC8052 44740000 306 0 0\n(UART is now mapped to SBU1/2)\n</code></pre> <p>pin 1 is TX and pin 2 is RX, orientation-aware (for CC=CC2 they are flipped). In other words, the SBU pin on the same side of the connector (A or B) as your CC pin is TX.</p>"},{"location":"hw/soc/usb-pd/#606-dfu-usb","title":"606: DFU USB","text":"<p>Pin order: D+, D- (of course)</p> <p>This is automatically mapped to pin set 1 (D+/D- primary) in DFU mode, but can be moved.</p> <p>To move DFU to the other D+/D- set:</p> <pre><code>5AC8012,2020606\n&gt;VDM(D) 5AC8012 2020606\n&lt;VDM RX SOP\"DEBUG (5) [5E4F] 5AC8052 44400000 0 0 0\n5AC8012,810606\n&gt;VDM(D) 5AC8012 810606\n&lt;VDM RX SOP\"DEBUG (5) [504F] 5AC8052 44430606 0 0 0\n(DFU is now on secondary D+/D- pair (pin set 0))\n</code></pre>"},{"location":"hw/soc/usb-pd/#4606-debug-usb","title":"4606: Debug USB","text":"<p>Interesting. This is not main-CPU-driven, it enumerates even when the system is off (in persistent mode). It re-enumerates on power transitions.</p> <pre><code>[277048.498917] usb 1-4.4.3: New USB device found, idVendor=05ac, idProduct=1881, bcdDevice= 1.20\n[277048.498920] usb 1-4.4.3: New USB device strings: Mfr=1, Product=2, SerialNumber=0\n[277048.498921] usb 1-4.4.3: Product: Debug USB\n[277048.498921] usb 1-4.4.3: Manufacturer: Apple Inc.\n</code></pre> lsusb <pre><code>Bus 001 Device 097: ID 05ac:1881 Apple, Inc. Debug USB\nDevice Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               2.00\n  bDeviceClass          255 Vendor Specific Class\n  bDeviceSubClass       255 Vendor Specific Subclass\n  bDeviceProtocol       255 Vendor Specific Protocol\n  bMaxPacketSize0        64\n  idVendor           0x05ac Apple, Inc.\n  idProduct          0x1881 \n  bcdDevice            1.20\n  iManufacturer           1 Apple Inc.\n  iProduct                2 Debug USB\n  iSerial                 0 \n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength       0x0027\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0 \n    bmAttributes         0xc0\n      Self Powered\n    MaxPower              100mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           3\n      bInterfaceClass       255 Vendor Specific Class\n      bInterfaceSubClass    255 Vendor Specific Subclass\n      bInterfaceProtocol    255 Vendor Specific Protocol\n      iInterface              0 \n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x01  EP 1 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0200  1x 512 bytes\n        bInterval               4\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x81  EP 1 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0200  1x 512 bytes\n        bInterval               4\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x82  EP 2 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0200  1x 512 bytes\n        bInterval               4\nDevice Qualifier (for other device speed):\n  bLength                10\n  bDescriptorType         6\n  bcdUSB               2.00\n  bDeviceClass          255 Vendor Specific Class\n  bDeviceSubClass       255 Vendor Specific Subclass\n  bDeviceProtocol       255 Vendor Specific Protocol\n  bMaxPacketSize0        64\n  bNumConfigurations      1\ncan't get debug descriptor: Resource temporarily unavailable\nDevice Status:     0x0001\n  Self Powered\n</code></pre>"},{"location":"hw/soc/usb-pd/#0803-an-i2c-bus-33v","title":"0803: An I\u00b2C bus (3.3V)","text":"<p>Pin order: SCL, SDA</p> <p>Device addresses seen (unshifted): 0x38, 0x3f</p> <p>It doesn't do anything interesting during normal boot, but does in macOS.</p> <p>Also, sometimes it just sends START 00 STOP (no ACK cycle) at slower speed (?)</p>"},{"location":"hw/soc/usb-pd/#0809-another-i2c-bus-33v","title":"0809: Another I\u00b2C bus (3.3V)","text":"<p>Pin order: SCL, SDA</p> <p>Device addresses seen (unshifted): 0x6b, 0x38, 0x3f, </p>"},{"location":"hw/soc/usb-pd/#tbd","title":"TBD","text":"<ul> <li>0206    weak (30k\u03a9) pull to 1.2V, no reaction to gnd, no transitions. Good chance this is SWD.</li> <li>0301    1.2V, one pin drives high, the other no drive. Another UART? high-z in DFU mode, no activity except high pin tracking power/boots.</li> <li>0303    Only maps to pinsets 1-2? Seems to be GND? No transitions seen. Unused UART mode?</li> </ul>"},{"location":"hw/soc/wdt/","title":"Watchdog Timer (WDT)","text":"<p>The M1 includes a watchdog timer which can reboot the system automatically in case the kernel fails to boot or run properly. It can also be (ab)used to trigger an immediate or delayed reboot in other circumstances.</p> <p>The initial macho (usually m1n1) is booted with the watchdog timer enabled, so if it does nothing to it, the system will automatically reboot after a while.</p> <p>There's a 24MHz 32-bit timer at 0x23d2b0000+0x10, a compare value at 0x23d2b0000+0x14 (initially set to 120 seconds), and a control register at 0x23d2b0000+0x1c. When the timer exceeds or equals the compare value, and bit 0x04 in the control register is set, a reboot is triggered.</p> <p>The WDT is disabled by writing 0 to +0x1c, and enabled by writing 4 to +0x1c.</p> <p>Since the counters are 32-bit values and wrap, that means the maximum timeout is just short of three minutes.</p> <p>Registers 0x23d2b0000+0x0/0x4/0xc and 0x23d2b0000+0x20/0x24/0x2c seem to work like +0x10,+0x14,0x1c, but trigger a reboot into recovery mode instead.</p>"},{"location":"platform/dev-quickstart/","title":"Developer Quickstart Guide","text":""},{"location":"platform/dev-quickstart/#this-guide-is-largely-obsolete","title":"THIS GUIDE IS LARGELY OBSOLETE","text":"<p>This guide documents a manual installation process that is only required for kernel developers doing reverse engineering of macOS drivers using the m1n1 hypervisor.</p> <p>If you are a more typical developer and you want to help work on the kernel or just experiment with the platform, and are happy doing tethered boots via USB (uploading the kernel from another machine), have a look [over here][../sw/tethered-boot.md].</p> <p>If you are an end user or you would otherwise like to set up a stand-alone install, stop now. It isn't ready yet. It will be soon. Just hang tight.</p>"},{"location":"platform/dev-quickstart/#developer-quick-start-guide","title":"Developer Quick Start Guide","text":"<p>So you want to help us bring Linux to M1 Macs? Read on! This guide describes the recommended set-up for developing for Linux on an M1.</p> <p>This guide is meant for developers who want to hack on Asahi Linux. It is not representative of what the install process for end-users will look like. It is meant for experienced Linux developers who may not know anything about Macs or M1 machines.</p> <p>It is extremely unlikely that you will damage your computer by following these steps, but we can make no guarantees at this time. Please proceed at your own risk.</p> <p>For a quick idea of the steps that might be involved see this very succinct summary of steps. Obviously things are moving quickly so details will have changed in practise</p>"},{"location":"platform/dev-quickstart/#introduction","title":"Introduction","text":""},{"location":"platform/dev-quickstart/#objective","title":"Objective","text":"<p>We will be setting up a dual-boot M1 computer with two OSes: a vanilla macOS install (optionally with reduced/permissive security), and a \"stub\" macOS install with permissive security that will serve as a boot wrapper for Linux (or anything else we want to run through m1n1). You will also learn about what options are available to get a hardware serial console.</p>"},{"location":"platform/dev-quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>An Apple M1 machine      We recommend the Mac Mini as a baseline target. </p> <ul> <li>Mac Mini: Does not require Type C power, has additional on-board PCIe hardware (Ethernet &amp; xHCI for type A ports). Requires an HDMI monitor.</li> <li>MacBook Air: USB via DWC3/Type-C only. Built-in screen. SPI keyboard. Requires Type C power for charging.</li> <li>MacBook Pro: Like the Air, but with a Touch Bar replacing the F keys, which means your keyboard will be crippled until the drivers for that are written.</li> </ul> </li> <li> <p>macOS installed on the machine (we assume you will start from a stock configuration with a single macOS partition)</p> <ul> <li>No FileVault (encryption). This will complicate things and is not tested.</li> </ul> </li> <li> <p>A Linux development machine (any architecture)</p> <ul> <li>If not arm64: an <code>aarch64-linux-gnu</code> gcc crosscompiler/toolchain (clang is also supported to build m1n1 but less tested).</li> </ul> </li> </ul> <p>Highly recommended:</p> <ul> <li>A serial port solution. Read on for that.</li> </ul>"},{"location":"platform/dev-quickstart/#tldr-on-m1-mac-boot","title":"TL;DR on M1 Mac Boot","text":"<p>Storage: the internal SSD is a GPT partitioned disk containing (initially) APFS containers, each of which contains multiple APFS volumes.</p> <p>The boot process:</p> <ol> <li>SecureROM (Boot ROM) in M1 silicon starts<ul> <li>Either enters DFU mode (USB recovery) or</li> <li>Boots iBoot1 from NOR (SPI) flash</li> </ul> </li> <li>iBoot1 (global) looks for boot policies in iSC Preboot and tries to boot the active one from its OS APFS Preboot volume (as defined in NVRAM)<ul> <li>If the power button is held down, boots 1TR instead</li> <li>This is what initializes the screen and shows the Apple logo</li> </ul> </li> <li>iBoot2 (per-OS copy; ~= OS loader) boots the OS<ul> <li>Loads auxiliary CPU engine firmwares from OS APFS Preboot partition</li> <li>Then loads a mach-o kernel wrapped in an img4 container from the Preboot partition</li> <li>This is in charge of adjusting and passing in the ADT (Apple Device Tree)</li> </ul> </li> <li>The OS kernel (XNU/Darwin) boots<ul> <li>Mounts the root filesystem, etc</li> </ul> </li> </ol> <p>Read Boot and PC Boot Process Differences for more info.</p> <p>Mini glossary:</p> <ul> <li>1TR: One True Recovery: trusted system-level recovery, includes all boot user interaction too (boot picker). Lives in its own APFS container (last partition).</li> <li>APFS: Apple's fancypants filesystem<ul> <li>APFS Container: ~= ZFS pool (usually backed by a GPT partition)</li> <li>APFS Volume: ~= ZFS dataset</li> <li>APFS Snapshot: ~= ZFS snapshot</li> </ul> </li> <li>AP Ticket: signed blob from Apple that allows you to run a given macOS version on a specific machine. \"macOS version\" ~= iBoot2 &amp; firmware bundles. \"Generic\" ones available for use with reduced-security modes (i.e. no phone home requirement in that case).</li> <li>Boot Policy: declares an OS bootable on a given machine. Signed and validated by SEP (locally). Stored in iSC.</li> <li>iBoot1: First stage bootloader, finds an OS to boot</li> <li>iBoot2: Second stage bootloader, spins up on-die auxiliary core firmwares and boots the XNU kernel (or m1n1)</li> <li>iSC: iBoot System Container, APFS container with boot configs/stuff</li> <li>kernelcache: kernel + kexts blob (~=linux + initramfs containing modules)</li> <li>kext: kernel module</li> <li>NOR: SPI NOR Flash on board containing iBoot1, product customization data, nvram</li> <li>SecureROM: Boot ROM on the M1 silicon die</li> <li>SEP: Secure Enclave Processor ~= TPM or Secure Monitor in other platforms (it's a separate core here).</li> <li>SFR: System Firmware and Recovery (iBoot1 + iSC partition + 1TR partition). Downgrade protected.</li> <li>Startup Security modes<ul> <li>Full Security: Full secureboot, no non-Apple software can run except for signed &amp; ad-hoc userspace binaries under macOS if allowed by the user, enforces AP tickets (no macOS downgrades).</li> <li>Reduced Security: Allows third-party kexts, management, etc.</li> <li>Permissive Security: Allows unsigned kernels (this is what we want).</li> </ul> </li> <li>XNU: the base of Darwin, the macOS kernel</li> </ul> <p>Notes:</p> <ul> <li>M1 machines do not support any bootloader-level user interaction or keyboard shortcuts or anything.<ul> <li>The only thing iBoot1 can see is whether you're holding down the power button or not.</li> <li>The \"boot picker\" is a macOS application running under 1TR. Yes, really.</li> </ul> </li> <li>M1 machines cannot boot from external storage.<ul> <li>Picking an external disk in the boot picker will copy its entire Preboot partition to the iSC and generate a boot policy. This is morally equivalent to having the entire /boot on Linux on internal storage. These machines cannot boot macOS kernels from external storage, ever, at least using current firmware.</li> </ul> </li> </ul>"},{"location":"platform/dev-quickstart/#further-reading","title":"Further Reading","text":"<ul> <li>Glossary</li> <li>Boot</li> <li>PC Boot Process Differences</li> <li>NVRAM</li> <li>Stock Partition Layout</li> </ul>"},{"location":"platform/dev-quickstart/#if-things-go-wrong","title":"If things go wrong","text":"<p>M1 Macs are effectively unbrickable as long as you do not write to SPI Flash (we highly discourage declaring the NOR Flash in the Linux devicetree: we are not aware of any reason to touch it at this point, so all it does is massively increase the risk of catastrophe; we will proceed with caution and safeguards if it ever becomes necessary to access directly). However, they do rely on software installed on the internal SSD storage to boot normally and into 1TR.</p> <p>If you end up with your Mac in an unbootable state, follow apple's DFU recovery instructions. You will need another Mac running macOS to perform this process (Intel ones are fine). This should not happen if you follow the steps on this guide normally, but may happen if you end up accidentally writing to internal storage incorrectly (e.g. wiping the entire block device or screwing up the GPT partition table).</p> <p>Eventually, it should be possible to use idevicerestore to perform this same process from a Linux machine, but this isn't ready yet.</p> <p>While DFU boot works with a totally corrupted NOR flash, vital product identification and calibration data is stored there and you cannot restore this without Apple's help; you will have to send the machine in for repairs so they can re-provision its identity and run manufacturing testing and calibration. So, stay away from touching NOR flash.</p>"},{"location":"platform/dev-quickstart/#setup","title":"Setup","text":""},{"location":"platform/dev-quickstart/#step-0-upgrade-macos","title":"Step 0: Upgrade macOS","text":"<p>You need at least macOS 11.2. Don't bother with older versions, they won't work.</p> <p>You will need to have gone through the macOS first-setup, including having created an administrator user with a password.</p>"},{"location":"platform/dev-quickstart/#step-1-partitioning","title":"Step 1: Partitioning","text":"<p>You are starting here:</p> <ul> <li>disk0s1: iBoot System Container</li> <li>disk0s2: Macintosh HD (OS #1 APFS container)</li> <li>disk0s3: 1TR (One True Recovery OS)</li> </ul> <p>We want to get here:</p> <ul> <li>disk0s1: iBoot System Container</li> <li>disk0s2: Macintosh HD (OS #1 macOS APFS container)</li> <li>disk0s3: Linux (OS #2 \"fake macOS\" APFS container)</li> <li>disk0s4: Linux /boot (FAT32)</li> <li>disk0s5: Linux / (ext4)</li> <li>disk0s6: 1TR (One True Recovery OS)</li> </ul> <p>Note that storage is not yet supported in our tree or bootloader, but we are targeting this partition layout a priori. disk0s3 will be our \"stub\" macOS, which at this time will be used to hold a full macOS install (eventually we will provide tooling to allow this to be a minimal partition containing only boot files, to avoid wasted space, but this is not ready yet).</p> <p>Assuming you have a 500GB model, follow these commands (note that your machine may freeze for several minutes while these commands are running):</p> <pre><code># diskutil apfs resizeContainer disk0s2 200GB\n# diskutil addPartition disk0s2 APFS Linux 80GB\n# diskutil addPartition disk0s5 FAT32 LB 1GB\n# diskutil addPartition disk0s4 FAT32 LR 0\n</code></pre> <p>You need at least 80GB for the stub partition, because the macOS install/update process is very inefficient. This will not be necessary in the future, once we have our own setup process.</p> <p>Shrinking the OS APFS partition can be done on-line.</p> <p>Each invocation of <code>diskutil addPartition</code> needs to be passed the partition node of the partition prior to the new partition to be created. This can vary, so run <code>diskutil list</code> prior to every instance and pick the device name of the last created partition. In the example above, <code>Linux</code> ended up as disk0s5 and <code>LB</code> ended up as disk0s4. Go figure. This gets reset after a reboot.</p> <p>The volume name of the stub partition will determine the OS name in the boot picker, so call it \"Linux\".</p> <p>We can change the FS and GPT type of the true Linux root and boot partitions later.</p>"},{"location":"platform/dev-quickstart/#step-2-install-macos-in-the-stub-partition","title":"Step 2: Install macOS in the stub partition","text":"<p>Shut down the machine. Boot with the power button held down, until \"Loading startup options...\" appears. This enters 1TR, the OS recovery environment.</p> <p>Select \"Options\" in the boot picker. You may be prompted to enter your credentials. These are the login credential for the main macOS installation.</p> <p>In the main recovery menu, select \"Reinstall macOS Big Sur\".</p> <p>Follow the prompts, and select \"Linux\" as the target volume.</p> <p>Wait a while. This will reboot the machine into the new OS automatically.</p>"},{"location":"platform/dev-quickstart/#step-3-go-through-initial-setup","title":"Step 3: Go through initial setup","text":"<p>Go through OS first-time setup. Create an administrator user and password.</p> <p>Check the OS version. If it is not 11.2, you should update to at least this version.</p> <p>Shut down the machine again.</p>"},{"location":"platform/dev-quickstart/#step-4-downgrade-security","title":"Step 4: Downgrade security","text":"<p>Boot into 1TR again (\"Options\" entry in the boot picker).</p> <p>In the top menu bar, go to Utilities \u2192 Terminal. This brings up a root shell.</p> <p>Find the volume group ID of your stub partition:</p> <pre><code># diskutil apfs listVolumeGroups | grep -B3 Linux | grep Group\n</code></pre> <p>Then downgrade security:</p> <pre><code># bputil -nkcas\n</code></pre> <p>Select the matching OS install ID, and follow the prompts. You will need to enter the credentials that you created in step 3.</p> <p>Further disable SIP for good measure. This one is nice enough to ask you to pick the OS by name:</p> <pre><code># csrutil disable\n</code></pre> <p>Note: If you get strange permission errors such as <code>Failed to create local policy</code> you may have to reset the system security policy first via</p> <pre><code># csrutil clear\n</code></pre> <p>At this point you are ready to use custom kernels. Congrats!</p>"},{"location":"platform/dev-quickstart/#getting-a-serial-console","title":"Getting a serial console","text":"<p>Having a serial console is indispensable for a fast development cycle and to debug low-level issues.</p> <p>M1 Macs expose their debug serial port over one of their Type C ports (the same one used for DFU). On MacBooks, this is the rear left port. On the Mac Mini, this is the port closest to the power plug.</p> <p>The target machine can also be hard-rebooted using USB-PD VDM commands, making for a quick test cycle (no holding down power buttons).</p> <p>See USB-PD for details on the USB-PD VDM commands and what you can do with them.</p> <p>The serial port is a UART using 1.2V logic levels, and requires vendor-specific USB-PD VDM commands to enable. Thus, making a compatible cable is nontrivial. You have the following options.</p>"},{"location":"platform/dev-quickstart/#using-an-m1-machine","title":"Using an M1 machine","text":"<p>If you have two M1 boxes, this is the simplest solution. Just grab macvdmtool, connect both machines with a standard Type C SuperSpeed cable using the DFU port on both machines, and that's it!</p> <p>IMPORTANT NOTE: The cable needs to be the USB 3 / SuperSpeed type. USB 2 only cables won't work, the charging cable that comes with the MacBook/MacBook Air will not work and neither will most other cheap cables or cables marketed for their charging capacity. If it doesn't say \"SuperSpeed\" or \"USB3.0\" in the package it almost certainly won't work. If it's thin and bendy it is almost certainly not a SuperSpeed cable. Cables that work need to have upwards of 15 wires inside them; if it doesn't feel like it could possibly have that many wires inside, it is not the cable you need. If you are sure your cable is SuperSpeed capable (i.e. devices do enumerate as SuperSpeed through it) and it still doesn't work, then it is non-compliant and the manufacturer deserves to be shamed on their Amazon reviews page, because it means they didn't connect the SBU1/2 pins.</p> <pre><code>$ xcode-select --install\n$ git clone https://github.com/AsahiLinux/macvdmtool\n$ cd macvdmtool\n$ make\n$ sudo ./macvdmtool reboot serial\n</code></pre> <p>You should see something like this:</p> <pre><code>Mac type: J313AP\nLooking for HPM devices...\nFound: IOService:/AppleARMPE/arm-io@10F00000/AppleT810xIO/i2c0@35010000/AppleS5L8940XI2CController/hpmBusManager@6B/AppleHPMBusController/hpm0/AppleHPMARM\nConnection: Sink\nStatus: APP \nUnlocking... OK\nEntering DBMa mode... Status: DBMa\nRebooting target into normal mode... OK\nWaiting for connection........ Connected\nPutting target into serial mode... OK\nPutting local end into serial mode... OK\nExiting DBMa mode... OK\n</code></pre> <p>See the macvdmtool page or just run it without arguments for a list of supported commands. Your serial port device is <code>/dev/cu.debug-console</code>. You can try picocom with: <code>sudo picocom -q --omap crlf --imap lfcrlf -b 115200 /dev/tty.debug-console</code>.</p> <p>NOTE: if you have enabled serial debug output on your host machine (via nvram settings), the serial port device will be in use by the kernel. You need to turn that off to use it as a generic serial port.</p>"},{"location":"platform/dev-quickstart/#diy-arduino-based-usb-pd-interface","title":"DIY Arduino-based USB-PD interface","text":"<p>You can build a DIY USB-PD interface with the following parts:</p> <ul> <li>An Arduino or clone</li> <li>An FUSB302 chip, either stand-alone or on a breakout board</li> <li>A USB Type C breakout board (get a male one, plugging in directly into the target, for the most flexibility)</li> <li>A 1.2V compatible UART interface</li> </ul> <p>Note that most FUSB302 breakout boards will not usefully break out the Type C pins you need, so it's best to use a separate full breakout board.</p> <p>Go to the vdmtool repository for more information and a wiring list. Documentation is a bit sparse at the moment. You can ask us on IRC (OFTC/#asahi) if you need help.</p> <p>1.2V compatible UART interfaces are relatively rare. 1.8V ones will usually work for input (RX); you can use a resistor divider to step down the TX voltage (<code>TX -- 470\u03a9 -+- 220\u03a9 -- GND</code> will step down 1.8V TX to 1.22V at the <code>+</code> point).</p> <p>The default <code>vdmtool</code> code will put serial on the SBU1/SBU2 pins. At the device side connector (no cable), TX (output from the Mac) will be on the SBU1 pin on the connector side that has the active CC line (you should only connect one), and RX (input to the Mac) will be directly opposite the CC line.</p> <p>This is all rather rudimentary because it's a stop-gap for the proper solution, which is...</p>"},{"location":"platform/dev-quickstart/#flexible-usb-pd-debug-interface-project-name-tbd","title":"Flexible USB-PD Debug Interface (project name TBD)","text":"<p>In the coming weeks we'll be designing an open hardware interface for interfacing to M1 serial ports, and more (supporting other debug pinsets on Apple devices, as well as UARTs on other devices such as certain Android phones, etc). Stay tuned for more information. Established kernel developers who want to get an early prototype when they become available should contact marcan.</p>"},{"location":"platform/dev-quickstart/#usb-gadget-mode-using-a-standard-usb-cable","title":"USB gadget mode using a standard USB cable","text":"<p>m1n1 now supports exposing its debug console and proxy interface via a standard USB CDC-ACM device. All you need is a standard USB cable (C to C or A to C, as appropriate for your host machine). </p> <p>This interface is much faster than a serial port, and is the preferred way of using m1n1 remotely. However, a serial console is still recommended in addition to this for low-level debugging and development.</p> <p>After booting m1n1, you will now see two CDC-ACM device appear (e.g. as <code>/dev/ttyACM0</code> and <code>/dev/ttyACM1</code> on Linux or <code>/dev/tty.usbmodemP_01</code> and <code>/dev/tty.usbmodemP_03</code> on macOS):</p> <pre><code>[977820.091168] usb 2-2: USB disconnect, device number 95\n[977820.832569] usb 2-2: new high-speed USB device number 96 using xhci_hcd\n[977821.069287] usb 2-2: New USB device found, idVendor=1209, idProduct=316d, bcdDevice= 1.00\n[977821.069296] usb 2-2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[977821.069300] usb 2-2: Product: m1n1 uartproxy da44067\n[977821.069303] usb 2-2: Manufacturer: Asahi Linux\n[977821.069305] usb 2-2: SerialNumber: P-0\n[977821.070574] cdc_acm 2-2:1.0: ttyACM0: USB ACM device\n[977821.070825] probe of 2-2:1.0 returned 1 after 323 usecs\n[977821.071036] cdc_acm 2-2:1.2: ttyACM1: USB ACM device\n[977821.071099] probe of 0000:00:02.0 returned 0 after 19 usecs\n[977821.071262] probe of 2-2:1.2 returned 1 after 284 usecs\n[977821.071375] probe of 2-2 returned 1 after 1838 usecs\n[977821.071428] probe of 0000:00:02.0 returned 0 after 9 usecs\n</code></pre> <p>When running the python proxyclient commands <code>proxyclient/tools/{shell,chainload,linux}.py</code> as described below (N.B.: see below for python version and installation requirements) you must specify the USB ACM serial device. e.g. for <code>shell.py</code>:</p> <pre><code>$ M1N1DEVICE=/dev/ttyACM0\n$ export M1N1DEVICE\n$ python3 proxyclient/tools/shell.py\n</code></pre> <pre><code>* Can start up a terminal program on the 2nd tty which linux console output can be made to go to\n</code></pre> <pre><code>picocom /dev/ttyACM1\n</code></pre> <p>Note that this method cannot (yet) be used as an earlycon for Linux, and USB gadget support is not yet in our main Linux tree either.</p> <ul> <li>See Running Linux via USB cable for some more details</li> </ul>"},{"location":"platform/dev-quickstart/#using-m1n1","title":"Using m1n1","text":"<p>m1n1 is our initial bootloader, which is in charge of pretending to be a XNU kernel and performing Apple-specific initialization.</p> <p>Currently, m1n1 works as a serial \"proxy\" server, controlled via Python scripts from a host. In this way, you can load kernels via serial or USB and also explore the hardware interactively, with a Python console.</p>"},{"location":"platform/dev-quickstart/#debian-build-dependencies","title":"Debian build dependencies","text":"<pre><code>$ sudo apt install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross device-tree-compiler imagemagick\n</code></pre> <p>To run the python proxy clients you need a newer version of python3 than default - 3.9 works * Download latest stable (3.9.5) [16-May-2021] and build Building latest python on Debian 10 * Install the various packages required as user a normal user</p> <pre><code>python3.9 -m pip install pyserial construct serial.tool\n</code></pre>"},{"location":"platform/dev-quickstart/#building","title":"Building","text":"<p>You need an <code>aarch64-linux-gnu-gcc</code> cross-compiler toolchain (or a native one, if running on ARM64). You also need <code>dtc</code> (the devicetree compiler) and <code>convert</code> (from ImageMagick) for the boot logos.</p> <pre><code>$ git clone --recursive https://github.com/AsahiLinux/m1n1.git\n$ cd m1n1\n$ make\n</code></pre> <p>The output will be in <code>build/m1n1.macho</code>.</p>"},{"location":"platform/dev-quickstart/#installation","title":"Installation","text":"<p>Boot your Mac into 1TR, then pull up the terminal. You can use the network to copy files over - either SSH from the Mac or just use curl.</p> <p>For example, on your build machine:</p> <pre><code>$ cd m1n1/build\n$ python3 -m http.server\n</code></pre> <p>And on your target machine:</p> <pre><code># curl buildmachine.lan:8000/m1n1.macho &gt; m1n1.macho\n</code></pre> <p>To install m1n1 into the stub partition as a custom kernelcache:</p> <pre><code># kmutil configure-boot -c m1n1.macho -C -v /Volumes/Linux\n</code></pre> <p>Type in your credentials. If everything went well, you can restart and boot into m1n1!</p> <p>If you ever need to boot the stub partition back into macOS afterwards, enter 1TR again, open the Terminal, get the partition ID, and run:</p> <pre><code># bputil -n\n</code></pre>"},{"location":"platform/dev-quickstart/#direct-payload-booting","title":"Direct payload booting","text":"<p>m1n1 supports running payloads embedded directly in the binary. This allows you to boot Linux (or a subsequent bootloader stage) without the need for serial interaction. Currently, debug output is over serial only; framebuffer debug console support is coming soon.</p> <p>To merge m1n1 with payloads, just concatenate them:</p> <pre><code>$ cat build/m1n1.macho Image.gz build/dtb/apple-j274.dtb initramfs.cpio.gz &gt; m1n1-payload.macho\n</code></pre> <p>Note: M1N1 is now checking the model read from the Hw versus the one in the device tree(dtb file) and will not execute the payload if they are not matching. See payload_run in src/payload.c. j274 stands for MacMini Hw model.</p> <p>The maximum cumulative payload size is currently 64 MiB. You can change this at the top of <code>m1n1.ld</code> if you need more. Bear in mind this incurs a fixed runtime memory cost when using m1n1 interactively, even with no payload (though this memory can be reclaimed by the next stage), and chainloading m1n1 will currently \"waste\" this memory (the next iteration is loaded above this region and cannot use memory \"under\" it).</p> <p>Supported payload file formats:</p> <ul> <li>Linux ARM64 kernel images (or compatible). Must be compressed or last payload.</li> <li>Devicetree blobs (FDT). May be uncompressed or compressed.</li> <li>Initramfs cpio images. Must be compressed.</li> </ul> <p>Supported compression formats:</p> <ul> <li>gzip</li> <li>xz</li> </ul>"},{"location":"platform/dev-quickstart/#host-setup","title":"Host setup","text":"<p>m1n1 currently requires a serial console for interactive usage or to get debug info. Go to the getting a serial console section to learn more about available options.</p> <p>NOTE(2021-02-06): we will add a framebuffer console to make debugging easier without serial soon. USB OTG support is also planned in the future, so you will be able to interact with m1n1 with a standard USB C cable and load kernels faster.</p> <p>To use the m1n1 proxyclient, you need the Python packages <code>pyserial</code> and <code>construct</code>. If your distribution does not provide them for you, you can use:</p> <pre><code>$ pip install --user pyserial construct\n</code></pre> <p>If you are on macOS, install python3.9 using Homebrew. The OS version of Python has problems with readline history files (?):</p> <pre><code>$ arch -x86_64 brew install python\n$ pip3.9 install --user pyserial construct\n</code></pre> <p>You can also use macports to install python and pip and then install the dependencies using pip as root. Macports has a native build for M1.</p> <pre><code>$ sudo su -\n$ port install python39 py39-pip\n$ pip install pyserial construct\n</code></pre>"},{"location":"platform/dev-quickstart/#usage","title":"Usage","text":"<p>To use the proxyclient scripts, you need to set the envar <code>M1N1DEVICE</code> to your serial port device. When using another M1 mac as the host, use <code>export M1N1DEVICE=/dev/cu.debug-console</code>. For a Linux host connecting via USB, use something like <code>export M1N1DEVICE=/dev/ttyACM0</code>.</p> <p>Things to do:</p>"},{"location":"platform/dev-quickstart/#playground-shell","title":"Playground shell","text":"<p>Run <code>python shell.py</code> for an interactive debug shell.</p> <pre><code>&gt;&gt;&gt; read32(0x800000000) # Read the first word of RAM\n0x484f6666\n&gt;&gt;&gt; memset32(fb, 0x000003ff, 1920 * 1080 * 4) # turn the framebuffer blue\n&gt;&gt;&gt; mrs(HCR_EL2) # only some registers supported, feel free to add more in utils.py\n0x30488000000\n&gt;&gt;&gt; d = readmem(base, 0x10) # read and hexdump the first 16 bytes of m1n1 (mach-o header)\n&gt;&gt;&gt; chexdump(d)\n00000000  cf fa ed fe 0c 00 00 01  02 00 00 00 0c 00 00 00  |................|\n# allocate a buffer, read the AIC registers, and dump them\n# using a buffer is recommended for registers because `readmem` will read\n# byte-by-byte twice and complain if the data changes (checksum).\n&gt;&gt;&gt; AIC = 0x23b100000\n&gt;&gt;&gt; data = malloc(0x8000) # this is python-side malloc, allocs vanish when the script exits\n&gt;&gt;&gt; memcpy32(data, AIC, 0x8000)\n&gt;&gt;&gt; chexdump32(d)\n00000000  00000007 000a0380 00180018 00000000 e0477971 00000000 000000f0 00000000\n00000020  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n00000040  *\n00003320  00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000\n[...]\n&gt;&gt;&gt; u.msr(DAIF, u.mrs(DAIF) &amp; ~0x3c0) # Enable IRQs\n&gt;&gt;&gt; mon.add(AIC, 0x8000) # Monitor the AIC registers\n[...]\n&gt;&gt;&gt; write32(AIC + 0x2008, 1) # Fire off an IPI to ourselves\nTTY&gt; Exception: IRQ          # These debug messages are from m1n1's IRQ handler\nTTY&gt;  type: 4 num: 1\n# Then the register monitor prints changed registers automatically,\n# with color coding we can't show here \n000000023b100020 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 \n000000023b102000 00000000 00000000 00000001 00000001 00000000 00000000 00000000 00000000 \n000000023b102020 00000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 \n000000023b105000 00000000 00000000 00000001 00000001 00000000 00000000 00000000 00000000 \n[...]\n# There is support for recovering from simple faults\n&gt;&gt;&gt; read64(0)\nTTY&gt; Exception: SYNC\nTTY&gt; Running in EL2\nTTY&gt; MPIDR: 0x80000000\nTTY&gt; Registers: (@0x81368bde0)\nTTY&gt;   x0-x3: 0000000000000000 000000081360c004 0000000000000002 000000081360c004\nTTY&gt;   x4-x7: 000000081368bfa8 0000000000007a69 000000081360c004 0000000000000000\nTTY&gt;  x8-x11: 0000000000000000 0000000000000000 0000000000000000 00000000aaaaaaab\nTTY&gt; x12-x15: 000000000000002c 00000008135b5488 000000081368bb80 0000000000000000\nTTY&gt; x16-x19: 00000008135aaabc 0000000000000000 0000000000000000 000000081368bf88\nTTY&gt; x20-x23: 000000081368bfb0 0000000813608000 0000000000000000 0000000002aa55ff\nTTY&gt; x24-x27: 0000000003aa55ff 000000081360c000 0000000001aa55ff 000000081368bfb0\nTTY&gt; x28-x30: 0000000000000000 000000081368bee0 00000008135abb98\nTTY&gt; PC:       0x8135aaa9c (rel: 0xaa9c)\nTTY&gt; SPSEL:    0x1\nTTY&gt; SP:       0x81368bee0\nTTY&gt; SPSR_EL2: 0x80000009\nTTY&gt; FAR_EL2:  0x0\nTTY&gt; ESR_EL2:  0x96000018 (data abort (current))\nTTY&gt; L2C_ERR_STS: 0x11000ffc00000080\nTTY&gt; L2C_ERR_ADR: 0x300000000000000\nTTY&gt; L2C_ERR_INF: 0x1\nTTY&gt; SYS_E_LSU_ERR_STS: 0x0\nTTY&gt; SYS_E_FED_ERR_STS: 0x0\nTTY&gt; SYS_E_MMU_ERR_STS: 0x0\nTTY&gt; Recovering from exception (ELR=0x8135aaaa0)\n0xacce5515abad1dea\n</code></pre> <p>Note: If you get an error that says <code>proxy.ProxyCommandError: Reply error: Bad Command</code> you most likely need to upgrade the m1n1 on the M1. A quick way around this is to just upload the newest m1n1.macho via the chainload.py as described below:</p>"},{"location":"platform/dev-quickstart/#loading-another-m1n1","title":"Loading another m1n1","text":"<p>Useful to test changes without using <code>kmutil</code> again.</p> <pre><code>$ python chainload.py ../build/m1n1.macho \nBase at: 0x803c5c000\nFB at: 0x9e0df8000\nLoading 442368 bytes to 0x812ce0000\n....................................................\nJumping to 0x812ce4800\nTTY&gt; m1n1\nTTY&gt; sc: Initializing\nTTY&gt; CPU init... CPU: M1 Icestorm\n[...]\nTTY&gt; m1n1 vf14489f\nTTY&gt; Copyright (C) 2021 The Asahi Linux Contributors\nTTY&gt; Licensed under the MIT license\n[...]\nProxy is alive again\n</code></pre>"},{"location":"platform/dev-quickstart/#boot-a-linux-kernel","title":"Boot a Linux kernel","text":"<p>This is what you're here for, right? :-). See Linux Bringup for full instructions.</p> <pre><code>$ python linux.py -b 'earlycon console=ttySAC0,1500000 console=tty0 debug' Image.gz apple-j274.dtb initramfs.cpio.gz\n</code></pre> <p>If you are using USB to talk to m1n1 but would like to get a serial console to Linux, use the <code>--tty</code> argument. For example, to use <code>/dev/ttyACM0</code> for m1n1 and <code>/dev/ttyUSB0</code> for Linux, use:</p> <pre><code>$ export M1N1DEVICE=/dev/ttyACM0\n$ python linux.py --tty /dev/ttyUSB0 -b 'earlycon console=ttySAC0,1500000 console=tty0 debug' Image.gz apple-j274.dtb initramfs.cpio.gz\n</code></pre> sample boot log <pre><code>Base at: 0x815300000\nFB at: 0x9e0df8000\nLoading 2046483 bytes to 0x8214fc000..0x8216efa13...\n..........................................................................................................................................................................................................................................................\nLoading DTB to 0x8216efa40...\nKernel_base: 0x821800000\nLoading 953623 initramfs bytes to 0x821700000...\n.....................................................................................................................\nTTY&gt; Starting secondary CPUs...\nTTY&gt; Starting CPU 1 (0:1)... OK\nTTY&gt;   Stack base: 0x8153ac040\nTTY&gt;   MPIDR: 0x80000001\nTTY&gt;   CPU: M1 Icestorm\nTTY&gt;   Index: 1 (table: 0x8153c4080)\nTTY&gt; \nTTY&gt; Starting CPU 2 (0:2)... OK\nTTY&gt;   Stack base: 0x8153b0040\nTTY&gt;   MPIDR: 0x80000002\nTTY&gt;   CPU: M1 Icestorm\nTTY&gt;   Index: 2 (table: 0x8153c40c0)\nTTY&gt; \nTTY&gt; Starting CPU 3 (0:3)... OK\nTTY&gt;   Stack base: 0x8153b4040\nTTY&gt;   MPIDR: 0x80000003\nTTY&gt;   CPU: M1 Icestorm\nTTY&gt;   Index: 3 (table: 0x8153c4100)\nTTY&gt; \nTTY&gt; Starting CPU 4 (1:0)... OK\nTTY&gt;   Stack base: 0x8153b8040\nTTY&gt;   MPIDR: 0x80010100\nTTY&gt;   CPU: M1 Firestorm\nTTY&gt;   Index: 4 (table: 0x8153c4140)\nTTY&gt; \nTTY&gt; Starting CPU 5 (1:1)... OK\nTTY&gt;   Stack base: 0x8153bc040\nTTY&gt;   MPIDR: 0x80010101\nTTY&gt;   CPU: M1 Firestorm\nTTY&gt;   Index: 5 (table: 0x8153c4180)\nTTY&gt; \nTTY&gt; Starting CPU 6 (1:2)... OK\nTTY&gt;   Stack base: 0x8153c0040\nTTY&gt;   MPIDR: 0x80010102\nTTY&gt;   CPU: M1 Firestorm\nTTY&gt;   Index: 6 (table: 0x8153c41c0)\nTTY&gt; \nTTY&gt; Starting CPU 7 (1:3)... OK\nTTY&gt;   Stack base: 0x8153c4040\nTTY&gt;   MPIDR: 0x80010103\nTTY&gt;   CPU: M1 Firestorm\nTTY&gt;   Index: 7 (table: 0x8153c4200)\nTTY&gt; \nTTY&gt; FDT: initrd at 0x821700000 size 0xe8d17\nTTY&gt; FDT: framebuffer@9e0df8000 base 0x9e0df8000 size 0x7e9000\nTTY&gt; FDT: DRAM at 0x800000000 size 0x200000000\nTTY&gt; FDT: Usable memory is 0x80134c000..0x9db5e0000 (0x1da294000)\nTTY&gt; FDT: CPU 0 MPIDR=0x0 release-addr=0x8153c4050\nTTY&gt; FDT: CPU 1 MPIDR=0x1 release-addr=0x8153c4090\nTTY&gt; FDT: CPU 2 MPIDR=0x2 release-addr=0x8153c40d0\nTTY&gt; FDT: CPU 3 MPIDR=0x3 release-addr=0x8153c4110\nTTY&gt; FDT: CPU 4 MPIDR=0x10100 release-addr=0x8153c4150\nTTY&gt; FDT: CPU 5 MPIDR=0x10101 release-addr=0x8153c4190\nTTY&gt; FDT: CPU 6 MPIDR=0x10102 release-addr=0x8153c41d0\nTTY&gt; FDT: CPU 7 MPIDR=0x10103 release-addr=0x8153c4210\nTTY&gt; FDT prepared at 0x8193f0000\nUncompressing...\n5758984\nDecompress OK...\nReady to boot\nDAIF: 3c0\nMMU: shutting down...\nMMU: shutdown successful, clearing caches\nBooting kernel at 0x821800000 with fdt at 0x8193f0000\n[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x611f0221]\n[    0.000000] Linux version 5.11.0-rc6-00015-gdc1ce163506d (marcan@raider) (aarch64-linux-gnu-gcc (Gentoo 10.2.0-r5 p6) 10.2.0, GNU ld (Gentoo 2.35.1 p2) 2.35.1) #201 SMP PREEMPT Fri Feb 5 03:15:40 JST 2021\n[    0.000000] Machine model: Apple Mac Mini M1 2020\n[    0.000000] earlycon: s5l0 at MMIO32 0x0000000235200000 (options '1500000')\n[    0.000000] printk: bootconsole [s5l0] enabled\n[    0.000000] Zone ranges:\n[    0.000000]   DMA      [mem 0x000000080134c000-0x00000009db5dffff]\n[    0.000000]   DMA32    empty\n[    0.000000]   Normal   empty\n[    0.000000] Movable zone start for each node\n[    0.000000] Early memory node ranges\n[    0.000000]   node   0: [mem 0x000000080134c000-0x00000009db5dffff]\n[    0.000000] Zeroed struct page in unavailable ranges: 648 pages\n[    0.000000] Initmem setup node 0 [mem 0x000000080134c000-0x00000009db5dffff]\n[    0.000000] On node 0 totalpages: 485541\n[    0.000000]   DMA zone: 1897 pages used for memmap\n[    0.000000]   DMA zone: 0 pages reserved\n[    0.000000]   DMA zone: 485541 pages, LIFO batch:15\n[    0.000000] percpu: Embedded 6 pages/cpu s57888 r0 d40416 u98304\n[    0.000000] pcpu-alloc: s57888 r0 d40416 u98304 alloc=6*16384\n[    0.000000] pcpu-alloc: [0] 0 [0] 1 [0] 2 [0] 3 [0] 4 [0] 5 [0] 6 [0] 7 \n[    0.000000] Detected VIPT I-cache on CPU0\n[    0.000000] CPU features: detected: Virtualization Host Extensions\n[    0.000000] CPU features: kernel page table isolation disabled by kernel configuration\n[    0.000000] CPU features: detected: Spectre-v4\n[    0.000000] CPU features: detected: Address authentication (IMP DEF algorithm)\n[    0.000000] CPU features: detected: FIQs\n[    0.000000] alternatives: patching kernel code\n[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 483644\n[    0.000000] Kernel command line: earlycon debug\n[    0.000000] Dentry cache hash table entries: 1048576 (order: 9, 8388608 bytes, linear)\n[    0.000000] Inode-cache hash table entries: 524288 (order: 8, 4194304 bytes, linear)\n[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off\n[    0.000000] Memory: 7715584K/7768656K available (3136K kernel code, 1144K rwdata, 640K rodata, 512K init, 455K bss, 53072K reserved, 0K cma-reserved)\n[    0.000000] random: get_random_u64 called from __kmem_cache_create+0x30/0x4b4 with crng_init=0\n[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=8, Nodes=1\n[    0.000000] rcu: Preemptible hierarchical RCU implementation.\n[    0.000000] rcu:     RCU restricting CPUs from NR_CPUS=16 to nr_cpu_ids=8.\n[    0.000000]  Trampoline variant of Tasks RCU enabled.\n[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 100 jiffies.\n[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=8\n[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0\n[    0.000000] aic_of_ic_init: AIC: initialized with 896 IRQs, 2 FIQs, 2 IPIs, 32 vIPIs\n[    0.000000] arch_timer: cp15 timer(s) running at 24.00MHz (phys).\n[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x588fe9dc0, max_idle_ns: 440795202592 ns\n[    0.000000] sched_clock: 56 bits at 24MHz, resolution 41ns, wraps every 4398046511097ns\n[    0.000650] Console: colour dummy device 80x25\n[    0.000958] printk: console [tty0] enabled\n[    0.001273] printk: bootconsole [s5l0] disabled\n\nBusyBox v1.30.1 (Debian 1:1.30.1-6+b1) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n/bin/sh: can't access tty; job control turned off\n/ #\n</code></pre> <p>The script currently supports input and output for the TTY passthrough.</p>"},{"location":"platform/introduction/","title":"Introduction to Apple Silicon","text":""},{"location":"platform/introduction/#foreword","title":"Foreword","text":"<p>This document attempts to explain the Apple Silicon (i.e. M1 and later) Mac boot ecosystem (henceforth \"AS Macs\"), as it pertains for how open OSes interoperate with the platform.</p> <p>It is intended for developers and maintainers of Linux, BSD and other OS distributions and boot-related components, as well as users interested in the platform, and its goal is to cover the overall picture without delving into excessive technical detail. Specifics should be left to other pages. It also omits details that only pertain to macOS (such as how kernel extensions work and how they are loaded).</p> <p>The information here is based on how things work in system firmware and macOS versions 12.0 (Monterey) and later. A number of rapid design changes took place in the first year after the initial M1 Mac announcement; although older 11.x firmwares are usable, they are obsolete and buggy in various ways, and attempting to cover these changes would make things too confusing. We expect users wishing to run open OSes to run system firmware corresponding to macOS 12.1 or later, for practical reasons (though they may have older versions of macOS itself installed).</p> <p>Please drop by #asahi on OFTC if you have general questions or feedback, or ping us on #asahi-dev if you are a developer and would like to discuss technical aspects (further info).</p>"},{"location":"platform/introduction/#design-goals","title":"Design goals","text":"<p>AS Macs have the following design goals:</p> <ul> <li>Made for macOS</li> <li>Open to other OSes</li> <li>Mandatory secure boot (with user control)</li> <li>Secure even against attackers with physical access</li> <li>Resistant to supply-chain attacks</li> <li>Defense in depth (no blind trust in coprocessors/firmware)</li> <li>Native dual/multiboot with backwards compatibility</li> <li>Brick-proof</li> <li>Recoverable security (can be restored to known-good state by users)</li> </ul> <p>Keep these design goals in mind as you read through this document, as they explain a lot of the decisions that went into the system architecture. Apple's approach to third-party OSes is essentially \"have fun\". We do not have any expectations of direct support, documentation, or additional development effort from them, nor do we expect them to attempt to hinder third-party OSes in any deliberate way. They have explicitly developed the ability to securely run third-party OSes and bootloaders on these machines, and left the rest to us.</p> <p>Apple documents much of their security design in their platform security guide, which should be considered the authoritative reference for these platforms. Nonetheless, the guide does not go into the fine technical points of the system, and we have learned about many further details through experimentation and reverse engineering.</p> <p>These systems are engineered to run macOS, and make no explicit concessions for supporting other OSes; the ability to boot custom kernels can be viewed as official support for self-compiled builds of the macOS kernel, and non-macOS OSes need to behave like macOS does as far as their interactions with the rest of the platform. In other words, the ABI specification for every aspect of boot and firmware interaction is \"whatever macOS does\". There is no attempt to enforce actual usage of macOS (no evil checks or anything of that sort), so the system is open to any OS as long as it follows the macOS boot ABI.</p>"},{"location":"platform/introduction/#on-secure-boot-user-control-and-licensing","title":"On secure boot, user control, and licensing","text":"<p>It would be remiss not to briefly cover where these machines stand in terms of user control and trustability. Apple Silicon machines are designed first and foremost to provide a secure environment for typical end-users running macOS as signed by Apple; they prioritize user security against third-party attackers, but also attempt to limit Apple's own control over the machines in order to reduce their responsibility when faced with government requests, to some extent. In addition, the design preserves security even when a third-party OS is installed. The entire architecture is complicated and the details subtle, but to summarize a few key points:</p> <ul> <li>Boot components are signed and opaque (encrypted)</li> <li>Runtime components (e.g. firmware and macOS itself) are signed and transparent (plaintext)<ul> <li>With the exception of the SEP (Secure Enclave Processor, a TPM equivalent), which is optional and disabled by default</li> <li>And two small blobs (SMC and PMU) which are merely incidentally encrypted; it would be nice to get Apple to disclose these, but they have a rather small I/O surface.</li> </ul> </li> <li>Brick recovery / total system flash (DFU) requires phoning home</li> <li>Normal operation, including OS installs, can be performed off-line with physical user presence. It is possible to take an out-of-the-box Mac and install Linux on it without ever connecting it to a network.</li> <li>Owner control is asserted on first boot (you become machine owner by going through the macOS setup flow and creating the first admin user).</li> <li>The normal bootloader flow is minimal and has a small attack surface (no USB, network, etc.)</li> <li>No runtime blobs are designed to have total system access (no ME, no PSP, no TrustZone, nothing of that sort). Almost all blobs are running behind IOMMUs or similar firewalls, with the sole exception of the GPU firmware*. All code running on the main CPUs is under the control of the OS.</li> </ul> <p>This puts them somewhere between x86 PCs and a libre-first system like the Talos II in terms of freedom to replace firmware and boot components; while a number of blobs are required in order to boot the system, none of those have the ability to take over the OS or compromise it post-boot (unlike, say, Intel ME and AMD PSP on recent systems, or the DMA-capable chips on the LPC bus running opaque blobs that exist on even old ThinkPads).</p> <p>AS machines use a large number of auxiliary firmware blobs, each dedicated to a specific purpose and running on a separate CPU core. This is better than having a smaller number of kitchen sink blobs (like Intel ME), since each blob can only affect a particular subsystem (e.g. display, storage, camera), which makes it harder for multiple blobs to collude in order to compromise the user in a meaningful way. For example, the blob running inside the keyboard controller has no mechanism to communicate with the blob running on the WiFi card, and thus cannot implement a keylogger surreptitiously; the blob running on the display controller similarly has no way to communicate with the network, and thus can't implement a secret screen scraper.</p> <p>From a security perspective, these machines may possibly qualify as the most secure general purpose computers available to the public which support third-party OSes, in terms of resistance to attack by non-owners. This is, of course, predicated on some level of trust in Apple, but some level of trust in the manufacturer is required for any system (there is no way to prove the non-existence of hardware backdoors on any machine, so this is not as much of a sticking point as it might initially seem).</p> <p>This design does make it somewhat more awkward for users to install a third-party OS than we're used to on other platforms (this is standard fare in order to protect against malware and users being misled into compromising their machines), and this is covered in the rest of this guide.</p> <p>On the licensing front:</p> <ul> <li>You do have to click through Apple's EULA in order to use the machines at all.</li> <li>Apple gives users explicit permission to run their own OS in their EULA.</li> <li>Apple does not give users permission to redistribute system firmware, but</li> <li>Apple provides all current and past versions of complete system images (firmware and macOS) on a well-known, unauthenticated HTTPS CDN, and</li> <li>Apple's EULA grants all Mac owners a license to use these images.</li> </ul> <p>As with all EULAs, there are some nonsensical points in Apple's (lawyers always seem to be out of sync with actual product direction and design), but reading between the lines we believe everything we're doing is kosher for practical purposes.</p> <p>* There is one exceptional blob that does have privileged access to the system (although it does not explicitly do anything questionable): the GPU firmware. This is because it is in charge of managing parts of the GPU page tables (which are also its own), and there is no separate upstream IOMMU in front of the GPU coprocessor like there is with other coprocessors. While this does extend the surface of system compromise to it, it's worth pointing out that this firmware is not particularly large, is shipped in plain text and even with some symbols, does not have any functionality to talk via questionable interfaces (network, etc.), and is optional and not running when the OS boots (the OS must explicitly start it). Therefore, users willing to forgo GPU functionality can choose not to use it. The firmware also implements a mitigation similar to the PPL in order to protect the GPU page tables even if it is compromised via exploitation (e.g. through GPU commands), although we do not believe this mechanism is currently hardened enough to be an effective mitigation; we look forward to further auditing the GPU firmware and hope Apple will work with us on issues found, so that we can reach a point where we can confidently say that it would be difficult or impossible to use a runtime vulnerability in it to escalate to full system memory access. Update: As of macOS 13.0, the GPU firmware is significantly hardened (in part thanks to Lina's discovery and report of CVE-2022-32947). We are not yet shipping 13.0+ firmware for Asahi, but we will soon Asahi now ships with firmware 13.5, which significantly increases our confidence in this part of the system. Nonetheless, at this time, we have no reason to believe that there are any backdoors in the existing 12.3/12.4 firmwares we use, or that exploiting them is possible from Linux.</p>"},{"location":"platform/introduction/#storage","title":"Storage","text":"<p>AS platforms have two main kinds of storage: NOR Flash and NVMe.</p> <p>NOR is formatted as raw regions and contains:</p> <ul> <li>1st stage bootloader (iBoot1/LLB)</li> <li>System-global firmware</li> <li>Platform configuration data (syscfg, read-only)</li> <li>Factory test logs</li> <li>NVRAM (config variables, read-write)</li> </ul> <p>NVMe is a GPT volume and contains:</p> <ul> <li>System-global storage (iBoot System Container; iSC) including:<ul> <li>Boot policies (think boot configs, but secure) (Preboot)</li> <li>SEP secure storage (xARTS)</li> <li>Misc system config data</li> </ul> </li> <li>One or more APFS container partitions<ul> <li>Each containing one or more bootable OSes sharing a container, each comprising<ul> <li>Preboot volume subfolder<ul> <li>2nd stage bootloader (iBoot2)</li> <li>Apple Device Tree</li> <li>OS-paired firmware</li> <li>OS kernel (XNU)</li> </ul> </li> <li>OS-paired recoveryOS image (in Recovery volume)</li> <li>Per-OS root &amp; data filesystem volumes (may be empty)</li> </ul> </li> </ul> </li> <li>System-global recoveryOS image (+ optional fallback)</li> </ul> <p>There are no restrictions on additional partitions and types; they are ignored by Apple's tooling.</p> <p>Note that the system does not use an EFI system partition (and does not run EFI). OS selection is designed around APFS containers and subvolumes containing files in a specific layout.</p> <p>AS Macs are designed to be brick-proof. They can be recovered from another machine by using a USB cable and booting from ROM, even if all NOR and NVMe contents are destroyed (* NOR destruction untested). This is officially documented using another Mac. We have alternative open source tooling for this that works on Linux/etc.</p> <p>One notable point of this design is that each installed OS also brings along with it a large subset of system firmware running on coprocessors, as well as the OS loader. This makes it easier to maintain backwards compatibility with older OSes; conversely, it also means the firmware ABI for these coprocessors has no stability guarantees whatsoever.</p> <p>Terminology note: \"OS kernel\" here refers to a XNU kernel image, or an equivalent analog. In this section, we use this term to describe anything loaded by iBoot2. When booting third-party OSes, this would normally be a subsequent bootloader stage, such as m1n1.</p>"},{"location":"platform/introduction/#boot-flow","title":"Boot flow","text":"<p>The platform-mandated boot flow can be summarized as follows:</p> <ul> <li>SecureROM:<ul> <li>Reads/validates iBoot1 from NOR</li> <li>Enters USB DFU mode on failure</li> </ul> </li> <li>iBoot1:<ul> <li>Reads/validates system-global firmware from NOR</li> <li>Bootstraps some coprocessors</li> <li>Shows the Apple logo and plays the boot chime</li> <li>Picks and validates a boot policy</li> <li>Reads/validates iBoot2 from the chosen OS container on NVMe</li> </ul> </li> <li>iBoot2:<ul> <li>Reads/validates OS-paired firmware from NVMe</li> <li>Loads and locks some of that firmware, re-bootstraps display coprocessor</li> <li>Reads/validates the Apple Device Tree from NVMe</li> <li>Reads/validates the OS kernel from NVMe</li> <li>Puts some coprocessors to sleep</li> <li>Jumps to OS kernel</li> </ul> </li> </ul> <p>The OS kernel is the first point in the boot flow where we can run non-Apple-signed code.</p> <p>Notably, at no point in this process is any I/O initialized other than the screen, the speakers, and checking for power button presses or (on laptops) specific keys. There is no external storage boot support in the bootloader flow on these machines. Behind the scenes, booting macOS from an external drive involves the moral equivalent of copying <code>/boot</code> to internal storage, and only the root/data filesystems truly live on external storage. There is also no boot menu (but keep reading).</p>"},{"location":"platform/introduction/#recoveryos-and-1tr","title":"recoveryOS and 1TR","text":"<p>recoveryOS is a macOS image that is used to provide an environment for users to perform recovery and installation tasks on these machines. In addition, it also serves as the boot picker menu on these machines.</p> <p>recoveryOS can be requested via NVRAM variables on reboot, or can automatically be invoked after a certain number of boot failures. It is a minimal macOS image that presents the user with a recovery menu that allows them to change system security settings, partition disks, launch a web browser, launch a root terminal, reinstall macOS, etc. Network access is supported.</p> <p></p> <p>In addition, there is a \"special\" boot flow that grants additional capabilities. When the user powers up the machine by holding down the power button, this loads the recoveryOS paired with the currently active default boot OS volume (falling back to the system one), and first shows a boot picker to allow the user to choose an OS to boot (and optionally make the default):</p> <p></p> <p>If the user chooses \"Options\", they will be presented with the recoveryOS menu, as above. When booted this way, it is called \"One True recoveryOS\" (1TR), and it has additional powers granted to it by SEP (secure enclave) firmware. Additionally, this recoveryOS will be considered \"paired\" with the OS container it belongs to, and be able to perform specific operations on that OS. In particular, this mode is required in order to install a custom OS kernel.</p>"},{"location":"platform/introduction/#sep-secure-enclave-processor","title":"SEP (Secure Enclave Processor)","text":"<p>The SEP is the Mac's equivalent of a TPM, and is in charge of all security-critical operations such as validating the creation and modification of Boot Policies. It has knowledge of the security state of the system, including whether it is in 1TR, plain recoveryOS, or regular OS boot.</p> <p>The SEP is used during the boot process, but is put to sleep before the OS kernel is booted. The OS must re-load the SEP firmware and re-bootstrap it to be able to use it (the encrypted firmware blob is provided in a memory region to the OS by iBoot). This means that the SEP is completely optional for a third-party OS, and can be ignored if not needed nor desired.</p> <p>Useful features provided by the SEP include user authentication, Touch ID, secure key storage / usage, U2F support, etc. For example, it can be used to provide bruteforce-resistant password/touch login and full disk encryption, or to hold SSH keys and require a password or touch to use them.</p> <p>The SEP is designed to be mutually isolated from the main CPU (AP); neither can compromise the other. It is supposedly also hardened against physical attacks (e.g. glitching and other environmental attacks).</p>"},{"location":"platform/introduction/#security-modes-boot-policies-and-machine-ownership","title":"Security modes, Boot Policies, and machine ownership","text":"<p>Each installed OS on an AS Mac has an associated Boot Policy. The Boot Policy describes the security state of the OS. These Boot Policies are created via the SEP and signed by an internal machine key, so they cannot be modified externally.</p> <p>The top-level security mode can be in one of three states per OS:</p> <ul> <li>Full Security</li> <li>Reduced Security</li> <li>Permissive security</li> </ul> <p>Full Security is the default, and implies that the OS is fully Apple-signed and all security features are enabled. In order to install an OS in Full Security mode, the system must phone home to Apple to validate that the OS is trustworthy (this prevents attackers from installing a known vulnerable, old OS and using it to compromise the system).</p> <p>Reduced Security allows for certain security features to be disabled, and any Apple-signed OS version to be installed. No phoning home is required to install an OS in this mode, but downgrading or creating a Boot Policy to this mode requires being in recoveryOS and authenticating using machine owner credentials.</p> <p>Permissive Security allows for ~all security features to be disabled, and third-party kernels to be installed. No phoning home is required. Downgrading to Permissive Security requires booting in 1TR paired to the specific OS involved, and authenticating using machine owner credentials.</p> <p>The SEP maintains a database of machine owner users. The first such user is created when the user goes through the macOS boot flow on first startup from a factory-fresh state (or after a full DFU wipe). Subsequent machine owners can only be created by authenticating with an existing owner's credentials.</p> <p>The ability to have a security state per OS is unique to these machines, and allows for things like dual-booting a full-secure macOS (including DRM support, i.e. Netflix in 4K and running iOS apps) and Linux (contrast this to unlocking the bootloader on an Android device or disabling secure boot or changing the signing keys on a UEFI system, which are global operations).</p> <p>Lower security levels unlock the ability to specify finer-grained security settings in the Boot Policy, such as whether OS boot-args filtering will take place and whether the kernel code will be locked read-only in RAM.</p> <p>Boot policies can be managed using the <code>bputil</code> command from macOS/recoveryOS/1TR (subject to the restrictions of each mode).</p>"},{"location":"platform/introduction/#fully-untrusted-os-fuos","title":"Fully Untrusted OS (fuOS)","text":"<p>fuOS is Apple's term for a third-party OS kernel. In order to configure fuOS boot, an existing OS has to first be downgraded to Permissive Security, and then a custom kernel image can be installed. The image is installed using the <code>kmutil</code> command and it will modify the Boot Policy to insert its hash into it, thereby preserving the secure boot chain. iBoot2 will only load this specific fuOS image; replacing or upgrading it requires booting into 1TR and running <code>kmutil</code> again. This operation requires machine owner credentials.</p> <p>Custom kernel images can be flat ARM64 executable images; the entrypoint and (virtual; mostly meaningless) load address are specified when the image is configured. Previously Mach-O binaries were required, but it seems Apple added this feature in 12.1 in order to make life easier for us (as the Mach-O file format requirements changed in that version, breaking our existing tooling).</p>"},{"location":"platform/introduction/#boot-picker","title":"Boot Picker","text":"<p>The built-in boot picker is a macOS application running under recoveryOS, and it scans internal and external volumes for bootable OSes. There are two things that can show up on the list: OS installs, and OS installers. OS installs exist in APFS containers following the expected OS layout (multiple OSes can be present in one APFS container).</p> <p>Since iBoot has no mechanism for booting from external devices, upon selecting an external OS to boot, the boot picker will copy that OS's Preboot structure into NVMe, create a Boot Policy for it, and then configure iBoot1 to boot from that instead. The copied parts include everything up to the XNU kernel itself, including iBoot2 and firmware. This means that external storage is only initialized once XNU is already running, and it will merely mount its root filesystem from there, having been booted from NVMe. Note that, since this process requires the creation of a new Boot Policy (that will not be in the appropriate security state, nor can it be put into it at that point due to pairing requirements), it cannot be used to boot fuOS kernels installed on external drives in this manner (at least not without further manual action, but it's unclear whether this would be possible at all).</p> <p>OS installers are identified by a magic <code>.IAPhysicalMedia</code> plist at the root of the volume, and may exist on volumes of any supported filesystem (APFS and FAT32 both work). That plist specifies a macOS application bundle present in the volume to launch. When the volume is selected, boot proceeds into the main recoveryOS environment (including authentication mandated by FileVault, if enabled), and then automatically launches the application bundle. This happens in 1TR mode if the boot picker was invoked via the appropriate power button hold gesture. This feature is currently used in the Asahi Linux installer to launch its second stage in a more user-friendly manner, and could be used to ship third-party installers as USB install images (but not ones usable as-is completely offline, as they would still require non-redistributable Apple components).</p> <p>One consequence of the boot picker being implemented as a macOS application behind the scenes is that is has full accessibility support (including VoiceOver), which is rather unique.</p>"},{"location":"platform/introduction/#arm64-xnu-boot-protocol","title":"ARM64 XNU boot protocol","text":"<p>The boot protocol is fairly simple; there are no bootloader services (e.g. EFI services) or anything of that sort. The OS image is loaded and jumped to by iBoot. The kernel image receives the following information, via various pointer chains:</p> <ul> <li>Boot-time framebuffer information (incl. verbose boot flag)</li> <li>Command line arguments (<code>boot-args</code> from NVRAM), filtered by Boot Policy flag</li> <li>RAM base/size info</li> <li>Apple Device Tree</li> <li>SEP firmware blob</li> </ul> <p>Images are always loaded at a randomized offset in low RAM (KASLR), so they must be relocatable. Image text is optionally locked as read-only in the memory controller, for security reasons. In addition, the CPU0 reset vector is locked at a computed offset within the image, so resuming from sleep mode requires code to be present at that address.</p>"},{"location":"platform/introduction/#apple-device-tree","title":"Apple Device Tree","text":"<p>Apple uses a bespoke Device Tree format (simpler than FDT), with a similar data model to the Open Firmware device trees that are standard in embedded Linux/BSD systems. The device tree is built by iBoot2 from a template, system configuration information, and dynamic data. The schema for the device tree is not strictly stable from OS version to OS version, but major changes are rare.</p> <p>OSes must parse the ADT to extract vital machine- and boot-specific information.</p>"},{"location":"platform/introduction/#firmware-overview","title":"Firmware overview","text":"<p>Brief overview of known firmware blobs (note: some details here are unverified):</p> Name Chip Description Encrypted Storage Loaded by Started by Size (approx.) iBoot1 SoC (AP) First stage bootloader No *2 NOR SecureROM SecureROM ~600-1000 KB (comp.) iBoot2 SoC (AP) Second stage bootloader No *2 Preboot iBoot1 iBoot1 ~450-800 KB (comp.) SMC SoC*1 System Management Controller No *2 Embedded in iBoot1 iBoot1 iBoot1 ~200 KB (comp.) PMU PMU Power Management Unit No *2 Embedded in iBoot1 iBoot1 iBoot1 ~10 KB SEP SoC Secure Enclave Processor Yes iSC iBoot1+OS iBoot1+OS ~7.5 MB ANS SoC NVMe controller No NOR iBoot1 iBoot1+2+OS ~800 KB (comp.) CIO SoC Type-C/Thunderbolt I/O No NOR iBoot1 OS ~170 KB TMU SoC Thunderbolt related No NOR iBoot1 OS ~10 KB DCP SoC Display Controller Processor No NOR &amp; Preboot iBoot1+2 iBoot1+2+OS ~9.5 MB (~2.5 MB comp.) ANE SoC Apple Neural Engine No Preboot iBoot2 OS ~5 MB (~180 KB comp.) AGX SoC Apple Graphics (GPU) No Preboot iBoot2 OS ~2.5 MB (~150 KB comp.) ISP SoC Image Signal Processor (Camera) *3 No Preboot iBoot2 OS ~12 MB (~2.5 MB comp.) SIO SoC Smart I/O (UART/I2C/SPI DMA) No Preboot iBoot2 OS ~1 MB (~50 KB comp.) AOP SoC Always-On Processor *4 No Preboot iBoot2 OS ~1.2 MB (~300 KB comp.) PMP SoC Power Measurement Processor No Preboot iBoot2 OS ~400-920 KB (~100 KB comp.) AVE SoC Apple Video Encoder No Preboot iBoot2 OS ~1.2 MB (~300 KB comp.) AVD SoC Apple Video Decoder No Embedded in XNU OS OS ~40 KB SECDIS SECDIS Secure Mic/Cam Disable FPGA *5 No On-chip flash Self Self Not upgradable by design IPD IPD InputDevice (Touchpad/Keyboard) *5 No Preboot/Flash *6 Self Self ~900 KB (~384 KB comp.) MT DFR Touch Bar (DFR) Multitouch *7 No Preboot OS OS ~60 KB XHCI ASM3142 PCI xHCI USB controller *8 No Embedded in XNU OS OS ~128 KB WLAN WLBT Wi-Fi (Broadcom FullMAC) No OS filesystem OS OS ~1.4 MB (~700 KB comp.) BT WLBT Bluetooth (Broadcom) No OS filesystem OS OS ~470 KB (~280 KB comp.) SE SE Secure Element Yes On-chip flash Self Self / SEP? ~4.5 MB S5E S5E NAND (SSD) Controller No On-chip flash On-chip ROM? ANS ~700 KB (~300 KB comp.) ACE2 ACE2 USB-PD Controller No Dedicated flash On-chip ROM OS? ~500 KB (~170 KB comp.) TCON TCON Display Timing Controller *9 No On-chip flash Self DCP ~1.3 MB (~20 KB comp.) DP2HDMI MCDP29XX DisplayPort to HDMI bridge *10 No Dedicated flash Self DCP ~500 KB (~280 KB comp.) <p>Notes:</p> <ol> <li>\"SoC\" location means part of the main System-on-Chip; otherwise it is an external chip.</li> <li>Plaintext since macOS Sequoia.</li> <li>Coprocessor is present but unused on machines without a camera.</li> <li>Terrible name, not actually always-on (not even on when the OS boots).</li> <li>Laptops only</li> <li>Boots from Flash, but firmware lives in Preboot and is upgraded by OS FUD daemon if necessary</li> <li>J293 only (MBP 13\" M1)</li> <li>J456 (4-port iMac) only</li> <li>Machines with embedded display only</li> <li>Machines with HDMI port only</li> </ol> <p>Many firmware sizes are compressed (many firmwares have large amounts of padding, making uncompressed sizes not very useful to gauge how much code there is). Where large firmwares are stored uncompressed, compressed sizes are also given for better comparison. The sizes should be taken as a rough guide only.</p>"},{"location":"platform/kb-layout-issues/","title":"Mac keyboard layout issues","text":"<p>Long story short, Mac keyboard layouts on Linux are a complete mess. We want to fix it. Please help us figure out what is wrong for your layout!</p> <p>Note: This is only for MacBook internal keyboards and also possibly external Apple keyboards. Please do not report issues with third-party keyboards.</p>"},{"location":"platform/kb-layout-issues/#how-to-help","title":"How to help","text":"<p>Before getting started, identify your keyboard layout according to Apple's official documentation. We need to know two things:</p> <ul> <li>The keyboard type (ANSI, ISO, or Japanese)</li> <li>The specific country layout</li> </ul> <p>Next, make sure you have your keyboard model correctly selected. In your keyboard settings (KDE: System Settings \u2192 Input Devices \u2192 Keyboard \u2192 Hardware), you should select the correct keyboard model:</p> <ul> <li>For ANSI layouts: Apple | Apple Aluminium (ANSI)</li> <li>For ISO layouts: Apple | Apple Aluminium (ISO)</li> <li>For Japanese (JIS) layouts: Apple | Apple Aluminium (JIS)</li> </ul> <p>Finally, choose the layout that looks right for your language. This should be just the plain language type, since Mac-specific customizations should be applied based on the keyboard model. However, please do try multiple options (e.g. some languages may have a Macintosh variant, though this may make things worse).</p> <p>Then add a report using the template below (send a PR following the template section). If your layout is already listed but you have a different experience (e.g. on another machine), add a new System configuration subsection and note any differences you see in it.</p> <p>Please add as much detail as you can about what works, what is different from what's printed on the keycaps, any language- or region-specific quirks or issues we need to be aware of, anything special that macOS does, hidden combinations that are not printed on the keycaps that should work, how this might differ from your experience on Windows and generic Linux desktops on non-Apple keyboards, etc. We need as much information as possible in order to do the right thing in the future.</p> <p>Note that this is not about the differences between macOS and Linux regarding shortcut keys (e.g. Option vs. Ctrl). That is expected: we can't (correctly) make the Linux desktop emulate macOS via keyboard layout changes. We're interested in regional keyboard layout issues, not general differences between macOS and Linux.</p> <p>Known issue: on M2 MacBook Air machines, currently the default behavior of the <code>iso_layout</code> quirk of the <code>hid_apple</code> driver may be different from what it is on other machines, which can swap the keys right of shift and left of \"1\". However, neither of the options is appropriate for all layouts, so this may be a good thing or a bad thing for your particular layout (this is one thing we want to fix). Just be aware of the existing machine-dependent inconsistency. This will be fixed in the next stable kernel release to at least be consistent across machines.</p>"},{"location":"platform/kb-layout-issues/#reports","title":"Reports","text":""},{"location":"platform/kb-layout-issues/#ansiisojis-layout-machine","title":"(ANSI|ISO|JIS) - (layout) - (machine)","text":"<ul> <li>Best XKB keyboard layout/variant: (Your layout)</li> </ul> <p>(Your notes here)</p>"},{"location":"platform/kb-layout-issues/#system-configuration","title":"System configuration","text":"<pre><code># Output of running:\ncd /sys/module/hid_apple/parameters/; grep . *; pacman -Q xkeyboard-config-asahi; uname -r; cat /proc/device-tree/model; echo; find /sys/devices -name country | xargs cat; dmesg | grep \"Keyboard type\"\n</code></pre>"},{"location":"platform/kb-layout-issues/#jis-japanese","title":"JIS - Japanese","text":"<ul> <li>Best XKB keyboard layout/variant: <code>Japanese/Japanese</code></li> </ul> <p>The correct layout type is simply Japanese (default variant). Do not choose Japanese (Macintosh): this is a useless kana layout that will make typing in your password impossible.</p> <p>All keys are mapped correctly as printed on the keycaps.</p> <p>If you use an IME (fcitx5 + mozc recommended), the IME key mappings will probably not be what you expect by default. You'll probably want to go into your IME settings and map \u300c\u82f1\u6570\u300d(Eisu toggle) to Deactivate Input Method and \u300c\u304b\u306a\u300d(Hiragana Katakana) to Activate Input Method.</p> <p>Japanese Mac keyboards have no \\ (backslash) key. You have two options under Advanced \u2192 Configure keyboard options \u2192 Compatibility options:</p> <ul> <li>Japanese Apple Keyboards emulate OADG109A backslash: Puts the backslash on the unshifted \"_\" key, like common PC OADG109A layouts.</li> <li>Japanese Apple Keyboards emulate PC106 backslash: Turns the '\u00a5' key into backslash. *</li> </ul> <p>* In theory, but this option seems like it might be broken right now. That's the intended behavior anyway...</p>"},{"location":"platform/kb-layout-issues/#system-configuration_1","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.2.0-asahi-6-1-edge-ARCH\nApple MacBook Pro (14-inch, M1 Pro, 2021)\n0f\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#ansi-korean-m2-mba","title":"ANSI - Korean - M2 MBA","text":"<ul> <li>Best XKB keyboard layout/variant: <code>Korean</code></li> </ul>"},{"location":"platform/kb-layout-issues/#system-configuration_2","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.2.0-asahi-11-1-edge-ARCH\nApple MacBook Air (13-inch, M2, 2022)\n21\n00\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-swiss-m1-pro-mbp","title":"ISO - Swiss - M1 Pro MBP","text":"<ul> <li>Best XKB keyboard layout/variant: \"German (Switzerland)\"</li> </ul> <p>There's also \"German (Switzerland, Macintosh)\", but it fails to preview. Since I didn't find any issues with the above, I\u00a0don't know the benefits of the Macintosh variant.</p> <p>Note that in Switzerland, there are four national languages: German, French, Italian and Rumantsch. German and French have their own XKB keyboard layout variants (\"French (Switzerland)\") but identical physical layouts. The above applies to the German variant, I don't know much about the French variant.</p>"},{"location":"platform/kb-layout-issues/#system-configuration_3","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.2.0-rc3-asahi-7-1-edge-ARCH\nApple MacBook Pro (14-inch, M1 Pro, 2021)\n00\n00\n0d\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-german-austrian-m1-air-2020","title":"ISO - German / Austrian - M1 Air 2020","text":"<ul> <li>Best XKB keyboard layout/variant: \"German (Austria)\"</li> </ul> <p>No issues found so far, everything works as expected.</p>"},{"location":"platform/kb-layout-issues/#system-configuration_4","title":"System configuration","text":"<pre><code>fnmode:2\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:1\nswap_opt_cmd:1\nxkeyboard-config-asahi 2.35.1_3-1\n6.5.0-asahi-15-1-edge-ARCH\nApple MacBook Air (M1, 2020)\n00\n0d\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-italian-mbp-16-inch-m1-pro","title":"ISO - Italian - MBP 16-inch M1 Pro","text":"<ul> <li>Best XKB keyboard layout/variant: Italian</li> </ul> <p>I'm on Gnome, an Italian (Machinintosh) is present, but is completely wrong, use a strange qzerty layout. With Italian layout I don't have alt gr function, it seems that the right command is acting as left alt, so I can't type @, #, \u20ac, ecc </p> <pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.2.0-asahi-11-1-edge-ARCH\nApple MacBook Pro (16-inch, M1 Pro, 2021)\n0d\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-italian-mbp-14-inch-m2-pro","title":"ISO - Italian - MBP 14-inch M2 Pro","text":"<ul> <li>Best Hardware model: Apple|Apple</li> <li>Best XKB keyboard layout/variant: Italian</li> </ul> <pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-french-m1-pro-mbp","title":"ISO - French - M1 Pro MBP","text":"<ul> <li>Best XKB keyboard layout/variant: Apple | Apple Aluminium (ISO) with no variant</li> </ul> <p>Selecting a variant will give a wrong mapping.</p> <p>This test was done using KDE, Wayland, xkeyboard-config-asahi, on Apple MacBook Pro (14-inch, M1 Pro, 2021)</p>"},{"location":"platform/kb-layout-issues/#iso-greek-m1-max-mbp","title":"ISO - Greek - M1 Max MBP","text":"<ul> <li>Best XKB keyboard layout/variant: US and Greek</li> </ul> <p>The \u00a7\u00b1 key functions as `~ (in both layouts)</p> <p>The `~ key functions as \u00ab\u00bb (in both layouts)</p> <pre><code>fmode:3\niso_layout:-1\nswap_fn_leftctrl:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.1.0-asahi-2-2-edge-ARCH\nApple Macbook Pro (14-inch, M1 Max, 2021)\n0d\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-turkish-q-m2-mbp","title":"ISO - Turkish Q - M2 MBP","text":"<ul> <li>Best XKB keyboard layout/variant: Turkish or tr</li> </ul> <p>The keyboard mostly works like it should on a non-Mac keyboard. Combinations that require Alt Gr (right Alt) only work with right Option, which is not how it works on macOS but it's the way it works normally. One caveat is that <code>Alt Gr + A</code> outputs \u00e2, when it normally should output \u00e6.</p>"},{"location":"platform/kb-layout-issues/#system-configuration_5","title":"System configuration","text":"<pre><code>fnmode:3  \niso_layout:-1  \nswap_ctrl_cmd:0  \nswap_fn_leftctrl:0  \nswap_opt_cmd:0  \nxkeyboard-config-asahi 2.35.1_3-1  \n6.2.0-asahi-11-1-edge-ARCH  \nApple MacBook Pro (13-inch, M2, 2022)  \n00  \n00  \n0d\n</code></pre>"},{"location":"platform/kb-layout-issues/#ansi-us-polish-m1-max-mbp-2021","title":"ANSI US - Polish - M1 Max MBP 2021","text":"<ul> <li>Best XKB keyboard layout/variant: pl</li> </ul> <p>Keyboard model on startup defaulted to Generic.</p> <p>Letters with diacritics (\u0105\u0107\u0119\u0142\u00f3\u0107\u017c\u017a) work with the right option key: correct Special characters (digits + shift): correct Special characters right to letters: correct backtick / tilde left to digits: correct  </p>"},{"location":"platform/kb-layout-issues/#system-configuration_6","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.1.0-rc6-asahi-4-1-ARCH\nApple MacBook Pro (16-inch, M1 Max, 2021)\n21\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#ansi-us-with-mainland-chinese-punctuations-physically-remapped-to-dvorak-m1-pro-mbp-2021","title":"ANSI US - with mainland Chinese punctuations - physically remapped to dvorak - M1 Pro MBP 2021","text":"<ul> <li>Best XKB keyboard layout/variant: zh-tw(Zhuyin/Chewing), en-us, ee, fi, dvorak variant for languages that using latin alphabets.</li> </ul> <p>System layout as English(Macintosh), when trying to select layout to English(Dvorak, Macinstoh), it automatically fallbacks to English(Macintosh), fcitx5</p> <p>English(US) - Englsh(Dvorak, Macintosh): behaves normally.</p> <p>Chewing(Chinese Taiwan): Select layout as dvorak, no problem, punctuation are also mapped to corresponding dvorak positions.</p> <p>Estonian(Dvorak): \u00e4\u00f5\u00f6\u00fc with right opt + aoeu, normal ANSI dvorak punctuation.</p> <p>Finnish(Dvorak): \u00f6\u00d6 = ;: on ANSI, \u00e5 = opt + o, can't type \u00e4 without using dead key. opt + ; = \u00a8 super weird.</p>"},{"location":"platform/kb-layout-issues/#system-configuration_7","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nxkeyboard-config-asahi 2.35.1_3-1\n6.2.0-asahi-11-1-edge-ARCH\nApple MacBook Pro (14-inch, M1 Pro, 2021)\n00\n21\n00\n</code></pre>"},{"location":"platform/kb-layout-issues/#iso-international-english-m1-air","title":"ISO - International English - M1 Air","text":"<ul> <li>Best Hardware model: Apple|Apple Aluminum (ISO)</li> <li> <p>Best XKB keyboard layout/variant: English (US)</p> </li> <li> <p>My original keyboard is ISO German with stickers for International English. Working correctly in Mac OS.</p> </li> <li>Looks like https://www.apple.com/uk/shop/product/MK2A3Z/A/magic-keyboard-international-english</li> <li>Preview works for \"English (US)\", not for any of the English international variants.</li> <li>Difference 1 with English (US): Key between Shift and Z is ~` on physical keyboard but types &lt; &gt; in Fedora.</li> <li>Difference 2 with English (US): Key in top left next to 1 is +- \u00a7 on physical keyboard but types ~` in Fedora.</li> </ul>"},{"location":"platform/kb-layout-issues/#system-configuration_8","title":"System configuration","text":"<pre><code>fnmode:3\niso_layout:-1\nswap_ctrl_cmd:0\nswap_fn_leftctrl:0\nswap_opt_cmd:0\nwarning: database file for 'core' does not exist (use '-Sy' to download)\nwarning: database file for 'community' does not exist (use '-Sy' to download)\nwarning: database file for 'extra' does not exist (use '-Sy' to download)\nerror: package 'xkeyboard-config-asahi' was not found\n6.10.6-401.asahi.fc40.aarch64+16k\nApple MacBook Air (M1, 2020)\n00\n0d\n</code></pre>"},{"location":"platform/open-os-interop-old/","title":"Open OS Platform Interoperability (Old Version)","text":""},{"location":"platform/open-os-interop-old/#foreword","title":"Foreword","text":"<p>This document presents our vision for how open OSes should interoperate on Apple Silicon (i.e. M1 and later) Macs. We recommend first reading Introduction to Apple Silicon to first learn how the platform is designed from Apple's perspective.</p> <p>The ideas in this document are not intended to set hard requirements or rules; anyone is of course free (and encouraged) to go their own way if they so choose. Rather, we would like to agree on a set of standards that make it easier for different OSes to co-exist and be installed by end users, aiming to make the process as simple, seamless, and future-proof as possible.</p> <p>This document is a draft, and we welcome all commentary and discussion in order to help shape the future of how to build an open OS ecosystem on these platforms. Please drop by #asahi on OFTC if you have general questions or feedback, or ping us on #asahi-dev if you are a developer and would like to discuss technical aspects (further info).</p>"},{"location":"platform/open-os-interop-old/#os-layout-boot","title":"OS layout &amp; boot","text":"<p>An OS on an Apple Silicon machine, as seen by Apple's tooling, means a portion of an APFS container partition. As the machines natively support multi-boot, and in order to fit within the security design of the platform (e.g. the SEP should know what OS was booted), we recommend a 1:1 mapping between an installed OS and an OS as seen by the platform.</p> <p>For third-party OSes, we propose the following GPT partition structure per OS:</p> <ol> <li>APFS container partition (\"stub macOS\") (~2.5GB) with:<ul> <li>iBoot2, firmware, XNU kernel, RecoveryOS (all required by the platform)</li> <li>m1n1 as fuOS kernel, with chainloading config pointing to the EFI partition</li> <li>~empty root/data filesystem subvolumes</li> </ul> </li> <li>EFI system partition (FAT32) (~512MB) with:<ul> <li>m1n1 stage 2 + device trees + U-Boot</li> <li>GRUB or another UEFI OS loader boot the target kernel</li> </ul> </li> <li>root/boot/etc. partitions (OS-specific)</li> </ol> <p>Rationale: this arrangement pairs together a third-party OS with an APFS-resident OS as seen by Apple's tooling, and allows users to use the native boot picker (with a11y support). It avoids potential trouble down the road which could come from having multiple OSes attempt to manage the SEP under a shared OS context. It also lets us have independent secure-boot chains for OSes (once that is implemented), with the fuOS image containing the root of trust for subsequent boot stages, bridged to the machine chain of trust by the user with their machine owner credentials during installation.</p> <p>While it would be possible to share one APFS container between multiple OSes (and even macOS), there isn't much point to this other than saving a small amount of disk space per OS. Using a separate container partition for each installed OS makes it easier to wipe and start over, which would otherwise require a more complicated cleanup process where certain APFS subvolumes are deleted and certain directory trees in others are wiped.</p> <p>This design, unconventionally, provides an EFI system partition for each installed OS. There are two reasons for this: first, each OS is logically a \"container\" and includes the EFI implementation itself, so it makes sense to isolate the ESP from that of other OSes. Second, due to the absence of EFI variable runtime services (see below), it would be difficult for multiple co-existing OSes to share an ESP and configure their respective EFI boot entries. Having separate ESPs allows us to just use the default boot path (<code>\\EFI\\BOOT\\BOOTAA64.EFI</code>) and avoid having to persist boot configurations. It also allows the ESP to be directly used as the <code>/boot</code> partition for an OS, without having multiple OSes colliding with each other (if desired).</p> <p>In the future, once open APFS drivers are deemed stable enough to use as a root filesystem, we would like to support full space-sharing coexistence with macOS; at that point only the EFI system partition would be required on top of an existing APFS macOS container.</p> <p>Due to the presence of multiple ESPs, OSes will need a way to figure out which is theirs. For typical mounts and boot purposes, that can be done with partition/FS IDs; this should mostly be a concern for OS installers which need to determine what ESP to install their bootloader into at installation time. For this purpose, m1n1 stage 1 is normally configured at installation time to provide (and forward) a Device Tree <code>/chosen</code> property named <code>asahi,efi-system-partition</code>, which contains the EFI system partition PARTUUID value.</p>"},{"location":"platform/open-os-interop-old/#boot-overview","title":"Boot overview","text":"<p>A typical boot of a reference Linux system will go as follows, continuing on from the Boot Flow section above:</p> <ul> <li>iBoot2 loads the custom kernel, which is a build of m1n1</li> <li>m1n1 stage 1 runs and<ul> <li>Parses the Apple Device Tree (ADT) to obtain machine-specific information</li> <li>Performs additional hardware initialization (machine-specific)</li> <li>E.g. memory controller details, USB-C charging, HDMI display (on Mac Mini)</li> <li>Displays its logo on the screen (replacing the Apple logo)</li> <li>Loads its embedded configuration, which directs it to chainload from a FAT32 partition</li> <li>Initializes the NVMe controller</li> <li>Searches the GPT for the partition configured for chainloading, by PARTUUID.</li> <li>Mounts the partition as FAT32</li> <li>Searches for the filename configured for chainloading and loads it</li> <li>Shuts down the NVMe controller</li> <li>Chainloads to the loaded instance of m1n1 (as a raw binary blob), including forwarding any /chosen property configurations found in its embedded config.</li> </ul> </li> <li>m1n1 stage 2 runs and<ul> <li>Parses the Apple Device Tree (ADT) to obtain machine-specific information</li> <li>Re-initializes hardware, including anything stage 1 did not do (e.g. due to it being older)</li> <li>Searches its embedded payloads to find Device Trees and an embedded U-Boot image</li> <li>Selects an embedded Device Tree (FDT) appropriate for the current platform</li> <li>Personalizes the FDT with dynamic information transplanted from the ADT</li> <li>Performs any other hardware initialization to prepare the machine environment for Linux</li> <li>Loads the embedded U-Boot image and jumps to it</li> </ul> </li> <li>U-Boot runs and<ul> <li>Parses the FDT</li> <li>Initializes the keyboard for input</li> <li>Initializes NVMe</li> <li>Prompts the user to break into a shell if requested</li> <li>Mounts the appropriate EFI System Partition</li> <li>Brings up basic EFI services</li> <li>Locates the default EFI bootloader in the ESP, e.g. GRUB, and boots it</li> </ul> </li> <li>GRUB runs and<ul> <li>Uses EFI disk access services to mount the /boot filesystem (could be the ESP itself, could be something else)</li> <li>Locates its configuration file and additional components</li> <li>Presents the user with a boot menu, using EFI console/input services</li> <li>Loads the kernel and initramfs from /boot</li> <li>Jumps to the kernel</li> </ul> </li> <li>The Linux kernel boots as it would on any other UEFI+FDT platform</li> </ul> <p>This boot chain is designed to progressively bring the system closer to a \"typical\" ARM64 machine, so that subsequent layers have to worry less about the particulars of Apple Silicon machines.</p>"},{"location":"platform/open-os-interop-old/#m1n1","title":"m1n1","text":"<p>m1n1 is our first-stage bootstrap for Apple Silicon systems. Its purpose is to bridge between the XNU boot protocol and the Device Tree / ARM64 Linux boot protocol, and do low-level bring-up so that subsequent boot stages do not have to be concerned with it. See the m1n1 User Guide for more details on how it works.</p> <p>m1n1 can also be puppeteered via USB for development and reverse engineering purposes, including loading kernels to allow for a very fast build-test cycle. It also features a bare-metal hypervisor that can boot Linux or macOS and provide a virtualized UART over USB, and includes advanced Python-based event tracing framework. These features are not intended for end users, but we hope they make OS development and testing on these platforms as enjoyable as possible.</p> <p>m1n1 can be installed as a single stage, but on production systems it should be split into two versions, with the stage 1 build chainloading a second stage from the EFI system partition. This is important because stage 1 can only be modified by the user via booting in 1TR, which precludes it from being updated by another OS directly. By loading a second stage from NVMe, we can have it be updatable, along with its payloads.</p> <p>In the future, we intend to allow for the stage 2 chainload to maintain a secureboot chain, via signed m1n1 images. For this reason, the current chainloading code to load stage 2 from FAT32 is written in Rust, as it is part of the secureboot attack surface. This essentially eliminates the possibility of exploitable memory-safety bugs in that part of the code. The signature verification will also be implemented in Rust for this reason. The public key for verification will be configured at stage 1 installation time, and will be that of the entity expected to provide stage 2 builds for that particular OS container.</p>"},{"location":"platform/open-os-interop-old/#u-boot","title":"U-Boot","text":"<p>U-Boot provides the first point of local (keyboard) user interaction, and support for booting from USB or other external devices. It also implements EFI services that hide the specifics of the platform, making it look like a typical UEFI machine.</p> <p>Notably, U-Boot cannot provide particularly useful EFI runtime services. As the platform does not have an EFI variable store, and it is not practical to e.g. share NVMe access with a running OS, it won't be possible to make modifications to EFI boot configs from a running OS. Instead, those modifications would have to be made by changing configuration files directly. This shouldn't be an issue if different OSes use different ESPs.</p>"},{"location":"platform/open-os-interop-old/#grub","title":"GRUB","text":"<p>GRUB does the final Linux loading and provides users with the familiar kernel selection and option editing menu. GRUB does not need any patches to work on Apple Silicon machines, as it relies entirely on EFI services to do its job. It is up to the OS distribution to decide what to use here; GRUB is merely an example.</p>"},{"location":"platform/open-os-interop-old/#boot-schemes","title":"Boot schemes","text":"<p>Installed OSes are in control of the boot chain starting from m1n1 stage 2, and thus are free to manage it however they wish. For example, a Linux distro could append Linux kernels directly to m1n1 stage 2, or use U-Boot directly to boot kernels, or use the Linux EFI stub, or GRUB.</p> <p>OS installers booted via USB must use the standard UEFI boot protocol from a FAT32 EFI System Partition if they want to work with the UEFI-only setup mode of the Asahi Linux Installer (which installs m1n1 stage 2 + U-Boot set up like that). The installer may overwrite this with another mechanism as part of the installation, if desired, although this is not recommended without a good reason: keeping the second stage blob installed by the Asahi Linux Installer may allow for booting on machines not yet supported by a given OS release, by providing new device trees, if those platforms are sufficiently backwards compatible.</p> <p>For OSes that use the typical m1n1+U-Boot approach, it is recommended that they check the existing version in the ESP and refuse to downgrade automatically it if the package provided by the OS is older. This, again, allows for future hardware to be partially supported with only an installer update. TODO: specify how this version check should work (we need to start tagging m1n1 builds properly).</p>"},{"location":"platform/open-os-interop-old/#initial-installation","title":"Initial installation","text":"<p>On these machines, there is a mismatch between the point where a third-party kernel boots (after iBoot2), and the required per-OS boot components (including iBoot2 itself, firmware, and other files, as well as the recoveryOS image and XNU kernel for it). In addition, Apple's tooling requires these files to be laid out in a certain way in the Preboot partition in order to work properly in the OS selection menus, beyond the requirements imposed by iBoot1/2 themselves. In effect, creating a new OS container requires, essentially, installing macOS minus the root filesystem.</p> <p>Thankfully, all the required components can be fetched from the restore images (IPSW files) which are publicly available at well-known, stable URLs. We have implemented this process in asahi-installer, a Python-based installation framework that is intended to run from 1TR. It streams the required bits of the IPSW file, avoiding a complete download, and sets up the partitions and contents as required to boot recoveryOS and subsequently a custom kernel.</p> <p>We don't expect OSes to want to reinvent this particular wheel (trust us, you don't want to), so we'd like to make the installer flexible enough to support bootstrapping different installation flows.</p>"},{"location":"platform/open-os-interop-old/#launching-the-installer","title":"Launching the installer","text":"<p>At this time, the Asahi Linux installer is supported as a purely online installer (<code>curl | sh</code> style), which can be launched from macOS or from recoveryOS. OSes to be installed are downloaded on demand (streamed directly to the target disk without any intermediate storage). Alternatively, users may choose to install only a UEFI boot environment, which can then boot any OS from USB using the standard mechanisms, leaving unpartitioned space for e.g. an OS installer to use.</p> <p>Future installation options could include:</p> <ul> <li>USB netinstall images/bundles, setting up the installer as \"bootable install media\". This can be set up by just unpacking some files to a FAT32 partition on a USB drive, so it is easy for users to use, and will allow them to select the installer from the boot picker (more info on how this magic works). It would still fetch the OS to be installed from the internet.</li> <li>USB local install images/bundles, which can also serve as UEFI install media for later or for other platforms. This will install the target OS from USB, but will still hit Apple's CDN for the Apple components, making the install not truly offline.<ul> <li>An option for end users to add the Apple components, e.g. by running a script from the USB drive, making it fully offline</li> <li>An option for end users to add the Apple components when creating the USB installer, e.g. by running a script that downloads them and provisions the installer in one go, instead of a pre-baked image.</li> <li>We want to add this as a feature to the online installer, e.g. \"create a bootable USB installer\" instead of actually doing the install.</li> </ul> </li> <li>Packaging as a macOS app (this would already be part of USB install modes anyway)<ul> <li>Though this runs into GateKeeper issues with unsigned downloads if downloaded \"normally\" by users from a browser...</li> </ul> </li> </ul>"},{"location":"platform/open-os-interop-old/#firmware-provisioning","title":"Firmware provisioning","text":"<p>Apple Silicon machines rely on a large number of firmware blobs to work. While the majority of these are already loaded by the time a third-party OS boots, there is a small subset that isn't. Since these blobs do not have a redistributable license, this presents an issue for those OSes that need to have access to the blobs. Thankfully, the blobs are available in the IPSW files created by the initial installer. We propose a \"vendor-firmware\" mechanism to pass those blobs onto the booted/installed OS.</p> <p>Note: There is currently a hack in the installer to dump out all firmware raw to another place in the ESP, so we can provide a script for users to extract the rest of it into a form compliant with this specification. This will go away once all the extractors are done, and is intended as a temporary ad-hoc thing.</p>"},{"location":"platform/open-os-interop-old/#packaged-blobs","title":"Packaged blobs","text":"<p>Currently, Broadcom FullMAC WiFi firmware is packaged. These blobs have also been identified as necessary, but are not yet packaged:</p> <ul> <li>Broadcom Bluetooth firmware</li> <li>AVD (Apple Video Decoder) Cortex-M3 firmware</li> <li>USB xHCI firmware (only needed for iMac models with 4 USB-C ports).</li> </ul> <p>Details on Broadcom FullMAC WiFi firmware naming: https://lore.kernel.org/all/20220104072658.69756-10-marcan@marcan.st/</p>"},{"location":"platform/open-os-interop-old/#vendorfw-package","title":"VendorFW package","text":"<p>The stub OS installer collects available platform firmware from the IPSW, and packages it as two files:</p> <ul> <li>firmware.tar: Tarball containing the firmware, in a structure compatible with the <code>/lib/firmware</code> hierarchy (e.g. <code>brcm/foo.bin</code>).</li> <li>manifest.txt: A text file containing lines of the following two forms:<ul> <li><code>LINK &lt;src&gt; &lt;tgt&gt;</code> : hard link</li> <li><code>FILE &lt;name&gt; SHA256 &lt;hash&gt;</code>: file</li> </ul> </li> </ul> <p>These files are then placed in the EFI system partition under the <code>vendorfw</code> directory.</p>"},{"location":"platform/open-os-interop-old/#os-handling","title":"OS handling","text":"<p>A booted OS shall mount the ESP and inspect the <code>manifest.txt</code> file. If it is found to be different from the existing vendor firmware installed in the OS partition (if any), it shall update it by extracting <code>firmware.tar</code> into <code>/lib/firmware</code>, and then comparing both manifest files and removing any files that are no longer present in the ESP manifest. This should be done before any drivers requiring firmware are loaded.</p> <p>Alternatively, an OS that supports a more complex dynamic firmware loading mechanism could read the <code>firmware.tar</code> file directly as firmware is requested.</p> <p>An example implementation of this process is available in the asahi-scripts repo here.</p> <p>The firmware package should be checked on every boot, to pick up changes from users who upgrade their stub OS by re-running the installer. This will be rare, but it's worth supporting properly.</p>"},{"location":"platform/open-os-interop/","title":"Open OS Platform Interoperability","text":""},{"location":"platform/open-os-interop/#foreword","title":"Foreword","text":"<p>This document presents our vision for how open OSes should interoperate on Apple Silicon (i.e. M1 and later) Macs. We recommend first reading Introduction to Apple Silicon to first learn how the platform is designed from Apple's perspective.</p> <p>The ideas in this document are not intended to set hard requirements or rules; anyone is of course free (and encouraged) to go their own way if they so choose. Rather, we would like to agree on a set of standards that make it easier for different OSes to co-exist and be installed by end users, aiming to make the process as simple, seamless, and future-proof as possible.</p> <p>This document is a draft, and we welcome all commentary and discussion in order to help shape the future of how to build an open OS ecosystem on these platforms. Please drop by #asahi on OFTC if you have general questions or feedback, or ping us on #asahi-dev if you are a developer and would like to discuss technical aspects (further info).</p>"},{"location":"platform/open-os-interop/#os-layout-boot","title":"OS layout &amp; boot","text":"<p>An OS on an Apple Silicon machine, as seen by Apple's tooling, means a portion of an APFS container partition. As the machines natively support multi-boot, and in order to fit within the security design of the platform (e.g. the SEP should know what OS was booted), we recommend a 1:1 mapping between an installed OS and an OS as seen by the platform.</p> <p>For third-party OSes, we propose the following GPT partition structure per OS:</p> <ol> <li>APFS container partition (\"stub macOS\") (~2.5GB) with:<ul> <li>iBoot2, firmware, XNU kernel, RecoveryOS (all required by the platform)</li> <li>m1n1 as fuOS kernel, with chainloading config pointing to the EFI partition</li> <li>~empty root/data filesystem subvolumes</li> </ul> </li> <li>EFI system partition (FAT32) (~512MB) with:<ul> <li>m1n1 stage 2 + device trees + U-Boot</li> <li>GRUB or another UEFI OS loader boot the target kernel</li> </ul> </li> <li>root/boot/etc. partitions (OS-specific)</li> </ol> <p>Rationale: this arrangement pairs together a third-party OS with an APFS-resident OS as seen by Apple's tooling, and allows users to use the native boot picker (with a11y support). It avoids potential trouble down the road which could come from having multiple OSes attempt to manage the SEP under a shared OS context. It also lets us have independent secure-boot chains for OSes (once that is implemented), with the fuOS image containing the root of trust for subsequent boot stages, bridged to the machine chain of trust by the user with their machine owner credentials during installation.</p> <p>While it would be possible to share one APFS container between multiple OSes (and even macOS), there isn't much point to this other than saving a small amount of disk space per OS. Using a separate container partition for each installed OS makes it easier to wipe and start over, which would otherwise require a more complicated cleanup process where certain APFS subvolumes are deleted and certain directory trees in others are wiped.</p> <p>This design, unconventionally, provides an EFI system partition for each installed OS. There are two reasons for this: first, each OS is logically a \"container\" and includes the EFI implementation itself, so it makes sense to isolate the ESP from that of other OSes. Second, due to the absence of EFI variable runtime services (see below), it would be difficult for multiple co-existing OSes to share an ESP and configure their respective EFI boot entries. Having separate ESPs allows us to just use the default boot path (<code>\\EFI\\BOOT\\BOOTAA64.EFI</code>) and avoid having to persist boot configurations. It also allows the ESP to be directly used as the <code>/boot</code> partition for an OS, without having multiple OSes colliding with each other (if desired).</p> <p>In the future, once open APFS drivers are deemed stable enough to use as a root filesystem, we would like to support full space-sharing coexistence with macOS; at that point only the EFI system partition would be required on top of an existing APFS macOS container.</p> <p>Due to the presence of multiple ESPs, OSes will need a way to figure out which is theirs. For typical mounts and boot purposes, that can be done with partition/FS IDs; this should mostly be a concern for OS installers which need to determine what ESP to install their bootloader into at installation time. For this purpose, m1n1 stage 1 is normally configured at installation time to provide (and forward) a Device Tree <code>/chosen</code> property named <code>asahi,efi-system-partition</code>, which contains the EFI system partition PARTUUID value.</p>"},{"location":"platform/open-os-interop/#boot-overview","title":"Boot overview","text":"<p>A typical boot of a reference Linux system will go as follows, continuing on from the Boot Flow section:</p> <ul> <li>iBoot2 loads the custom kernel, which is a build of m1n1</li> <li>m1n1 stage 1 runs and<ul> <li>Parses the Apple Device Tree (ADT) to obtain machine-specific information</li> <li>Performs additional hardware initialization (machine-specific)</li> <li>E.g. memory controller details, USB-C charging, HDMI display (on Mac Mini)</li> <li>Displays its logo on the screen (replacing the Apple logo)</li> <li>Loads its embedded configuration, which directs it to chainload from a FAT32 partition</li> <li>Initializes the NVMe controller</li> <li>Searches the GPT for the partition configured for chainloading, by PARTUUID.</li> <li>Mounts the partition as FAT32</li> <li>Searches for the filename configured for chainloading and loads it</li> <li>Shuts down the NVMe controller</li> <li>Chainloads to the loaded instance of m1n1 (as a raw binary blob), including forwarding any /chosen property configurations found in its embedded config.</li> </ul> </li> <li>m1n1 stage 2 runs and<ul> <li>Parses the Apple Device Tree (ADT) to obtain machine-specific information</li> <li>Re-initializes hardware, including anything stage 1 did not do (e.g. due to it being older)</li> <li>Searches its embedded payloads to find Device Trees and an embedded U-Boot image</li> <li>Selects an embedded Device Tree (FDT) appropriate for the current platform</li> <li>Personalizes the FDT with dynamic information transplanted from the ADT</li> <li>Performs any other hardware initialization to prepare the machine environment for Linux</li> <li>Loads the embedded U-Boot image and jumps to it</li> </ul> </li> <li>U-Boot runs and<ul> <li>Parses the FDT</li> <li>Initializes the keyboard for input</li> <li>Initializes NVMe</li> <li>Prompts the user to break into a shell if requested</li> <li>Mounts the appropriate EFI System Partition</li> <li>Brings up basic EFI services</li> <li>Locates the default EFI bootloader in the ESP, e.g. GRUB, and boots it</li> </ul> </li> <li>GRUB runs and<ul> <li>Uses EFI disk access services to mount the /boot filesystem (could be the ESP itself, could be something else)</li> <li>Locates its configuration file and additional components</li> <li>Presents the user with a boot menu, using EFI console/input services</li> <li>Loads the kernel and initramfs from /boot</li> <li>Jumps to the kernel</li> </ul> </li> <li>The Linux kernel boots as it would on any other UEFI+FDT platform</li> </ul> <p>This boot chain is designed to progressively bring the system closer to a \"typical\" ARM64 machine, so that subsequent layers have to worry less about the particulars of Apple Silicon machines.</p>"},{"location":"platform/open-os-interop/#m1n1","title":"m1n1","text":"<p>m1n1 is our first-stage bootstrap for Apple Silicon systems. Its purpose is to bridge between the XNU boot protocol and the Device Tree / ARM64 Linux boot protocol, and do low-level bring-up so that subsequent boot stages do not have to be concerned with it. See the m1n1 User Guide for more details on how it works.</p> <p>m1n1 can also be puppeteered via USB for development and reverse engineering purposes, including loading kernels to allow for a very fast build-test cycle. It also features a bare-metal hypervisor that can boot Linux or macOS and provide a virtualized UART over USB, and includes advanced Python-based event tracing framework. These features are not intended for end users, but we hope they make OS development and testing on these platforms as enjoyable as possible.</p> <p>m1n1 can be installed as a single stage, but on production systems it should be split into two versions, with the stage 1 build chainloading a second stage from the EFI system partition. This is important because stage 1 can only be modified by the user via booting in 1TR, which precludes it from being updated by another OS directly. By loading a second stage from NVMe, we can have it be updatable, along with its payloads.</p> <p>In the future, we intend to allow for the stage 2 chainload to maintain a secureboot chain, via signed m1n1 images. For this reason, the current chainloading code to load stage 2 from FAT32 is written in Rust, as it is part of the secureboot attack surface. This essentially eliminates the possibility of exploitable memory-safety bugs in that part of the code. The signature verification will also be implemented in Rust for this reason. The public key for verification will be configured at stage 1 installation time, and will be that of the entity expected to provide stage 2 builds for that particular OS container.</p>"},{"location":"platform/open-os-interop/#u-boot","title":"U-Boot","text":"<p>U-Boot provides the first point of local (keyboard) user interaction, and support for booting from USB or other external devices. It also implements EFI services that hide the specifics of the platform, making it look like a typical UEFI machine.</p> <p>Notably, U-Boot cannot provide particularly useful EFI runtime services. As the platform does not have an EFI variable store, and it is not practical to e.g. share NVMe access with a running OS, it won't be possible to make modifications to EFI boot configs from a running OS. Instead, those modifications would have to be made by changing configuration files directly. This shouldn't be an issue if different OSes use different ESPs.</p>"},{"location":"platform/open-os-interop/#grub","title":"GRUB","text":"<p>GRUB does the final Linux loading and provides users with the familiar kernel selection and option editing menu. GRUB does not need any patches to work on Apple Silicon machines, as it relies entirely on EFI services to do its job. It is up to the OS distribution to decide what to use here; GRUB is merely an example.</p>"},{"location":"platform/open-os-interop/#boot-schemes","title":"Boot schemes","text":"<p>Installed OSes are in control of the boot chain starting from m1n1 stage 2, and thus are free to manage it however they wish. For example, a Linux distro could append Linux kernels directly to m1n1 stage 2, or use U-Boot directly to boot kernels, or use the Linux EFI stub, or GRUB.</p> <p>OS installers booted via USB must use the standard UEFI boot protocol from a FAT32 EFI System Partition if they want to work with the UEFI-only setup mode of the Asahi Linux Installer (which installs m1n1 stage 2 + U-Boot set up like that). The installer may overwrite this with another mechanism as part of the installation, if desired, although this is not recommended without a good reason: keeping the second stage blob installed by the Asahi Linux Installer may allow for booting on machines not yet supported by a given OS release, by providing new device trees, if those platforms are sufficiently backwards compatible.</p> <p>For OSes that use the typical m1n1+U-Boot approach, it is recommended that they check the existing version in the ESP and refuse to downgrade automatically it if the package provided by the OS is older. This, again, allows for future hardware to be partially supported with only an installer update. TODO: specify how this version check should work (we need to start tagging m1n1 builds properly).</p>"},{"location":"platform/open-os-interop/#initial-installation","title":"Initial installation","text":"<p>On these machines, there is a mismatch between the point where a third-party kernel boots (after iBoot2), and the required per-OS boot components (including iBoot2 itself, firmware, and other files, as well as the recoveryOS image and XNU kernel for it). In addition, Apple's tooling requires these files to be laid out in a certain way in the Preboot partition in order to work properly in the OS selection menus, beyond the requirements imposed by iBoot1/2 themselves. In effect, creating a new OS container requires, essentially, installing macOS minus the root filesystem.</p> <p>Thankfully, all the required components can be fetched from the restore images (IPSW files) which are publicly available at well-known, stable URLs. We have implemented this process in asahi-installer, a Python-based installation framework that is intended to run from 1TR. It streams the required bits of the IPSW file, avoiding a complete download, and sets up the partitions and contents as required to boot recoveryOS and subsequently a custom kernel.</p> <p>We don't expect OSes to want to reinvent this particular wheel (trust us, you don't want to), so we'd like to make the installer flexible enough to support bootstrapping different installation flows.</p>"},{"location":"platform/open-os-interop/#launching-the-installer","title":"Launching the installer","text":"<p>At this time, the Asahi Linux installer is supported as a purely online installer (<code>curl | sh</code> style), which can be launched from macOS or from recoveryOS. OSes to be installed are downloaded on demand (streamed directly to the target disk without any intermediate storage). Alternatively, users may choose to install only a UEFI boot environment, which can then boot any OS from USB using the standard mechanisms, leaving unpartitioned space for e.g. an OS installer to use.</p> <p>Future installation options could include:</p> <ul> <li>USB netinstall images/bundles, setting up the installer as \"bootable install media\". This can be set up by just unpacking some files to a FAT32 partition on a USB drive, so it is easy for users to use, and will allow them to select the installer from the boot picker (more info on how this magic works). It would still fetch the OS to be installed from the internet.</li> <li>USB local install images/bundles, which can also serve as UEFI install media for later or for other platforms. This will install the target OS from USB, but will still hit Apple's CDN for the Apple components, making the install not truly offline.<ul> <li>An option for end users to add the Apple components, e.g. by running a script from the USB drive, making it fully offline</li> <li>An option for end users to add the Apple components when creating the USB installer, e.g. by running a script that downloads them and provisions the installer in one go, instead of a pre-baked image.</li> <li>We want to add this as a feature to the online installer, e.g. \"create a bootable USB installer\" instead of actually doing the install.</li> </ul> </li> <li>Packaging as a macOS app (this would already be part of USB install modes anyway)<ul> <li>Though this runs into GateKeeper issues with unsigned downloads if downloaded \"normally\" by users from a browser...</li> </ul> </li> </ul>"},{"location":"platform/open-os-interop/#firmware-provisioning","title":"Firmware provisioning","text":"<p>Apple Silicon machines rely on a large number of firmware blobs to work. While the majority of these are already loaded by the time a third-party OS boots, there is a small subset that isn't. Since these blobs do not have a redistributable license, this presents an issue for those OSes that need to have access to the blobs. Thankfully, the blobs are available in the IPSW files created by the initial installer. We propose a \"vendor-firmware\" mechanism to pass those blobs onto the booted/installed OS.</p> <p>Note: There is currently a hack in the installer to dump out all firmware raw to another place in the ESP, so we can provide a script for users to extract the rest of it into a form compliant with this specification. This will go away once all the extractors are done, and is intended as a temporary ad-hoc thing.</p>"},{"location":"platform/open-os-interop/#packaged-blobs","title":"Packaged blobs","text":"<p>Currently, these blobs are packaged:</p> <ul> <li>Broadcom FullMAC WiFi firmware</li> <li>Broadcom Bluetooth firmware</li> <li>ASMedia xHCI firmware</li> <li>Apple MTP multitouch firmware (M2 machines)</li> </ul> <p>And these blobs aren't yet packaged:</p> <ul> <li>AVD (Apple Video Decoder) Cortex-M3 firmware</li> </ul> <p>Details on Broadcom FullMAC WiFi firmware naming: https://lore.kernel.org/all/20220104072658.69756-10-marcan@marcan.st/</p>"},{"location":"platform/open-os-interop/#vendorfw-package","title":"VendorFW package","text":"<p>The stub OS installer collects available platform firmware from the IPSW, and packages it as as cpio archive. The cpio file contains:</p> <ul> <li>The firmwares in <code>/lib/firmware</code> hierarchy format, under the <code>vendorfw</code> subdirectory (e.g. <code>/vendorfw/brcm/foo.bin</code>).</li> <li><code>/vendorfw/.vendorfw.manifest</code>: A text file containing lines of the following two forms:<ul> <li><code>LINK &lt;src&gt; &lt;tgt&gt;</code> : hard link</li> <li><code>FILE &lt;name&gt; SHA256 &lt;hash&gt;</code>: file</li> </ul> </li> </ul> <p>This cpio is named <code>firmware.cpio</code> and placed in the EFI system partition under the <code>vendorfw</code> directory.</p>"},{"location":"platform/open-os-interop/#os-handling","title":"OS handling","text":"<p>Ideally, the bootloader should load the <code>firmware.cpio</code> archive directly as an early initrd, which allows the booted OS to access firmware without any race conditions or complications. However, this mechanism may only be practical for booting directly-installed OSes, not booting installers from USB, and it may not work with all bootloaders.</p> <p>OSes should check whether the initrd was loaded by the bootloader. If it wasn't, they should use the following algorithm to locate and load it:</p> <ul> <li>Look for the <code>asahi,efi-system-partition</code> /chosen Device Tree property, to find the ESP UUID (see above). If not found, abort.</li> <li>Load the internal NVMe drivers and wait for the device to be available.</li> <li>Locate the ESP using the UUID obtained above.</li> <li>Mount the ESP (read-only is fine)</li> <li>Find the /vendorfw/firmware.cpio file</li> <li>Extract it or make it available as necessary</li> </ul> <p>The OS should then ensure that the loaded firmware is persisted in memory throughout the current boot.</p>"},{"location":"platform/open-os-interop/#linux-specific","title":"Linux-specific","text":"<p>For Linux, we propose a patch to add <code>/lib/firmware/vendor</code> to the Linux kernel firmware loading path list. This allows us to keep vendor firmware segregated from distro-managed firmware (e.g. linux-firmware), and means it can live in a tmpfs or other mount, separate from the root filesystem (which could then be immutable). It can also override linux-firmware installed firmwares, if necessary (while we do not anticipate this, it is useful to have the option should the need arise).</p> <p>Distros should then ship an initramfs with a <code>/lib/firmware/vendor -&gt; /vendorfw</code> symlink, to allow the kernel to load early-loaded firmware directly. Where possible, they should have their bootloader directly load the CPIO. However, this might be difficult for external boot scenarios, or when /boot isn't directly the ESP. To support the fallback scenario, there are a few requirements:</p> <ul> <li>All drivers requiring firmware must be built as modules</li> <li>Firmware must be located and loaded before udev starts up. This is because udev can arbitrarily cause modules to load and devices to probe (even if not triggered directly, the kernel can e.g. discover PCI devices while the initramfs is already running), and this creates race conditions where firmware might not be available when it is needed.</li> </ul> <p>The initramfs must then forward this firmware into the final root filesystem. The recommended mechanism for this is to mount a tmpfs on <code>/lib/firmware/vendor</code> under the target root filesystem tree, and the copy the firmware there.</p> <p>An example implementation for Linux can be found in the asahi-scripts repository.</p> <p>Direct CPIO load can be accomplished with stock GRUB if <code>/boot</code> is the ESP mountpoint (i.e. GRUB and the kernels are directly installed in the ESP), using <code>GRUB_EARLY_INITRD_LINUX_STOCK=vendorfw/firmware.cpio</code> in <code>/etc/default/grub</code>.</p> <p>Note: an older version of this document proposed an alternate mechanism with a tarball and incremental updates of firmware on the root filesystem. This was found to be error-prone, insufficient when the initramfs is not involved, and incompatible with immutable-root setups, and is now deprecated.</p>"},{"location":"platform/pc-boot-differences/","title":"Boot flow deviations from the AMD64 PC platform","text":"<p>The M1 machines use a boot process that on the surface looks very different from how a regular PC or older Intel Mac boots. However, there is logic to the madness. This document gives you a way of thinking that you can use to better visualize how things work on Apple Silicon machines.</p>"},{"location":"platform/pc-boot-differences/#ssd","title":"SSD","text":"<p>The SSD on M1 machines contains both boot components and the OS that is installed on the machine. This is different from UEFI machines. Think of the SSD on Apple Silicon as being both parts of UEFI firmware flash memory (in particular, configuration is stored on the SSD), and the main OS NVMe device you boot from, including the OS loader, combined. If you're familiar with Android devices, those use a similar model.</p> <p>The SSD uses GPT, just like disks under most UEFI systems. The first partition is used for boot-related stuff, configuration, and sometimes firmware, kind of like the UEFI variable firmware volume and other bits. The OS is installed in a container that includes a volume that contains the OS bootloader, some firmware, and the OS kernel. Think of this as similar to the EFI System Partition (ESP).</p> <p>iBoot can only understand APFS, and all three partitions on the GPT disk are APFS containers themselves containing multiple APFS volumes.</p>"},{"location":"platform/pc-boot-differences/#nor-flash","title":"NOR Flash","text":"<p>There is also a separate flash chip, called a NOR flash. This is the same kind of chip that contains the UEFI firmware on PCs. It only contains product information and the first stage of iBoot. You can think of it as the early portion of the UEFI firmware, enough to boot the OS bootloader from internal storage but not including a huge amount of drivers like UEFI does.</p>"},{"location":"platform/pc-boot-differences/#securerom","title":"SecureROM","text":"<p>This is a ROM embedded in the M1 and is truly the first code that runs. Its job is to load the first stage of iBoot from NOR and run it.</p> <p>Intel/AMD PCs also have various ROMs and a complicated boot process, but we never hear about those parts because they are proprietary. The idea that modern Intel PCs directly start executing code from the firmware in Flash without any initialization is an illusion, but we like to pretend that that's still how it works.</p>"},{"location":"platform/pc-boot-differences/#iboot","title":"iBoot","text":"<p>iBoot is the main bootloader on M1 machines. It is small. It cannot understand external storage. It does not support USB. It does not have a UI. All it can do is boot from internal storage, and show an Apple logo and a few error messages.</p> <p>iBoot is like the lower level components of UEFI firmware on a PC. Enough to boot from internal NVMe, but without any USB drivers.</p> <p>There are two stages to iBoot. One of them lives in NOR Flash, and its job is to understand APFS and load the second stage from the SSD. This is like system firmware, and it is persistent. The second stage is effectively a macOS bootloader, and boots the macOS kernel. This is like boot.efi on Intel Macs.</p>"},{"location":"platform/pc-boot-differences/#recovery-mode","title":"Recovery Mode","text":"<p>Recovery Mode is a macOS instance that is built in to a separate partition. It is a secure environment where you can select which OS to boot, or go into a recovery shell/environment. When you hold down the power button on an Apple Silicon machine, you actually boot macOS. The boot options screen is already a full-screen macOS application. Once you go into recovery mode, you can pull up a terminal and you get a root shell. You can use the network, curl, sh, perl, and other tools that come with the installation. You can run arbitrary scripts and the environment has commands useful for configuring boot. You can run your own ad-hoc signed binaries (as of 11.2). However, SIP and AMFI (entitlement) restrictions apply, so you cannot grant your own binaries e.g. permission to interact with the boot policy/SEP.</p> <p>Recovery mode is like a supercharged UEFI shell and UEFI setup menu combined into one. It should be powerful enough for us to build a Linux installer off of. Think of it as the rest of the UEFI firmware, and more.</p>"},{"location":"platform/pc-boot-differences/#macos","title":"macOS","text":"<p>macOS boots from the second GPT partition. It is the real OS. It starts with the Darwin kernel and goes from there.</p> <p>Asahi Linux replaces or complements macOS. This point is where we are allowed to replace things and boot our own code.</p> <p>The concept of an \"OS\" for Apple Silicon macs includes both the OS loader (the second stage of iBoot) and the Darwin kernel and filesystem. We can replace the kernel, but not the second stage of iBoot - the kernel is the point in the boot process where Apple has developed the ability to downgrade security and run our own code. We also need to keep the overall structure looking like macOS. This means that, effectively, Linux will bootstrap off of a \"shell\" of macOS, a volume with just iBoot and a few files to convince Apple's boot infrastructure that it is a legitimate OS that can be booted. Think of this whole thing as a somewhat complicated EFI System Partition.</p> <p>Since there are special requirements on how the first boot stage that replaces macOS is installed, it is inconvenient to update from Linux. Therefore, what we will do is insert our own bootloader chain at this point. You can think of this as the UEFI secureboot \"shim\" used to install Linux on UEFI environments that use the Microsoft secureboot keys. The signing is different; we won't be needing nor using any Apple developer certificates for this; instead what will happen is that the install process will \"sign\" the first stage for use on a single machine only - but the concept is similar. After this stage, we can chainload to anything we want from filesystems more standard in Linux land, such as ext4 or FAT32.</p>"},{"location":"platform/pc-boot-differences/#dfu","title":"DFU","text":"<p>DFU is a recovery mode built in to the SecureROM of the M1 that allows flashing the device from scratch, if iBoot and/or recovery mode are gone. DFU works even if the data in the NOR Flash is gone.</p> <p>DFU does not exist on most PCs. If the UEFI flash is corrupted, the PC is bricked. DFU mode is a unique feature of Apple Silicon devices.</p> <p>Some PC motherboards implement a similar feature as part of a separate chip, which can flash the UEFI firmware from a USB stick without actually turning on the motherboard normally, but this is only common in higher-end stand alone motherboards.</p> <p>Thanks to DFU mode, it is just about impossible to brick an Apple Silicon machine in such a way that it cannot be recovered externally. The worst case scenario is that the product information (serial number, calibration, etc) in NOR is erased. If that happens, in theory, the DFU process should pull that information from Apple during the phone-home steps of the recovery process. Even then, this happening by accident is vanishingly unlikely.</p>"},{"location":"platform/quirks/","title":"Apple Silicon Platform Quirks","text":"<p>This page is basically a TL;DR of Open OS Ecosystem on Apple Silicon Macs. It is written for general Linux power users who are used to the boot process on other platforms. Read that page for the full details.</p>"},{"location":"platform/quirks/#this-is-not-a-typical-uefi-platform","title":"This is not a typical UEFI platform","text":"<p>On typical UEFI systems, UEFI is the native boot firmware and expected to manage any and all installed OSes. This is not the case on Apple Silicon. We only use the U-Boot UEFI layer as a bridge layer to allow you to use existing/familiar bootloaders and remain compatible with typical systems. This has a few implications:</p> <ul> <li>There is no UEFI variable storage, because the platform has no native UEFI support that could accommodate it. This means you cannot configure UEFI boot. U-Boot will always boot from the default UEFI executable (<code>\\EFI\\BOOT\\BOOTAA64.EFI</code>).</li> <li>You can have multiple UEFI instances and each instance is intended to boot only one OS. Multi-boot is achieved at the native OS install layer and the native boot picker, not via UEFI. Installing multiple OSes under one UEFI subsystem is not supported and liable to breaking in the future for multiple reasons.</li> <li>That means there can be multiple EFI System Partitions, which means that finding the ESP by type UUID is not reliable. Any tools that attempt to do so will be broken for some subset of users.</li> </ul> <p>When you boot an OS on an Apple Silicon platform, there are two concepts of an ESP:</p> <ul> <li>The ESP that the OS was booted from, which could be on a USB drive if you told U-Boot to boot from USB.</li> <li>The System ESP which is where U-Boot itself and m1n1 stage 2 are installed, along with vendor firmware. This is always on the internal NVMe.</li> </ul> <p>The System ESP can be identified by looking up the <code>asahi,efi-system-partition</code> chosen variable in the device tree, which you can find at <code>/proc/device-tree/chosen/asahi,efi-system-partition</code>. This variable always contains the PARTUUID of the System ESP, regardless of where you told U-Boot to boot from.</p> <p>The OS ESP is usually configured in <code>/etc/fstab</code> by UUID or PARTUUID and mounted at <code>/boot/efi</code> or <code>/boot</code>.</p> <p>On standard internal NVMe installs, there is a single ESP which fulfills both roles.</p>"},{"location":"platform/quirks/#firmware-is-loaded-and-provided-on-boot","title":"Firmware is loaded and provided on boot","text":"<p>We do not ship native platform firmware in <code>linux-firmware</code> or any other separate firmware package. Instead, there are three kinds of firmware:</p> <ul> <li>System-global firmware that is updated by macOS together with macOS updates. This only ever goes forward in version, never backwards (unless you do a full DFU erase), and is intended to be backwards-compatible. It is loaded on boot by iBoot.</li> <li>OS-paired firmware that is installed by the Asahi Linux installer into the stub APFS partition and directly loaded by iBoot. This is not backwards-compatible and whatever OS you install must support the specific firmware version used. This is why going into expert mode in the installer and picking a non-default version (despite all the warnings) will break your system. There is currently no way to upgrade this, but there will be in the future once there's a good reason to upgrade it.</li> <li>Extracted vendor firmware that is collected by the Asahi Linux installer and placed in <code>\\vendorfw\\vendorfw.cpio</code> in your System ESP. This is loaded into memory by either your bootloader (as an initramfs) or by your initramfs, and extracted into a tmpfs mounted on <code>/lib/firmware/vendor</code> on every boot so the kernel can load it. This should match your OS-paired firmware version. The <code>asahi-fwextract</code> package contains the same extraction script as the Asahi Linux installer and is used to upgrade <code>vendorfw.cpio</code> when new kinds of firmware are added, to avoid having to go back to macOS and run the Asahi Linux installer.</li> </ul>"},{"location":"platform/quirks/#oses-should-be-considered-paired-to-their-uefi-environment-and-esp","title":"OSes should be considered paired to their UEFI environment and ESP","text":"<p>The Linux kernel ships with device trees, and on typical setups with our Asahi enablement scripts, these device trees are installed alongside m1n1 and u-boot into the System ESP and updated when you update your kernel. U-Boot and m1n1 themselves are also installed as packages and updated that way. That means that there can only be one OS installed that owns the System ESP and manages the bootloader there.</p> <p>Nothing stops you from booting other OSes from such a UEFI environment, such as temporarily booting into a USB drive for recovery purposes, but there is no absolute guarantee that mismatched kernels will work with foreign device trees. In the past, changes have broken booting entirely. This is less likely these days, but could still happen. More likely, you may experience missing features or broken drivers. In general, all device tree bindings which are already upstream should remain backwards-compatible, but all bets are off with any drivers not yet upstream.</p> <p>If you nonetheless want to boot more than one OS from the same UEFI partition (which should really only be done for experimental or recovery purposes or if you intend to manage this all yourself manually, not as a long-term setup, and is not supported by us), you should make sure that only one OS owns your System ESP and will update the <code>/m1n1/boot.bin</code> file there. That means you need to edit/create <code>/etc/default/update-m1n1</code> file on all but one of the OS installs you intend to run, and add the <code>M1N1_UPDATE_DISABLED=1</code> variable there. This will stop the standard m1n1 update script from running, and therefore disable m1n1, u-boot, and device tree updates.</p> <p>Future features, like SEP support for encryption and secret storage, may further depend on this pairing and are not expected to work with multiple OSes sharing one ESP/UEFI container.</p> <p>On the other hand, it is perfectly acceptable to have one single external USB install that you always boot (e.g. from a \"UEFI only\" install with the Asahi Linux installer, which only sets up the APFS stub and System ESP), and to allow that install to manage your System ESP on the internal disk. In that case, OS tooling needs to use <code>/boot/efi</code> or <code>/boot</code> (depending on the setup) when it wants to update its own EFI bootloader (e.g. GRUB), and locate the System ESP by using the UUID in <code>/proc/device-tree/chosen/asahi,efi-system-partition</code> when it needs to update m1n1/u-boot/device trees or locate <code>vendorfw.cpio</code>. This is already the case in our reference implementation in asahi-scripts.</p>"},{"location":"platform/security/","title":"Apple Silicon Platform Security","text":""},{"location":"platform/security/#introduction","title":"Introduction","text":"<p>The Apple Silicon platform has been designed from the ground up to offer properly configured systems an extremely secure operating environment that is resilient to multiple forms of attack. The security model is based on the Swiss Cheese Model - no single security mechanism can guarantee an acceptable level of security on its own, so mechanisms are layered to cover each others' holes.</p> <p>Platform security features are orchestrated by the Secure Enclave Processor (SEP). An overview of the SEP's features, the different boot policies, and the boot picker itself is available at Introduction to Apple Silicon. This page instead attempts to extrapolate upon and clarify the concepts which may be of interest to users and system maintainers.</p> <p>At a high level, the Apple Silicon security model in Full Security mode is comprised of six key concepts:</p> <ol> <li>The integrity of system and boot-critical data is guaranteed at all times</li> <li>Security policies are configurable on a per-container basis</li> <li>The hardware and user together form the trust root for all security operations</li> <li>The security and boot policy of one container shall not affect any other containers</li> <li>All data is transparently encrypted at rest</li> <li>Decryption of user data can be gated behind authentication</li> </ol> <p>This document covers the implementation of the security model on a standard macOS container in Full Security mode, and how the system has been engineered to allow a user to execute arbitrary code (i.e. third party operating systems) without compromising on the guarantees Apple makes of macOS in Full Security mode. This is a unique selling point of the platform, as it departs from the all-or-nothing approach of the PC's Secure Boot in some very clever ways. It is the perfect way to illustrate why one must exercise caution when attempting to make equivalencies between the PC and Apple Silicon.</p>"},{"location":"platform/security/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>System data integrity</li> <li>Per-container security policies</li> <li>The user trust root</li> <li>Paired recovery</li> <li>Disk encryption</li> <li>Apple's unspoken agreement</li> <li>How we uphold this agreement</li> </ul>"},{"location":"platform/security/#system-data-integrity","title":"System data integrity","text":"<p>The platform goes to great lengths to verify and maintain the integrity of system data. All system files are, at minimum, signed and hashed by Apple. Critical firmware components, such as sepOS (and in older versions, iBoot) are also encrypted. The system verifies the integrity of all of these components before they are allowed to execute. If any of these components fail verification for any reason, the system will fail to boot and direct the user to restore their machine.</p> <p>This model extends from the firmware and bootloader up into macOS itself. The SEP maintains a Boot Policy for each APFS container, which enrolls a macOS kernelcache and system data volume allowed to be booted. The kernelcache is signed by Apple, and its hash is recorded in the SEP's Boot Policy. If the hash of the provided kernelcache is mismatched with the one in the SEP's Boot Policy or it has not been signed by Apple, the system will refuse to boot that APFS container.</p> <p>The OS snapshot itself is a hashed disk image. Every file inside it is also hashed, and the Merkle tree of these hashes is used to compute a final hash known as the Volume Seal which is used to sign the volume. If the hash of the image itself or the seal does not match the SEP's Boot Policy, then the system will not boot. Mutable user data is stored on an entirely different volume on the container, and is unioned with the snapshot to be presented as a single filesystem to the user only after the snapshot has been verified. No file may intersect the OS snapshot and the user data volume, and it is impossible to mutate the snapshot at all in Full Security mode. This feature is known as Sealed System Volume (SSV).</p> <p>An enrolled kernelcache can also not be used to pivot to an untrusted root. A kernelcache can only be used to mount and boot the OS snapshot that it is enrolled for in the Boot Policy. The SEP will halt booting if a kernelcache is attempting to mount an OS snapshot it is not authorised to mount. This prevents the capturing of the entire system from one compromised container.</p>"},{"location":"platform/security/#per-container-security-policies","title":"Per-container security policies","text":"<p>Apple knows that this level of lockdown is not suitable in all cases for all users. What if someone wants to develop and test a kernel extension, for example? On Intel Macs, tampering with the system files could be achieved by disabling System Integrity Protection. On Apple Silicon, Apple have taken a more granular approach, with the SEP able to track security policies on a per-container level. This allows users to maintain a fully secure macOS installation while also experimenting with a more permissive environment.</p> <p>Apple have stated publicly that the intention for this feature is to allow third-party OS installation without Apple having to compromise on their security guarantees for macOS, and have even stated that they would welcome Microsoft porting Windows to the platform.</p> <p>An APFS container recognised as a valid macOS system (certain filesystem structures must be present) can be placed into Permissive Security mode. This is often billed as allowing users to \"run\" arbitrary code, however there is some nuance here. What is actually being allowed is the enrollment of macOS kernelcaches that are not signed by Apple into a Boot Policy for the container, and the disabling of SSV. The user provides a kernelcache to the SEP which hashes it, signs it, and creates a Boot Policy for the container.</p> <p>Other system integrity guarantees still apply to Permissive Mode containers. The system will still refuse to boot if the firmware or bootloader has been compromised, likewise if the user-provided kernelcache is tampered with after being enrolled in the SEP. The paired recoveryOS snapshot must also still be signed by Apple for reasons we will get into soon. If the user wishes to change the kernelcache again after enrolling it, they must enroll another. This ensures the platform that you trust the binary.</p> <p>But what if a bad actor gets into your Permissive Security container? Wouldn't they be able to enroll a new kernelcache and silently capture the container from under your nose? Unsurprisingly, Apple thought of this and have a very simple way to mitigate this attack vector.</p>"},{"location":"platform/security/#the-user-trust-root","title":"The user trust root","text":"<p>While the SEP is the hardware trust root for cryptographic operations, there is in fact another component which forms a trust root for operations that alter a container's security or boot settings. You.</p> <p>The user's interaction with the SEP forms the ultimate trust root for the platform's security model.  Upon initial setup of an Apple Silicon machine, the SEP enrolls a set of \"Machine Owner\" credentials,  which are the credentials of the first macOS account set up on the machine in a Full Security container. This set of Machine Owner credentials is used to authenticate and sign any operations that alter the state of a container's security or boot policy. This alone does not create a \"true\" hardware trust root out of the user, since someone may capture the Machine Owner credentials, but the SEP is smart enough to do one more check to make sure the Machine Owner is who they say they are.</p> <p>Apple Silicon machines can be booted in various states, which are controlled by the SEP and iBoot. One of these states, 1TR, can only ever be entered from a cold boot by holding the physical power button, and authenticating with Machine Owner credentials. If the SEP is not satisfied that both these conditions have been intentionally met (e.g. the power button is released prematurely), then it will not register a 1TR boot. Security operations such as demoting a container to Permissive Security can only be done from 1TR. The SEP will simply refuse to complete the transaction if it is not satisfied that the request originated from a valid 1TR environment. Some operations, such as installing a custom boot object, require the Machine Owner credentials to be entered a second time.</p> <p>This allows the SEP to form a hardware trust root out of the user themself with which to sign security policy transactions, guaranteeing to itself that the owner of the machine explicitly trusts the operation being requested. This is sufficient to mitigate most classes of attack that could compromise the boot process on any container,  whether locally or remotely executed.</p>"},{"location":"platform/security/#paired-recovery","title":"Paired recovery","text":"<p>This one is very simple. Starting with macOS 12, booting into 1TR takes you to the paired recovery snapshot of the blessed APFS container. The SEP will only let you make changes to the blessed container, which helps to limit the spread of damage if a container is somehow compromised to the point where a malicious actor has somehow managed to bypass both the physical presence and Machine Owner checks.</p>"},{"location":"platform/security/#disk-encryption","title":"Disk encryption","text":"<p>Since the introduction of the T2, Macs have had quite robust and transparent per-volume encryption. It is for this reason that Apple cannot replace faulty SSDs in post-T2 Macs without total data loss. The default state for this system is data encrypted at rest - the machine will transparently decrypt the data in flight with its own keys, while it remains encrypted on the disk. There is almost no performance penalty for this. On Apple Silicon machines, the SEP generates a Volume Encryption Key (VEK) and eXtended Anti-Replay Token (xART) for each APFS volume. The xART prevents replay attacks from capturing the VEK, which is stored in the SEP's own airgapped memory and can never be read by the application cores to further harden it against capture.</p> <p>Data on the volume is encrypted/decrypted in flight. sepOS passes the keys directly to the NVMe controller, bypassing the application cores to harden against key capture. It is important to be aware that once the machine has powered on and the SEP is satisfied with the state of iBoot and the system firmware, the keys are unwrapped and all data is accessible in the clear across all partitions. This is where FileVault comes in for macOS.</p> <p>When FileVault is enabled for an APFS volume, the VEK and xART are wrapped with a Key Encryption Key (KEK), which is backed by user credentials from the macOS container in question. The machine will be unable to read the user data volume of the protected container until these credentials are provided at startup. Enabling this is instantaneous on Apple Silicon machines, since the only required operation is generating the KEK and and a recovery key. The system snapshot, Preboot, and recovery volumes are not protected by FileVault. These partitions are immutable, backed by the SEP, and contain no user data and therefore do not particularly benefit from FileVault. All encryption keys are destroyed by the SEP when the Machine Owner requests the machine to be wiped, guaranteeing that any residual data is indecipherable even to data recovery programs.</p> <p>We can very emulate this with LUKS on top of LVM and achieve effective full disk encryption. We have the luxury of disregarding the APFS stub since the only things we care about there are m1n1 and recoveryOS, both of which are verified, signed and tamper-proof. An existing weakness is that <code>/boot</code> must be stored in the clear, and there is currently no Secure Boot or Measured Boot analogue with which we can guarantee the integrity of the kernel or initramfs. Users may choose to point their bootloader to removeable media once this is better supported to mitigate this. Beyond that, any bootloader which supports LUKS and LVM will work with a standard <code>cryptsetup</code> workflow once the user has set up their partitions to their liking.</p>"},{"location":"platform/security/#apples-unspoken-agreement","title":"Apple's unspoken agreement","text":"<p>When documenting the security model, Apple use the example of an XNU kernel developer wishing to test their changes on a second macOS installation. It is apparent however that the platform security model was engineered to allow third party operating systems to coexist with macOS in a way that does not compromise any of Apple's security guarantees for macOS itself. Rumours circulating that Apple are actively hostile towards efforts such as Asahi, or that their security must be bypassed or jailbroken to run untrusted code are unfounded and false. In fact, Apple have expended effort and time on improving their security tooling in ways that only improve the execution of non-macOS binaries. An example of this is giving their Boot Policy configuration tool the ability to wrap raw AArch64 code in a proper Mach-O format starting with macOS 12.1. This is only ever required for enrolling a boot object that is not already a macOS kernelcache. </p> <p>That said, an agreement necessarily cuts two ways. Given that Apple Silicon Macs are essentially scaled up iDevices, Apple went out of their way to alter that security model to be more flexible and it is not hard to infer why. At some level in the company, someone would have been well aware that a project like Asahi would be inevitable, whether that be with their consent or not. Rather than risk the jailbreaking community embarrassing their privacy and security marketing guarantees trying to get arbitrary code to run, they have given us the tools to easily do it without needing to touch their sandbox. Thus, we take this functionality as coming with one simple condition - do not, under any circumstances, attempt to poison the macOS container.</p>"},{"location":"platform/security/#how-we-uphold-this-agreement","title":"How we uphold this agreement","text":"<p>Asahi Linux creates a small APFS container and volume set with the correct file structure to be recognised as a valid OS, then uses Apple's tooling to set its security to Permissive and enroll m1n1 as its signed boot object. We do not - and never will - alter the security settings of any other OS volume, nor will Apple's security policies for those containers affect the Asahi volume. More details can be found at Open OS Ecosystem on Apple Silicon Macs.</p>"},{"location":"platform/stock-partition-layout/","title":"Stock SSD Partition Layout","text":""},{"location":"platform/stock-partition-layout/#summary","title":"Summary","text":"<ul> <li>disk0: main SSD<ul> <li>disk0s1 = disk1: \"iBootSystemContainer\" - system-wide boot data</li> <li>disk1s1: \"iSCPreboot\" - boot policies, system firmware (NOR) version metadata, SEP firmware (sometimes), AP tickets</li> <li>disk1s2: \"xARTS\" - SEP trusted storage</li> <li>disk1s3: \"Hardware\" - logs, factory data cache, activation-related files</li> <li>disk1s4: \"Recovery\" - empty</li> <li>disk0s2 = disk3: \"Container\" - macOS install</li> <li>disk3s1: \"System\" - OS (root filesystem, sealed)</li> <li>disk3s2: \"Preboot\" - iBoot2 (OS loader), iBoot-loaded firmwares, Darwin kernelcache, firmwares, devicetree, other preboot stuff</li> <li>disk3s3: \"Recovery\" - OS-paired RecoveryOS: iBoot2, firmwares, Darwin kernelcache, ramdisk image</li> <li>disk3s4: \"Update\" - macOS update temp storage and logs</li> <li>disk3s5: \"Data\" - user data (root filesystem, merged). This volume's UUID defines the identity of the OS install.</li> <li>disk3s6: \"VM\" - swap partition (when needed)</li> <li>disk0s3 = disk2: \"RecoveryOSContainer\" - System RecoveryOS</li> <li>disk2s1: \"Recovery\" - one or more sets of {iBoot2 (OS loader), Darwin kernelcache, firmwares, devicetree, other preboot stuff}</li> <li>disk2s2: \"Update\" - system firmware update temp storage and logs</li> </ul> </li> </ul>"},{"location":"platform/stock-partition-layout/#partitioning","title":"Partitioning","text":"gdisk dump <pre><code>Disk /dev/disk0: 61279344 sectors, 233.8 GiB\nSector size (logical): 4096 bytes\nDisk identifier (GUID): 284E6CE4-CABA-4B49-8106-CE39AB7B5CD9\nPartition table holds up to 128 entries\nMain partition table begins at sector 2 and ends at sector 5\nFirst usable sector is 6, last usable sector is 61279338\nPartitions will be aligned on 2-sector boundaries\nTotal free space is 0 sectors (0 bytes)\n\nNumber  Start (sector)    End (sector)  Size       Code  Name\n   1               6          128005   500.0 MiB   FFFF  iBootSystemContainer\n   2          128006        59968629   228.3 GiB   AF0A  Container\n   3        59968630        61279338   5.0 GiB     FFFF  RecoveryOSContainer\n</code></pre> <p>The raw disk contains a GUID partition table with a standard protective MBR and three partitions. These correspond to /dev/disk0s1, /dev/disk0s2, /dev/disk0s3 on macOS.</p> <p>Each of the 3 partitions is an APFS container, containing several subvolumes. The type GUIDs are as follows:</p> <ul> <li>69646961-6700-11AA-AA11-00306543ECAC: iBoot System Container (ASCII: \"idiag\", diskutil: <code>Apple_APFS_ISC</code>)</li> <li>7C3457EF-0000-11AA-AA11-00306543ECAC: APFS (diskutil: <code>Apple_APFS</code>)</li> <li>52637672-7900-11AA-AA11-00306543ECAC: Recovery OS (ASCII reads: \"Rcvry\", diskutil: <code>Apple_APFS_Recovery</code>)</li> </ul> <p>Note that most the unique (not type) GUIDs shown on this page will be unique for each user.</p>"},{"location":"platform/stock-partition-layout/#disk0s1-disk1-iboot-system-container","title":"disk0s1 / disk1: iBoot System Container","text":"diskutil info <pre><code># diskutil apfs list /dev/disk1\n|\n+-- Container disk5 E0718E49-1903-4793-B427-FCFEC4A3E72C\n    ====================================================\n    APFS Container Reference:     disk1\n    Size (Capacity Ceiling):      524288000 B (524.3 MB)\n    Capacity In Use By Volumes:   18010112 B (18.0 MB) (3.4% used)\n    Capacity Not Allocated:       506277888 B (506.3 MB) (96.6% free)\n    |\n    +-&lt; Physical Store disk1 (No UUID)\n    |   ------------------------------\n    |   APFS Physical Store Disk:   disk0s1\n    |   Size:                       524288000 B (524.3 MB)\n    |\n    +-&gt; Volume disk5s1 B33E8594-382A-41EA-A9FE-6D2362B31141\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk1s1 (Preboot)\n    |   Name:                      iSCPreboot (Case-insensitive)\n    |   Mount Point:               Not Mounted\n    |   Capacity Consumed:         6213632 B (6.2 MB)\n    |   Sealed:                    No\n    |   FileVault:                 No\n    |\n    +-&gt; Volume disk5s2 CA25E52A-3425-4232-926F-F840D359A9E2\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk1s2 (xART)\n    |   Name:                      xART (Case-insensitive)\n    |   Mount Point:               Not Mounted\n    |   Capacity Consumed:         6311936 B (6.3 MB)\n    |   Sealed:                    No\n    |   FileVault:                 No\n    |\n    +-&gt; Volume disk5s3 0566ABD3-9EA7-46CA-90C7-CDF4DD0E94B4\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk1s3 (Hardware)\n    |   Name:                      Hardware (Case-insensitive)\n    |   Mount Point:               Not Mounted\n    |   Capacity Consumed:         507904 B (507.9 KB)\n    |   Sealed:                    No\n    |   FileVault:                 No\n    |\n    +-&gt; Volume disk5s4 F4E0743D-D91F-410B-9569-4196540E4B8D\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk1s4 (Recovery)\n        Name:                      Recovery (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         20480 B (20.5 KB)\n        Sealed:                    No\n        FileVault:                 No\n</code></pre> <p>This is the first partition on a standard layout. It is hidden from <code>diskutil</code> by default, output below is from a dumped image.</p>"},{"location":"platform/stock-partition-layout/#disk1s1-preboot","title":"disk1s1 (Preboot)","text":"diskutil info <pre><code># diskutil info /dev/disk1s1\n   Device Identifier:         disk1s1\n   Device Node:               /dev/disk1s1\n   Whole:                     No\n   Part of Whole:             disk1\n\n   Volume Name:               iSCPreboot\n   Mounted:                   Yes\n   Mount Point:               /System/Volumes/iSCPreboot\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk1s1\n   Recovery Disk:             disk1s4\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               19D7B85B-D5EC-41E9-8441-EEAE52D964F1\n   Disk / Partition UUID:     19D7B85B-D5EC-41E9-8441-EEAE52D964F1\n\n   Disk Size:                 524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Container Free Space:      506.3 MB (506347520 Bytes) (exactly 988960 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk1\n   APFS Physical Store:       disk0s1\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Mountpoint: <code>/System/Volumes/iSCPreboot</code></p> <p>This contains files used directly by the system firmware iBoot.</p> <p>Files:</p> <ul> <li>/(uuid)/ - one each for OS installation, and each version of 1TR<ul> <li>LocalPolicy/ - Boot policies<ul> <li>(long hash).img4 - Local boot policy for an OS install</li> <li>(long hash).recovery.img4 - Local boot policy for a 1TR</li> </ul> </li> </ul> </li> <li>SFR/current/ - info for the current version of SFR<ul> <li>apticket.der - AP ticket (?)</li> <li>RestoreVersion.plist</li> <li>SystemVersion.plist</li> <li>sep-firmware.img4 - SEP firmware, not always present</li> </ul> </li> <li>SFR/fallback/ - info for the previous version of SFR (same structure as above)</li> </ul> <p>When an OS from external media is booted via 1TR, its boot files (everything under /(uuid)/boot) are copied from the Preboot volume to this partition under the same path. This is how Apple Silicon macs can \"boot\" from external media, even though iBoot itself cannot."},{"location":"platform/stock-partition-layout/#disk1s2-xart","title":"disk1s2 (xART)","text":"diskutil info <pre><code># diskutil info /dev/disk1s2\n   Device Identifier:         disk1s2\n   Device Node:               /dev/disk1s2\n   Whole:                     No\n   Part of Whole:             disk1\n\n   Volume Name:               xART\n   Mounted:                   Yes\n   Mount Point:               /System/Volumes/xarts\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk1s1\n   Recovery Disk:             disk1s4\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               E9FD7E0B-391D-42DD-997A-15B5FE0CE73C\n   Disk / Partition UUID:     E9FD7E0B-391D-42DD-997A-15B5FE0CE73C\n\n   Disk Size:                 524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Container Free Space:      506.3 MB (506347520 Bytes) (exactly 988960 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk1\n   APFS Physical Store:       disk0s1\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Mountpoint: <code>/System/Volumes/xarts</code></p> <p>This contains a single file (uuid).gl - SEP storage. <code>xartutil</code> can be used to manage this.</p>"},{"location":"platform/stock-partition-layout/#disk1s3-hardware","title":"disk1s3 (Hardware)","text":"diskutil info <pre><code># diskutil info /dev/disk1s3\n   Device Identifier:         disk1s3\n   Device Node:               /dev/disk1s3\n   Whole:                     No\n   Part of Whole:             disk1\n\n   Volume Name:               Hardware\n   Mounted:                   Yes\n   Mount Point:               /System/Volumes/Hardware\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk1s1\n   Recovery Disk:             disk1s4\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               6ED3C985-5971-4874-ABCA-841BB76CC6E5\n   Disk / Partition UUID:     6ED3C985-5971-4874-ABCA-841BB76CC6E5\n\n   Disk Size:                 524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Container Free Space:      506.3 MB (506347520 Bytes) (exactly 988960 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk1\n   APFS Physical Store:       disk0s1\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Mountpoint: <code>/System/Volumes/Hardware</code></p> <p>Hardware related information and logs</p> <ul> <li>/recoverylogd/ - recovery logs</li> <li>FactoryData/ - AP ticket, device personalization information</li> <li>srvo/ - sensor related stuff?</li> <li>MobileActivation/ - activation related data</li> </ul>"},{"location":"platform/stock-partition-layout/#disk1s4-recovery","title":"disk1s4 (Recovery)","text":"diskutil info <pre><code># diskutil info /dev/disk1s4\n   Device Identifier:         disk1s4\n   Device Node:               /dev/disk1s4\n   Whole:                     No\n   Part of Whole:             disk1\n\n   Volume Name:               Recovery\n   Mounted:                   No\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Disabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk1s1\n   Recovery Disk:             disk1s4\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               6A900409-C5A5-47CC-84AA-F0FE24E0D629\n   Disk / Partition UUID:     6A900409-C5A5-47CC-84AA-F0FE24E0D629\n\n   Disk Size:                 524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     524.3 MB (524288000 Bytes) (exactly 1024000 512-Byte-Units)\n   Container Free Space:      506.3 MB (506347520 Bytes) (exactly 988960 512-Byte-Units)\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          Not applicable (not mounted)\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk1\n   APFS Physical Store:       disk0s1\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Empty.</p>"},{"location":"platform/stock-partition-layout/#disk0s2-disk3-macos-container","title":"disk0s2 / disk3: macOS Container","text":"<p>(note: this output is after the root volume seal has been broken)</p> diskutil apfs list <pre><code># diskutil apfs list /dev/disk3\n|\n+-- Container disk3 CEF76C65-8EAE-4346-A09E-AB98301B36AA\n    ====================================================\n    APFS Container Reference:     disk3\n    Size (Capacity Ceiling):      245107195904 B (245.1 GB)\n    Capacity In Use By Volumes:   61710045184 B (61.7 GB) (25.2% used)\n    Capacity Not Allocated:       183397150720 B (183.4 GB) (74.8% free)\n    |\n    +-&lt; Physical Store disk0s2 BDB006E1-54AA-43CD-B7FE-FF021547D51E\n    |   -----------------------------------------------------------\n    |   APFS Physical Store Disk:   disk0s2\n    |   Size:                       245107195904 B (245.1 GB)\n    |\n    +-&gt; Volume disk3s1 424FEA98-2296-48FD-8DFF-0866835572E9\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk3s1 (System)\n    |   Name:                      Macintosh HD (Case-insensitive)\n    |   Mount Point:               /Volumes/Macintosh HD\n    |   Capacity Consumed:         15053312000 B (15.1 GB)\n    |   Sealed:                    Broken\n    |   FileVault:                 No (Encrypted at rest)\n    |\n    +-&gt; Volume disk3s2 B065CC7B-CC03-44F1-8A58-CD9AB099D57C\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk3s2 (Preboot)\n    |   Name:                      Preboot (Case-insensitive)\n    |   Mount Point:               /Volumes/Preboot\n    |   Capacity Consumed:         361050112 B (361.1 MB)\n    |   Sealed:                    No\n    |   FileVault:                 No\n    |\n    +-&gt; Volume disk3s3 FDC764F5-0EF0-44F4-AA34-D011195207CA\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk3s3 (Recovery)\n    |   Name:                      Recovery (Case-insensitive)\n    |   Mount Point:               Not Mounted\n    |   Capacity Consumed:         939421696 B (939.4 MB)\n    |   Sealed:                    No\n    |   FileVault:                 No\n    |\n    +-&gt; Volume disk3s5 DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n    |   ---------------------------------------------------\n    |   APFS Volume Disk (Role):   disk3s5 (Data)\n    |   Name:                      Data (Case-insensitive)\n    |   Mount Point:               /Volumes/Data\n    |   Capacity Consumed:         15799300096 B (15.8 GB)\n    |   Sealed:                    No\n    |   FileVault:                 No (Encrypted at rest)\n    |\n    +-&gt; Volume disk3s6 D2247B63-54E9-411F-94C0-FF3FAB2A17A0\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk3s6 (VM)\n        Name:                      VM (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         20480 B (20.5 KB)\n        Sealed:                    No\n        FileVault:                 No\n</code></pre> <p>This is the main macOS container for an OS install. </p> <p>There is a hidden Update volume (disk3s4)</p>"},{"location":"platform/stock-partition-layout/#disk3s1-macintosh-hd","title":"disk3s1 (Macintosh HD)","text":"diskutil info <pre><code># diskutil info /dev/disk3s1\n   Device Identifier:         disk3s1\n   Device Node:               /dev/disk3s1\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               Macintosh HD\n   Mounted:                   Yes\n   Mount Point:               /Volumes/Macintosh HD\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               424FEA98-2296-48FD-8DFF-0866835572E9\n   Disk / Partition UUID:     424FEA98-2296-48FD-8DFF-0866835572E9\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         No\n   Media Read-Only:           No\n   Volume Read-Only:          Yes (read-only mount flag set)\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   APFS Volume Group:         DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n   EFI Driver In macOS:       1677080005000000\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    Broken\n   Locked:                    No\n</code></pre> <p>This is the main APFS volume containing the OS root. It uses snapshots to allow for atomic updates and sealing (analogous to dm-verity) to guarantee OS integrity. This can be disabled, but currently it is not possible to mount the root filesystem as read-write. Modifications can be made by mounting the main partition, making changes, creating a new snapshot and blessing it.</p> <p>The snapshot is normally /dev/disk3s1s1, and this is mounted read-only on /. The name looks like <code>com.apple.os.update-&lt;long string of hex&gt;</code>.</p> <p>This is part of an APFS volume group with the Data volume. At runtime, they are merged together.</p> apfs listVolumeGroups <pre><code>+-- Container disk3 CEF76C65-8EAE-4346-A09E-AB98301B36AA\n|   |\n|   +-&gt; Volume Group DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n|       =================================================\n|       APFS Volume Disk (Role):   disk3s1 (System)\n|       Name:                      Macintosh HD\n|       Volume UUID:               424FEA98-2296-48FD-8DFF-0866835572E9\n|       Capacity Consumed:         15053312000 B (15.1 GB)\n|       -------------------------------------------------\n|       APFS Volume Disk (Role):   disk3s5 (Data)\n|       Name:                      Data\n|       Volume UUID:               DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n|       Capacity Consumed:         15799300096 B (15.8 GB)\n</code></pre>"},{"location":"platform/stock-partition-layout/#disk3s2-preboot","title":"disk3s2 (Preboot)","text":"diskutil info <pre><code># diskutil info /dev/disk3s2\n   Device Identifier:         disk3s2\n   Device Node:               /dev/disk3s2\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               Preboot\n   Mounted:                   Yes\n   Mount Point:               /Volumes/Preboot\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               B065CC7B-CC03-44F1-8A58-CD9AB099D57C\n   Disk / Partition UUID:     B065CC7B-CC03-44F1-8A58-CD9AB099D57C\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         No\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n\n</code></pre> <p>Mountpoint: /System/Volumes/Preboot</p> <p>This partition contains boot-related data, including the kernel. The only directory at the root is named after the APFS <code>Data</code> volume UUID / volume group UUID.</p> <p>Files look like:</p> <ul> <li>/(Data UUID)/<ul> <li>usr/standalone/i386/EfiLoginUI/ - \"EFI\" (?) resources for the pre-boot UI</li> <li>PreLoginData/ - uuidtext (translations?) and logs and other junk</li> <li>boot/<ul> <li>active - file containing the long hash below</li> <li>(long hash)/<ul> <li>usr/standalone/firmware<ul> <li>iBoot.img4 - iBoot2 (OS loader)</li> <li>base_system_root_hash.img4, root_hash.img4 - related to sealing</li> <li>FUD/ - firmwares loaded by iBoot</li> <li>devicetree.img4 - devicetree</li> </ul> </li> <li>System/Library/Caches/com.apple.kernelcaches/<ul> <li>kernelcache - Darwin kernelcache</li> </ul> </li> </ul> </li> </ul> </li> <li>var/db/ - user list and authentication related information, for preboot UI</li> <li>Library/Preferences/ - network interface info, other misc preferences for preboot UI</li> <li>System/Library/<ul> <li>CoreServices/<ul> <li>boot.efi - this would be the booter on EFI macs. A whole 0 bytes here.</li> </ul> </li> <li>Caches/com.apple.corestorage/ - FileVault stuff?</li> </ul> </li> <li>restore/ - system firmware update bundle?</li> </ul> </li> </ul>"},{"location":"platform/stock-partition-layout/#disk3s3-recovery","title":"disk3s3 (Recovery)","text":"diskutil info <pre><code># diskutil info /dev/disk3s3\n   Device Identifier:         disk3s3\n   Device Node:               /dev/disk3s3\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               Recovery\n   Mounted:                   No\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Disabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               FDC764F5-0EF0-44F4-AA34-D011195207CA\n   Disk / Partition UUID:     FDC764F5-0EF0-44F4-AA34-D011195207CA\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n\n   Media OS Use Only:         No\n   Media Read-Only:           No\n   Volume Read-Only:          Not applicable (not mounted)\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>OS recovery partition. Roughly the same layout/contents as System RecoveryOS below. If the current default boot OS is macOS 12 or newer, its RecoveryOS partition is started as One True RecoveryOS when the power button is held on boot. Otherwise, for macOS 11.x, the System RecoveryOS is used for this purpose instead.</p>"},{"location":"platform/stock-partition-layout/#disk3s4-update","title":"disk3s4 (Update)","text":"diskutil info <pre><code># diskutil info /dev/disk3s4\n   Device Identifier:         disk3s4\n   Device Node:               /dev/disk3s4\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               Update\n   Mounted:                   Yes\n   Mount Point:               /System/Volumes/Data/private/tmp/tmp-mount-spRxyx\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               C983230F-1974-4283-A0A8-E1F892C7C835\n   Disk / Partition UUID:     C983230F-1974-4283-A0A8-E1F892C7C835\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n\n</code></pre> <p>This contains temporary files for the OS updater, and logs.</p>"},{"location":"platform/stock-partition-layout/#disk3s5-data","title":"disk3s5 (Data)","text":"diskutil info <pre><code># diskutil info /dev/disk3s5\n   Device Identifier:         disk3s5\n   Device Node:               /dev/disk3s5\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               Data\n   Mounted:                   Yes\n   Mount Point:               /Volumes/Data\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       Yes\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n   Disk / Partition UUID:     DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         No\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   APFS Volume Group:         DCBCA6BD-BFF1-4F8F-AE1A-6E937D2D4BDC\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Mountpoint: /System/Volumes/Data</p> <p>The main user data partition, which is overlaid on top of the OS root with firmlinks.</p>"},{"location":"platform/stock-partition-layout/#disk3s6-vm","title":"disk3s6 (VM)","text":"diskutil info <pre><code># diskutil info /dev/disk3s6\n   Device Identifier:         disk3s6\n   Device Node:               /dev/disk3s6\n   Whole:                     No\n   Part of Whole:             disk3\n\n   Volume Name:               VM\n   Mounted:                   No\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Disabled\n\n   OS Can Be Installed:       No\n   Booter Disk:               disk3s2\n   Recovery Disk:             disk3s3\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               D2247B63-54E9-411F-94C0-FF3FAB2A17A0\n   Disk / Partition UUID:     D2247B63-54E9-411F-94C0-FF3FAB2A17A0\n\n   Disk Size:                 245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     245.1 GB (245107195904 Bytes) (exactly 478724992 512-Byte-Units)\n   Container Free Space:      183.4 GB (183397150720 Bytes) (exactly 358197560 512-Byte-Units)\n\n   Media OS Use Only:         No\n   Media Read-Only:           No\n   Volume Read-Only:          Not applicable (not mounted)\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk3\n   APFS Physical Store:       disk0s2\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>Swap partition. Seems to be empty if not necessary.</p>"},{"location":"platform/stock-partition-layout/#disk0s3-system-recoveryos","title":"disk0s3: System RecoveryOS","text":"diskutil apfs list <pre><code># diskutil apfs list /dev/disk2\n|\n+-- Container disk5 160EFEBB-B539-42EE-800D-2FE4723FB25F\n    ====================================================\n    APFS Container Reference:     disk5\n    Size (Capacity Ceiling):      5368664064 B (5.4 GB)\n    Capacity In Use By Volumes:   1919692800 B (1.9 GB) (35.8% used)\n    Capacity Not Allocated:       3448971264 B (3.4 GB) (64.2% free)\n    |\n    +-&lt; Physical Store disk2 (No UUID)\n    |   ------------------------------\n    |   APFS Physical Store Disk:   disk0s3\n    |   Size:                       5368664064 B (5.4 GB)\n    |\n    +-&gt; Volume disk2s1 DDD6CA1C-2FAC-4990-B20E-89F5323DAABB\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk2s1 (Recovery)\n        Name:                      Recovery (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         1899917312 B (1.9 GB)\n        Sealed:                    No\n        FileVault:                 No\n</code></pre> <p>This is the System RecoveryOS partition, containing one or two versions of RecoveryOS.</p> <p>There is a hidden Update volume (disk2s2).</p>"},{"location":"platform/stock-partition-layout/#disk2s1-recovery","title":"disk2s1: Recovery","text":"diskutil info <pre><code># diskutil info /dev/disk2s1\n   Device Identifier:         disk2s1\n   Device Node:               /dev/disk2s1\n   Whole:                     No\n   Part of Whole:             disk2\n\n   Volume Name:               Recovery\n   Mounted:                   Yes\n   Mount Point:               /System/Volumes/Data/private/tmp/SystemRecovery\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Recovery Disk:             disk2s1\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               67B148BE-39ED-493A-99AE-1C1D28247C54\n   Disk / Partition UUID:     67B148BE-39ED-493A-99AE-1C1D28247C54\n\n   Disk Size:                 5.4 GB (5368664064 Bytes) (exactly 10485672 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     5.4 GB (5368664064 Bytes) (exactly 10485672 512-Byte-Units)\n   Container Free Space:      2.5 GB (2500202496 Bytes) (exactly 4883208 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          Yes (read-only mount flag set)\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk2\n   APFS Physical Store:       disk0s4\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>This contains one or more versions of RecoveryOS.</p> <p>Files look like:</p> <ul> <li>/(unknown UUID)/boot/(long hash)/<ul> <li>usr/standalone/firmware<ul> <li>arm64eBaseSystem.dmg - rootfs ramdisk image (GPT disk image with a single APFS container with a single volume)</li> <li>iBoot.img4 - iBoot2 (OS loader)</li> <li>base_system_root_hash.img4, root_hash.img4 - related to sealing</li> <li>sep-firmware.img4 - SEP firmware</li> <li>FUD/ - firmwares loaded by iBoot</li> <li>devicetree.img4 - devicetree</li> </ul> </li> <li>System/Library/Caches/com.apple.kernelcaches/<ul> <li>kernelcache - Darwin kernelcache</li> </ul> </li> </ul> </li> </ul> <p>When RecoveryOS is loaded, this partition apparently gets copied wholesale to a tmpfs, and then the arm64eBaseSystem.dmg is attached</p>"},{"location":"platform/stock-partition-layout/#disk2s2-update","title":"disk2s2: Update","text":"diskutil info <pre><code>   Device Identifier:         disk2s2\n   Device Node:               /dev/disk2s2\n   Whole:                     No\n   Part of Whole:             disk2\n\n   Volume Name:               Update\n   Mounted:                   Yes\n   Mount Point:               /Volumes/Update\n\n   Partition Type:            41504653-0000-11AA-AA11-00306543ECAC\n   File System Personality:   APFS\n   Type (Bundle):             apfs\n   Name (User Visible):       APFS\n   Owners:                    Enabled\n\n   OS Can Be Installed:       No\n   Recovery Disk:             disk2s1\n   Media Type:                Generic\n   Protocol:                  Apple Fabric\n   SMART Status:              Verified\n   Volume UUID:               812D7035-B392-4B1C-AC3E-131A4DFA2726\n   Disk / Partition UUID:     812D7035-B392-4B1C-AC3E-131A4DFA2726\n\n   Disk Size:                 5.4 GB (5368664064 Bytes) (exactly 10485672 512-Byte-Units)\n   Device Block Size:         4096 Bytes\n\n   Container Total Space:     5.4 GB (5368664064 Bytes) (exactly 10485672 512-Byte-Units)\n   Container Free Space:      2.5 GB (2500202496 Bytes) (exactly 4883208 512-Byte-Units)\n   Allocation Block Size:     4096 Bytes\n\n   Media OS Use Only:         Yes\n   Media Read-Only:           No\n   Volume Read-Only:          No\n\n   Device Location:           Internal\n   Removable Media:           Fixed\n\n   Solid State:               Yes\n   Hardware AES Support:      Yes\n\n   This disk is an APFS Volume.  APFS Information:\n   APFS Container:            disk2\n   APFS Physical Store:       disk0s4\n   Fusion Drive:              No\n   Encrypted:                 No\n   FileVault:                 No\n   Sealed:                    No\n   Locked:                    No\n</code></pre> <p>This contains temporary system firmware update data and logs.</p>"},{"location":"platform/subsystems/","title":"Apple Silicon Platform Subsystems","text":"<p>These pages detail the specifics of a particular platform subsystem. They are loosely categorised by function.</p>"},{"location":"platform/subsystems/#generalised-overviews","title":"Generalised overviews","text":"<ul> <li>Introduction to Apple Silicon</li> <li>Accelerator Engines</li> </ul>"},{"location":"platform/subsystems/#coprocessors-and-accelerators","title":"Coprocessors and accelerators","text":"<ul> <li>AGX - Apple's PowerVR-derived tile-based deferred renderer</li> <li>SEP - The Secure Enclave, Apple's crypto/biometrics/security engine</li> </ul>"},{"location":"platform/subsystems/#platform-control-logic","title":"Platform control logic","text":"<ul> <li>AIC - Apple Interrupt Controller</li> <li>WDT - Watchdog Timer</li> <li>SMC - System Management Controller</li> <li>ASC - Apple's Mailbox-like firmware interface</li> </ul>"},{"location":"platform/subsystems/#platform-initialisation-and-boot","title":"Platform initialisation and boot","text":"<ul> <li>Boot</li> <li>MachO Boot Protocol</li> <li>Memory Map</li> <li>SMP spinup</li> <li>ADT (Apple Device Tree)</li> <li>NVRAM </li> </ul>"},{"location":"platform/subsystems/#application-processors","title":"Application processors","text":"<ul> <li>ARM System Registers</li> <li>SPRR and GXF</li> <li>CPU Debug Registers</li> <li>Apple Instructions</li> </ul>"},{"location":"platform/subsystems/#io","title":"I/O","text":"<ul> <li>APCIe (Apple PCIe controller)</li> <li>GPIO</li> <li>USB Debug</li> <li>USB PD</li> <li>Stock Partition Layout</li> </ul>"},{"location":"platform/subsystems/#peripherals","title":"Peripherals","text":"<ul> <li>Camera - Broadcom camera and ISP</li> </ul>"},{"location":"platform/feature-support/m1/","title":"M1 Series Feature Support","text":"<p>This page details currently supported features on all M1 series (M1, M1 Pro, M1 Max, M1 Ultra) Apple Silicon Macs, as well as their progress towards being upstreamed. The tables herein can be interpreted as follows:</p> <ul> <li>Kernel release, e.g. 6.0: the feature was incorporated upstream as of this release</li> <li>linux-asahi (kernel release): the feature is stable, available for use in Fedora Asahi Remix, and should be upstream by the release indicated</li> <li>linux-asahi: the feature is (mostly) stable and available for use in Fedora Asahi Remix </li> <li>WIP: Development work on the feature is actively progressing, however is not yet ready for wider testing, use or distribution</li> <li>TBA: Active work on this feature is not being undertaken at this time</li> </ul> <p>If a feature is not ready, then there is no estimation on when it will be ready. Please do not ask for estimations in support channels (e.g. IRC).</p>"},{"location":"platform/feature-support/m1/#table-of-contents","title":"Table of Contents","text":"<ul> <li>SoC blocks</li> <li>M1 devices</li> <li>M1 Pro/Max/Ultra devices</li> <li>Notes</li> </ul>"},{"location":"platform/feature-support/m1/#soc-blocks","title":"SoC Blocks","text":"<p>These are features/hardware blocks that are present on all devices with the given SoC.</p> M1(T8103) M1 Pro/Max/Ultra(T600x) DCP linux-asahi linux-asahi USB2 (TB ports) linux-asahi linux-asahi USB3 (TB ports) linux-asahi linux-asahi Thunderbolt WIP WIP DP Alt Mode WIP WIP GPU linux-asahi linux-asahi Video Decoder WIP WIP NVMe 5.19 5.19 PCIe 5.16 5.16 PCIe (GE) - - cpufreq 6.2 6.2 cpuidle linux-asahi (notes) (notes) Suspend/sleep linux-asahi linux-asahi Video Encoder TBA TBA ProRes Codec - TBA AICv2 - 5.18 DART 5.15 6.1 PMU 5.18 5.18 UART 5.13 5.13 Watchdog 5.17 5.17 I<sup>2</sup>C 5.16 5.16 GPIO 5.16 5.16 USB-PD 5.16 5.16 MCA 6.1 6.1 SPI linux-asahi linux-asahi SPI NOR linux-asahi linux-asahi SMC linux-asahi linux-asahi SPMI linux-asahi linux-asahi RTC linux-asahi linux-asahi SEP WIP WIP Neural Engine out of tree (notes) (notes)"},{"location":"platform/feature-support/m1/#m1-devices","title":"M1 devices","text":"Mac Mini(2020) MacBook Pro(13-inch, 2020) MacBook Air(2020) iMac(2021) Installer yes yes yes yes Devicetree 5.13 5.17 5.17 5.17 Main display 5.17 5.17 5.17 5.17 Brightness - linux-asahi linux-asahi linux-asahi HDMI Out 5.13 - - - HDMI Audio linux-asahi (notes) - - - Keyboard - linux-asahi linux-asahi - KB backlight - 6.4 6.4 - Touchpad - linux-asahi linux-asahi - Battery info - linux-asahi linux-asahi - USB-A ports 5.16 - - - WiFi 6.1 6.1 6.1 6.1 Bluetooth 6.2 6.2 6.2 6.2 3.5mm jack linux-asahi linux-asahi linux-asahi linux-asahi Speakers linux-asahi (notes) linux-asahi (notes) linux-asahi (notes) TBA SD card slot - - - - 1Gbps Ethernet 5.16 - - 5.17 10Gbps Ethernet 5.17 - - - Microphones - linux-asahi linux-asahi WIP Webcam - linux-asahi linux-asahi linux-asahi Touch Bar - 6.15 - - TouchID TBA TBA TBA TBA"},{"location":"platform/feature-support/m1/#m1-promaxultra-devices","title":"M1 Pro/Max/Ultra devices","text":"MacBook Pro(14/16-inch, 2021) Mac Studio(2022) Installer yes yes Devicetree 6.2 6.2 Main display 5.17 5.17 Brightness linux-asahi - HDMI Out linux-asahi (13.5 FW only) 6.2 HDMI Audio linux-asahi (notes) linux-asahi (notes) Keyboard linux-asahi - KB backlight 6.4 - Touchpad linux-asahi - Battery info linux-asahi - USB-A ports - linux-asahi WiFi 6.1 6.1 Bluetooth 6.2 6.2 3.5mm jack linux-asahi linux-asahi Speakers linux-asahi (notes) linux-asahi (notes) SD card slot 5.17 5.17 1Gbps Ethernet - - 10Gbps Ethernet - linux-asahi Microphones linux-asahi - Webcam linux-asahi - Touch Bar - - TouchID TBA TBA"},{"location":"platform/feature-support/m1/#notes","title":"Notes","text":""},{"location":"platform/feature-support/m1/#cpuidle-situation","title":"cpuidle situation","text":"<p>Some power management functionality on ARM machines is controlled via the PSCI interface. The kernel has a specific way of talking to PSCI that is not compatible with Apple Silicon, and a discussion is required with upstream maintainers in order to figure out the best way forward. Given that this discussion has failed to materialise for two years, the decision has been made to hack together a driver that directly calls WFI/WFE instructions in order to bring this functionality to Asahi Linux. This greatly improves the UX on laptops when coupled with energy-aware scheduling, as it resolves the issue of the machines running warm to the touch and significantly improves battery life. This can never be upstreamed, however the hope is that this hacked together driver becomes unnecessary at some point in the near future.</p>"},{"location":"platform/feature-support/m1/#ane-driver","title":"ANE driver","text":"<p>An out of tree kernel module is available. It will be merged into linux-asahi.</p>"},{"location":"platform/feature-support/m1/#speakers","title":"Speakers","text":"<p>The speakers are enabled with separate patches due to a lsp-plugins bug. The bug causes full-scale artifacts which could potentially damage the speakers. This fix was included in lsp-plugins release 1.0.20.</p>"},{"location":"platform/feature-support/m1/#hdmi-audio","title":"HDMI Audio","text":"<p>A preview of HDMI audio support is available since <code>asahi-6.8.6-3</code> for all devices with HDMI port except devices with M1/M2 Ultra. Due to missing user space integration it is displayed as <code>Analog Output (Built-in Audio Stereo)</code> or similar. There are still some glitches. The start of audio is sometimes cut off and noise might be heard. It might not not be available although the HDMI display part is working.</p>"},{"location":"platform/feature-support/m2/","title":"M2 Series Feature Support","text":"<p>This page details currently supported features on all M2 series (M2, M2 Pro, M2 Max, M2 Ultra) Apple Silicon Macs, as well as their progress towards being upstreamed. The tables herein can be interpreted as follows:</p> <ul> <li>Kernel release, e.g. 6.0: the feature was incorporated upstream as of this release</li> <li>linux-asahi (kernel release): the feature is stable, available for use in Fedora Asahi Remix, and should be upstream by the release indicated</li> <li>linux-asahi: the feature is (mostly) stable and available for use in Fedora Asahi Remix</li> <li>WIP: Development work on the feature is actively progressing, however is not yet ready for wider testing, use or distribution</li> <li>TBA: Active work on this feature is not being undertaken at this time</li> <li>dts: Feature is included as part of the Linux Device Tree system</li> <li>-: Feature not supported by hardware on this platform</li> </ul> <p>If a feature is not ready, then there is no estimation on when it will be ready. Please do not ask for estimations in support channels (e.g. IRC).</p>"},{"location":"platform/feature-support/m2/#table-of-contents","title":"Table of Contents","text":"<ul> <li>SoC blocks</li> <li>M2 devices</li> <li>M2 Pro/Max/Ultra devices</li> <li>Notes</li> </ul>"},{"location":"platform/feature-support/m2/#soc-blocks","title":"SoC blocks","text":"<p>These are features/hardware blocks that are present on all devices with the given SoC.</p> M2(T8112) M2 Pro/Max/Ultra(T602x) DCP linux-asahi linux-asahi USB2 (TB ports) linux-asahi linux-asahi USB3 (TB ports) linux-asahi linux-asahi Thunderbolt WIP WIP DP Alt Mode WIP WIP GPU linux-asahi linux-asahi Video Decoder WIP WIP NVMe 5.19 5.19 PCIe 5.16 / 6.4 (dts) linux-asahi PCIe (GE) - TBA cpufreq 6.2 6.2 cpuidle linux-asahi (notes) linux-asahi (notes) Suspend/sleep linux-asahi linux-asahi Video Encoder TBA TBA ProRes Codec TBA TBA AICv2 5.18 5.18 DART 6.3 linux-asahi PMU 6.4 6.4 UART 5.13 5.13 Watchdog 5.17 5.17 I<sup>2</sup>C 5.16 5.16 GPIO 5.16 5.16 USB-PD 5.16 5.16 MCA 6.1 / 6.4 (dts) linux-asahi SPI linux-asahi linux-asahi SPI NOR linux-asahi linux-asahi SMC linux-asahi linux-asahi SPMI linux-asahi linux-asahi RTC linux-asahi linux-asahi SEP WIP WIP Neural Engine out of tree (notes) out of tree (notes)"},{"location":"platform/feature-support/m2/#m2-devices","title":"M2 devices","text":"MacBook Air(13-inch, 2022) MacBook Air(15-inch, 2023) MacBook Pro(13-inch, 2022) Mac Mini(2023) Installer yes yes yes yes Devicetree 6.4 linux-asahi 6.4 6.4 Main display linux-asahi linux-asahi linux-asahi - Keyboard linux-asahi linux-asahi linux-asahi - KB backlight 6.4 6.4 6.4 - Touchpad linux-asahi linux-asahi linux-asahi - Brightness linux-asahi linux-asahi linux-asahi - Battery info linux-asahi linux-asahi linux-asahi - WiFi 6.1 6.1 6.1 linux-asahi Bluetooth 6.2 6.2 6.2 linux-asahi HDMI Out - - - linux-asahi HDMI audio - - - linux-asahi (notes) 3.5mm jack linux-asahi linux-asahi linux-asahi linux-asahi Speakers linux-asahi linux-asahi linux-asahi linux-asahi Microphones linux-asahi linux-asahi linux-asahi - Webcam linux-asahi linux-asahi linux-asahi - SD card slot - - - - 1Gbps Ethernet - - - 6.4 (dts) 10Gbps Ethernet - - - 6.4 (dts) Touch Bar - - 6.15 - TouchID TBA TBA TBA -"},{"location":"platform/feature-support/m2/#m2-promaxultra-devices","title":"M2 Pro/Max/Ultra devices","text":"Mac Mini(2023) MacBook Pro(14/16-inch, 2023) Mac Studio(2023) Mac Pro(2023) Installer yes yes yes WIP Devicetree linux-asahi linux-asahi linux-asahi linux-asahi Main display - linux-asahi - - Keyboard - linux-asahi - - KB backlight - linux-asahi - - Touchpad - linux-asahi - - Brightness - linux-asahi - - Battery info - linux-asahi - - WiFi linux-asahi linux-asahi linux-asahi linux-asahi Bluetooth linux-asahi linux-asahi linux-asahi linux-asahi HDMI Out linux-asahi linux-asahi linux-asahi linux-asahi HDMI Audio linux-asahi (notes) linux-asahi (notes) linux-asahi (notes) WIP 3.5mm jack linux-asahi linux-asahi linux-asahi linux-asahi Speakers linux-asahi linux-asahi linux-asahi TBA Microphones - linux-asahi - - Webcam - linux-asahi - - SD card slot - 5.17 5.17 5.17 1Gbps Ethernet linux-asahi - - - 10Gbps Ethernet linux-asahi - linux-asahi linux-asahi Touch Bar - - - - TouchID - TBA TBA TBA <p>Note: Many peripherals depend on T600x DART, T8112 DART, and PCIe support.</p>"},{"location":"platform/feature-support/m2/#notes","title":"Notes","text":""},{"location":"platform/feature-support/m2/#cpuidle-situation","title":"cpuidle situation","text":"<p>Some power management functionality on ARM machines is controlled via the PSCI interface. The kernel has a specific way of talking to PSCI that is not compatible with Apple Silicon, and a discussion is required with upstream maintainers in order to figure out the best way forward. Given that this discussion has failed to materialise for two years, the decision has been made to hack together a driver that directly calls WFI/WFE instructions in order to bring this functionality to Asahi Linux. This greatly improves the UX on laptops when coupled with energy-aware scheduling, as it resolves the issue of the machines running warm to the touch and significantly improves battery life. This can never be upstreamed, however the hope is that this hacked together driver becomes unnecessary at some point in the near future.</p>"},{"location":"platform/feature-support/m2/#ane-driver","title":"ANE driver","text":"<p>An out of tree kernel module is available. It will be merged into linux-asahi.</p>"},{"location":"platform/feature-support/m2/#hdmi-audio","title":"HDMI Audio","text":"<p>A preview of HDMI audio support is available since <code>asahi-6.8.6-3</code> for all devices with HDMI port except devices with M1/M2 Ultra. Due to missing user space integration it is displayed as <code>Analog Output (Built-in Audio Stereo)</code> or similar. There are still some glitches. The start of audio is sometimes cut off and noise might be heard. It might not not be available although the HDMI display part is working. You can try it by enabling <code>hdmi_audio</code> parameter in <code>apple_dcp</code> kernel module.</p>"},{"location":"platform/feature-support/m3/","title":"M3 Series Feature Support","text":"<p>This page details currently supported features on all M3 series (M3, M3 Pro, M3 Max) Apple Silicon Macs, as well as their progress towards being upstreamed. The tables herein can be interpreted as follows:</p> <ul> <li>Kernel release, e.g. 6.0: the feature was incorporated upstream as of this release</li> <li>linux-asahi (kernel release): the feature is stable, available for use in <code>linux-asahi</code>, and should be upstream by the release indicated</li> <li>linux-asahi: the feature is (mostly) stable and available for use in Fedora Asahi Remix and in <code>linux-asahi</code></li> <li>asahi-edge: the feature is (mostly) stable and available for use in Fedora Asahi Remix. For historical reason it is available in the <code>linux-asahi-edge</code> package in the linux-asahi Linux distribution</li> <li>WIP: Development work on the feature is actively progressing, however is not yet ready for wider testing, use or distribution</li> <li>TBA: Active work on this feature is not being undertaken at this time</li> </ul> <p>If a feature is not ready, then there is no estimation on when it will be ready. Please do not ask for estimations in support channels (e.g. IRC).</p>"},{"location":"platform/feature-support/m3/#table-of-contents","title":"Table of Contents","text":"<ul> <li>SoC blocks</li> <li>M3 devices</li> <li>M3 Pro/Max devices</li> <li>Notes</li> </ul> <p>Note that as these machines have not been released for general availability yet, supported and missing features are predictions based on what Apple has changed on a per-SoC and per-machine basis in the past. This page will change rapidly once work begins on support for these machines.</p>"},{"location":"platform/feature-support/m3/#soc-blocks","title":"SoC blocks","text":"<p>These are features/hardware blocks that are present on all devices with the given SoC.</p> M3(T8122) M3 Pro/Max(T603x) DCP TBA TBA USB2 (TB ports) linux-asahi linux-asahi USB3 (TB ports) linux-asahi linux-asahi Thunderbolt TBA TBA DP Alt Mode WIP WIP GPU TBA TBA Video Decoder TBA TBA NVMe 5.19 5.19 PCIe TBA TBA PCIe (GE) - - cpufreq 6.2 6.2 cpuidle linux-asahi (notes) linux-asahi (notes) Suspend/sleep asahi-edge asahi-edge Video Encoder TBA TBA ProRes Codec TBA TBA AICv3 TBA TBA DART TBA TBA PMU TBA TBA UART 5.13 5.13 Watchdog 5.17 5.17 I<sup>2</sup>C 5.16 5.16 GPIO 5.16 5.16 USB-PD 5.16 5.16 MCA 6.1 / 6.4 (dts) linux-asahi SPI linux-asahi linux-asahi SPI NOR linux-asahi linux-asahi SMC linux-asahi linux-asahi SPMI linux-asahi linux-asahi RTC linux-asahi linux-asahi SEP WIP WIP Neural Engine out of tree (notes) out of tree (notes)"},{"location":"platform/feature-support/m3/#m3-devices","title":"M3 devices","text":"iMac(2023) MacBook Pro(14-inch, late 2023) MacBook Air(13\u201d and 15\u201d 2024) Installer no no Devicetree TBA TBA Main display TBA TBA Keyboard - TBA KB backlight - TBA Touchpad - TBA Brightness TBA TBA Battery info - TBA WiFi TBA TBA Bluetooth TBA TBA HDMI Out - TBA - 3.5mm jack TBA TBA Speakers TBA TBA Microphones TBA TBA Webcam TBA TBA SD card slot - TBA - 1Gbps Ethernet TBA - - 10Gbps Ethernet - - - TouchID - TBA"},{"location":"platform/feature-support/m3/#m3-promax-devices","title":"M3 Pro/Max devices","text":"MacBook Pro(14/16-inch, late 2023) Installer no Devicetree TBA Main display TBA Keyboard linux-asahi KB backlight linux-asahi Touchpad linux-asahi Brightness TBA Battery info linux-asahi WiFi TBA Bluetooth TBA HDMI Out TBA 3.5mm jack linux-asahi Speakers WIP Microphones TBA Webcam TBA SD card slot 5.17 1Gbps Ethernet - 10Gbps Ethernet - TouchID TBA <p>Note: Many peripherals depend on DART and PCIe support.</p>"},{"location":"platform/feature-support/m3/#notes","title":"Notes","text":""},{"location":"platform/feature-support/m3/#cpuidle-situation","title":"cpuidle situation","text":"<p>Some power management functionality on ARM machines is controlled via the PSCI interface. The kernel has a specific way of talking to PSCI that is not compatible with Apple Silicon, and a discussion is required with upstream maintainers in order to figure out the best way forward. Given that this discussion has failed to materialise for two years, the decision has been made to hack together a driver that directly calls WFI/WFE instructions in order to bring this functionality to Asahi Linux. This greatly improves the UX on laptops when coupled with energy-aware scheduling, as it resolves the issue of the machines running warm to the touch and significantly improves battery life. This can never be upstreamed, however the hope is that this hacked together driver becomes unnecessary at some point in the near future.</p>"},{"location":"platform/feature-support/m3/#ane-driver","title":"ANE driver","text":"<p>An out of tree kernel module is available. It will be merged into linux-asahi.</p>"},{"location":"platform/feature-support/m4/","title":"M4 Series Feature Support","text":"<p>This page details currently supported features on all M4 series (M4, M4 Pro, M4 Max) Apple Silicon Macs, as well as their progress towards being upstreamed. The tables herein can be interpreted as follows:</p> <ul> <li>Kernel release, e.g. 6.0: the feature was incorporated upstream as of this release</li> <li>linux-asahi (kernel release): the feature is stable, available for use in <code>linux-asahi</code>, and should be upstream by the release indicated</li> <li>linux-asahi: the feature is (mostly) stable and available for use in Fedora Asahi Remix and in <code>linux-asahi</code></li> <li>asahi-edge: the feature is (mostly) stable and available for use in Fedora Asahi Remix. For historical reason it is available in the <code>linux-asahi-edge</code> package in the linux-asahi Linux distribution</li> <li>WIP: Development work on the feature is actively progressing, however is not yet ready for wider testing, use or distribution</li> <li>TBA: Active work on this feature is not being undertaken at this time</li> </ul> <p>If a feature is not ready, then there is no estimation on when it will be ready. Please do not ask for estimations in support channels (e.g. IRC).</p>"},{"location":"platform/feature-support/m4/#table-of-contents","title":"Table of Contents","text":"<ul> <li>SoC blocks</li> <li>M4 devices</li> <li>M4 Pro/Max devices</li> <li>Notes</li> </ul> <p>Note that as these machines have not been released for general availability yet, supported and missing features are predictions based on what Apple has changed on a per-SoC and per-machine basis in the past. This page will change rapidly once work begins on support for these machines.</p>"},{"location":"platform/feature-support/m4/#soc-blocks","title":"SoC blocks","text":"<p>These are features/hardware blocks that are present on all devices with the given SoC.</p> M4(T8132) M4 Pro/Max(T604x) DCP TBA TBA USB2 (TB ports) linux-asahi linux-asahi USB3 (TB ports) linux-asahi linux-asahi Thunderbolt TBA TBA DP Alt Mode WIP WIP GPU TBA TBA Video Decoder TBA TBA NVMe 5.19 5.19 PCIe TBA TBA PCIe (GE) - - cpufreq 6.2 6.2 cpuidle linux-asahi (notes) linux-asahi (notes) Suspend/sleep asahi-edge asahi-edge Video Encoder TBA TBA ProRes Codec TBA TBA AICv3 TBA TBA DART TBA TBA PMU TBA TBA UART 5.13 5.13 Watchdog 5.17 5.17 I<sup>2</sup>C 5.16 5.16 GPIO 5.16 5.16 USB-PD 5.16 5.16 MCA 6.1 / 6.4 (dts) linux-asahi SPI linux-asahi linux-asahi SPI NOR linux-asahi linux-asahi SMC linux-asahi linux-asahi SPMI linux-asahi linux-asahi RTC linux-asahi linux-asahi SEP WIP WIP Neural Engine out of tree (notes) out of tree (notes)"},{"location":"platform/feature-support/m4/#m4-devices","title":"M4 devices","text":"MacBook Pro(14-inch, Nov 2024) MacBook Pro(16-inch, Nov 2024) Installer no no Devicetree TBA TBA Main display TBA TBA Keyboard TBA TBA KB backlight TBA TBA Touchpad TBA TBA Brightness TBA TBA Battery info TBA TBA WiFi TBA TBA Bluetooth TBA TBA HDMI Out TBA TBA 3.5mm jack TBA TBA Speakers TBA TBA Microphones TBA TBA Webcam TBA TBA SD card slot TBA TBA TouchID TBA TBA"},{"location":"platform/feature-support/m4/#m4-promax-devices","title":"M4 Pro/Max devices","text":"Mac mini(2024) MacBook Pro(14-inch, Nov 2024) MacBook Pro(16-inch, Nov 2024) Installer no no no Devicetree TBA TBA TBA Main display TBA TBA TBA Keyboard - TBA TBA KB backlight - TBA TBA Touchpad - TBA TBA Brightness TBA TBA TBA Battery info - TBA TBA WiFi TBA TBA TBA Bluetooth TBA TBA TBA HDMI Out - TBA - 3.5mm jack TBA TBA TBA Speakers TBA TBA TBA Microphones TBA TBA TBA Webcam TBA TBA TBA SD card slot - TBA - 1Gbps Ethernet TBA - - 10Gbps Ethernet - - - TouchID - TBA TBA <p>Note: Many peripherals depend on DART and PCIe support.</p>"},{"location":"platform/feature-support/m4/#notes","title":"Notes","text":""},{"location":"platform/feature-support/m4/#cpuidle-situation","title":"cpuidle situation","text":"<p>Some power management functionality on ARM machines is controlled via the PSCI interface. The kernel has a specific way of talking to PSCI that is not compatible with Apple Silicon, and a discussion is required with upstream maintainers in order to figure out the best way forward. Given that this discussion has failed to materialise for two years, the decision has been made to hack together a driver that directly calls WFI/WFE instructions in order to bring this functionality to Asahi Linux. This greatly improves the UX on laptops when coupled with energy-aware scheduling, as it resolves the issue of the machines running warm to the touch and significantly improves battery life. This can never be upstreamed, however the hope is that this hacked together driver becomes unnecessary at some point in the near future.</p>"},{"location":"platform/feature-support/m4/#ane-driver","title":"ANE driver","text":"<p>An out of tree kernel module is available. It will be merged into linux-asahi.</p>"},{"location":"platform/feature-support/overview/","title":"Feature Support Overview","text":"<p>This page has been broken up into a separate page for each generation of available devices, as there are now too many to list on a single page. Each page below follows the same format as the old unified page.</p> <ul> <li>M1 Series (M1, M1 Pro, M1 Max, M1 Ultra) Feature Support</li> <li>M2 Series (M2, M2 Pro, M2 Max, M2 Ultra) Feature Support</li> <li>M3 Series (M3, M3 Pro, M3 Max) Feature Support</li> <li>M4 Series (M4, M4 Pro, M4 Max) Feature Support</li> </ul> <p>A condensed feature overview for the Fedora Asahi Remix is available at https://asahilinux.org/fedora/#device-support.</p>"},{"location":"project/faq/","title":"FAQ","text":""},{"location":"project/faq/#when-will-asahi-linux-be-done","title":"When will Asahi Linux be \"done\"?","text":"<p>\u2192 \"When will Asahi Linux be done?\"</p>"},{"location":"project/faq/#does-thing-work-yet","title":"Does $thing work yet?","text":"<p>\u2192 Feature Support</p>"},{"location":"project/faq/#how-do-i-install-it","title":"How do I install it?","text":"<p>See the website for instructions: https://asahilinux.org/</p>"},{"location":"project/faq/#can-i-install-asahi-linux-from-an-external-macos-installation","title":"Can I install Asahi Linux from an external macOS installation?","text":"<p>No. It is necessary to keep an internal macOS installation to install Asahi Linux, update/repair m1n1 and resize active Asahi Linux installations.</p>"},{"location":"project/faq/#how-do-i-uninstall-clean-up-a-failed-installation","title":"How do I uninstall / clean up a failed installation?","text":"<p>There is no automated uninstaller, but see Partitioning cheatsheet to learn how to delete the partitions manually.</p>"},{"location":"project/faq/#can-i-dual-boot-asahi-linux","title":"Can I dual boot Asahi Linux?","text":"<p>Yes! The Installer already configures dual booting. You would need to go out of your way to erase macOS, and it's not recommended to do so.</p>"},{"location":"project/faq/#can-i-boot-asahi-linux-purely-from-an-usb-drive","title":"Can I boot Asahi Linux purely from an USB drive?","text":"<p>No, unfortunately not. Apple Silicon hardware does not support booting from USB storage, at all. It is completely physically impossible to boot from USB while making no changes to internal storage. This is by design, for security reasons. </p>"},{"location":"project/faq/#i-have-40gb-of-free-disk-space-but-the-installer-says-thats-not-enough","title":"I have ~40GB of free disk space but the installer says that's not enough!","text":"<p>The installer always leaves 38GB of disk space free for macOS upgrades to work. That means you need enough disk space for the new OS on top of those 38GB.</p> <p>If you want to skip this check, enable expert mode at the beginning. Keep in mind that you might be unable to update macOS if you do not have enough free disk space left over!</p>"},{"location":"project/faq/#can-i-install-asahi-linux-on-an-ipad","title":"Can I install Asahi Linux on an iPad?","text":"<p>No, iPads (and iPhones and other devices) do not support running custom OS kernels. Due to the system design, even if one were to achieve arbitrary code execution in userspace (say, via a jailbreak), that would not help with running a Linux kernel. A boot ROM exploit might help, should one exist, but supporting these devices is not a project goal for Asahi Linux.</p>"},{"location":"project/faq/#common-problems","title":"Common problems","text":""},{"location":"project/faq/#i-get-an-error-during-the-macos-resize-step-of-the-installer","title":"I get an error during the macOS resize step of the installer","text":"<p>Read the error message carefully. It'll be one of these:</p>"},{"location":"project/faq/#storage-system-verify-or-repair-failed","title":"\"Storage system verify or repair failed\"","text":"<p>You have existing APFS filesystem corruption (not caused by the installer) that is preventing a successful resize of your macOS partition. See this issue for more information and fix steps.</p>"},{"location":"project/faq/#your-apfs-container-resize-request-is-below-the-apfs-system-imposed-minimal-container-size-perhaps-caused-by-apfs-snapshot-usage-by-time-machine","title":"\"Your APFS Container resize request is below the APFS-system-imposed minimal container size (perhaps caused by APFS Snapshot usage by Time Machine)\"","text":"<p>As the message implies, this is caused by Time Machine snapshots taking up \"free\" space on your disk. See this issue for more information and fix steps.</p>"},{"location":"project/faq/#disk-utility-doesnt-work-for-me-after-installing-for-uninstalling-any-other-time","title":"Disk Utility doesn't work for me after installing / for uninstalling / any other time!","text":"<p>Don't use Disk Utility, it's broken and only works for really simple partition setups. See Partitioning cheatsheet to learn how to manage partitions with the command line instead.</p>"},{"location":"project/faq/#do-i-need-to-reinstall-to-get-new-features-updates","title":"Do I need to reinstall to get new features / updates?","text":"<p>No! Just upgrade your system using <code>dnf upgrade</code>. Kernel updates will require a reboot. Consider a tool like <code>needrestart</code> to determine if there are any outdated services or an outdated kernel running.</p>"},{"location":"project/faq/#two-of-the-keys-on-my-keyboard-are-swapped","title":"Two of the keys on my keyboard are swapped","text":"<p>This is a property inherent to some apple keyboards. Please read https://wiki.archlinux.org/title/Apple_Keyboard to learn how to fix this issue.</p>"},{"location":"project/faq/#my-system-keeps-booting-into-macos-not-asahi","title":"My system keeps booting into macOS, not Asahi!","text":"<p>macOS may be set as your default boot medium. Enter One True Recovery (1TR) by shutting down and powering on while holding the power button for 15 seconds. You can either select Asahi Linux while holding the Option key or enter the Settings page, unlock macOS, then set the bootloader to reboot into Asahi.</p>"},{"location":"project/faq/#i-am-having-performancetearingfeature-issues-on-xorg","title":"I am having performance/tearing/feature issues on Xorg","text":"<p>Please stop using Xorg and switch to Wayland. Xorg as a primary display server is all but unmaintained, and its architecture is at odds with modern display hardware as is present on Apple Silicon devices. We do not have the development bandwidth to spend time on Xorg and its idiosyncrasies. Distributions and downstream desktop environments are already dropping Xorg support. You are free to keep using it if you wish, but we will not be supporting it beyond \"it starts and displays a basic desktop correctly\".</p> <p>The Fedora Asahi Remix (the flagship reference distribution) is Wayland-only out of the box for this reason.</p>"},{"location":"project/faq/#screen-reader-software-or-other-accessibility-features-are-not-working-by-default","title":"Screen reader software or other accessibility features are not working by default","text":"<p>As of February 2025, accessibility features were enabled by default, and should soon after be available on the lock screen after installation. This was implemented in the following https://pagure.io/fedora-asahi/calamares-firstboot-config/pull-request/5.</p>"},{"location":"project/faq/#screen-recording-is-slow","title":"Screen recording is slow","text":"<p>Make sure you have the GPU drivers installed. If screen recording is still slow, you are probably using a screen recording app or compositor that directly reads out or copies GPU display surfaces from the CPU. GPU display surfaces are optimized for GPU access, and direct CPU readout is unlikely to even work at all once we switch to compressed primary display framebuffers. In other words, approaches such as kmsgrab are fundamentally flawed, will perform poorly, and will stop working entirely in the future. You should use a display compositor and recording app that correctly share GPU textures and then optimize the read-out for CPU encoding. KDE's KWin and OBS are known to work well together, as well as KDE's standalone Spectacle screenshot/recording app.</p>"},{"location":"project/faq/#chromium-vs-code-slack-discord-some-other-electron-app-or-chrome-based-browser-stopped-rendering-after-an-update","title":"Chromium / VS Code / Slack / Discord / some other Electron app or Chrome-based browser stopped rendering after an update.","text":"<p>This is an upstream Chromium bug affecting all Chromium-based frameworks such as Electron. You have to manually delete your shader cache (e.g. <code>~/.config/Slack/GPUCache</code>). We can't do anything about it until the fix is backported/released to users.</p>"},{"location":"project/faq/#start-up-automatically-after-a-power-failure","title":"Start up automatically after a power failure","text":"<p>This configuration is available at <code>/sys/bus/platform/devices/macsmc-reboot/ac_power_mode</code>. Valid options are <code>off</code> and <code>restore</code>, which is equivalent to the toggle in System Settings on macOS. It is not possible to set the machine to power on unconditionally when power is connected.</p>"},{"location":"project/faq/#wake-for-network-access-wolwowlan","title":"Wake for network access (WoL/WoWLAN)","text":"<ul> <li>Wake on LAN does not work. The BCM57762 gigabit Ethernet controller supports WoL via magic packets, it can be enabled with <code>ethtool -s REPLACE_WITH_YOUR_INTERFACE wol g</code>, but the machine does not wake up when it receives magic packets.</li> <li>Wake on Wireless LAN is untested.</li> </ul>"},{"location":"project/faq/#lights-out-management-lom","title":"Lights Out Management (LOM)","text":"<p>LOM is only supported on devices with 10Gbps Ethernet cards enrolled in a mobile device management (MDM) solution. This feature has not yet been reverse engineered.</p>"},{"location":"project/glossary/","title":"Glossary","text":"<p>Useful terms to know.</p> <p>Add terms specific to the hardware, reverse engineering, and Apple ecosystems that are relevant. Don't add things that everyone is expected to know (CPU, GPU, HDD, SSD, OSX, USB, HDMI, RAM, etc.) or which are not likely to be relevant to the project. Think of the target audience as \"random Linux developer\".</p> <p>If you want to collect a large set of terms specific to a sub-field (such as GPUs), feel free to create a separate page.</p>"},{"location":"project/glossary/#1","title":"1","text":"<ul> <li>1TR: One True RecoveryOS. This is what RecoveryOS is called when you boot it by holding down the power button. This means you have asserted physical presence and you are running a fully Apple-trusted recovery environment, which gives you special powers, like the ability to install a custom OS. You get root access, but you can only run software signed by Apple, and if FileVault is enabled you first need to authenticate.</li> </ul>"},{"location":"project/glossary/#4","title":"4","text":"<ul> <li>4CC: Four-character code. A sequence of four bytes, traditionally ASCII characters within the printable range, used as human-readable identifiers for data.</li> </ul>"},{"location":"project/glossary/#a","title":"A","text":"<ul> <li>AGX: The internal name for Apple's GPU series.</li> <li>AIC: Apple Interrupt Controller. Apple's custom ARM interrupt controller, because the standard GIC was too standard for Apple.</li> <li>AMX: Apple Matrix eXtensions. A matrix coprocessor partially integrated into the ISA.</li> <li>ANE: Apple Neural Engine. FP16 multiply-add unit.</li> <li>ANS: NVME / storage coprocessor?</li> <li>AOP: Always On Processor. Apple SoC co-processor/DSP that that enables \u201cHey Siri,\u201d feature on macOS among other things. </li> <li>AP: Application Processor. The main CPU running most of the OS. Contrast to SEP.</li> <li>APFS: Apple File System. Apple's new container and volume oriented \"modern\" filesystem, think ZFS and btrfs.</li> <li>APFS Container: a physical partition on a disk that can itself contain multiple filesystems (volumes), all dynamically sharing space.</li> <li>APFS Snapshot: a read-only copy-on-write snapshot of an APFS volume.</li> <li>APFS Volume: a logical filesystem within an APFS container, that can be mounted on a directory.</li> <li>APR: APR ProRes. Handles ProRes video encoding + decoding.</li> <li>APSC: Automatic Power State Controller.</li> <li>ASC: Possible generic name for Coprocessors? e.g. gfx-asc. Possibly Apple Silicon Coprocessor.</li> <li>AVD: Apple Video Decoder.</li> <li>AVE: Apple Video Encoder. Supports AVC and HEVC.</li> </ul>"},{"location":"project/glossary/#b","title":"B","text":"<ul> <li>BootROM: A read-only memory embedded in a chip such as the M1, which is the first code executed upon boot. See SecureROM.</li> </ul>"},{"location":"project/glossary/#c","title":"C","text":"<ul> <li>Chicken Bits: Otherwise known as \"kill bits\", configuration bits used for disabling/enabling specific features.</li> </ul>"},{"location":"project/glossary/#d","title":"D","text":"<ul> <li>DART: Device Address Resolution Table. Apple's custom IOMMU.</li> <li>DCP: Display Control Processor (probably). It enables support for displaying new frames without tearing, hardware sprites e.g. mouse cursor, switching resolutions, configuring multiple outputs, and more.</li> <li>DFR: Dynamic Function Row. Apple's internal name for the Touch Bar.</li> <li>DFU: Device Firmware Update. A USB mode that allows flashing a device's firmware over USB. Apple devices support this in the SecureROM, to allow the user to restore devices which have otherwise been bricked.</li> <li>DPE: Digital Power Estimator.</li> <li>DVFM: Dynamic Voltage and Frequency Management.</li> </ul>"},{"location":"project/glossary/#e","title":"E","text":"<ul> <li>EEPROM: Electrically Erasable Programmable Read Only Memory. A type of re-writable memory, commonly available in sizes of a few kilobytes at most, more robust than NOR Flash. Often used for settings and very early boot code.</li> </ul>"},{"location":"project/glossary/#f","title":"F","text":"<ul> <li>Fallback Recovery OS: 2nd copy of recovery OS accessed by double clicking and holding power button to boot. Unlike 1TR is unable to change security state(settings). Can be distinguished from Recovery OS 1TR by Utilities missing \"Start Security Utility\" option under Utilities</li> <li>fuOS: Custom OS, speculated to mean \"fully untrusted OS\".</li> </ul>"},{"location":"project/glossary/#g","title":"G","text":"<ul> <li>GPT: GUID Partition Table: A partition table format created for EFI/UEFI and now used on most modern systems.</li> <li>GXF: probably Guarded Execution Function. Lateral exception levels used to create a low-overhead hypervisor to protect pagetables and equally important structures from XNU itself. See e.g. Sven's write-up or SPRR and GXF</li> </ul>"},{"location":"project/glossary/#h","title":"H","text":"<ul> <li>HFS+: Hierarchical Filesystem+: Apple's previous filesystem, used for external storage. Not used for internal storage on M1 Macs.</li> </ul>"},{"location":"project/glossary/#i","title":"I","text":"<ul> <li>I\u00b2C: Inter-Integrated Circuit. A 2-wire standard for communicating at low speed between chips on a board.</li> <li>iBEC: iBoot Epoch Change. Replacement for the second-stage iBoot, loaded in the DFU boot flow.</li> <li>iBoot: Apple's bootloader. Can refer to iBoot1, iBoot1, or any of iBSS, iBEC, or even the SecureROM itself (which are all different builds of iBoot with different capabilities).</li> <li>iBoot1: The first-stage iBoot located in NOR, loaded by the SecureROM. It chainloads the second-stage iBoot (iBoot2) on the OS Preboot partition, after doing early initialization and loading OS-independent firmwares. LLB is an older name for iBoot1.</li> <li>iBoot2: The second-stage iBoot located in the OS Preboot partition. This version of iBoot is specific to each installed OS, and is packaged with the bundle of runtime firmwares the OS needs to run.</li> <li>iBSS: iBoot Single Stage. Replacement for the first-stage iBoot (iBoot1/LLB), loaded in the DFU boot flow when the NOR is corrupted.</li> <li>IOKit: I/O Kit is Apple's device driver framework for XNU (Apple's operating system kernel).</li> <li>IOMMU: I/O Memory Management Unit, a more general term for Apple's DART.</li> <li>IPI: Inter-processor interrupt. An interrupt used by one processor to interrupt another.</li> <li>iSC: iBoot System Container. A disk partition (usually first on the internal SSD) containing the system wide boot data. (See Stock Partition Layout)</li> <li>ISP: Image Signal Processor. Webcam on M-series laptops. Denotes the entire camera unit, from sensors to strobe to the coprocessor.</li> </ul>"},{"location":"project/glossary/#j","title":"J","text":"<ul> <li>JTAG: Joint Test Action Group. Actually refers to a debugging interface released by that group, a 4/5-wire interface to debug chips and CPUs at the hardware level.</li> </ul>"},{"location":"project/glossary/#k","title":"K","text":"<ul> <li>kASLR: kernel Address Space Location Randomization: Linux kernel feature randomizes where the kernel code is placed in memory at boot time. Disabled by specifying <code>nokaslr</code> boot flag.</li> <li>kcOS: OS with a custom kernel cache.</li> <li>Kernel cache: A bundle of the kernel and its extensions, optionally encrypted.</li> <li>kmutil macOS Kernel Management utility for managing kernel extensions (kexts). Used to boot alternative kernels i.e. m1n1</li> </ul>"},{"location":"project/glossary/#l","title":"L","text":"<ul> <li>LLB: Low Level Bootloader, an older name for iBoot1 inherited from iOS platforms.</li> </ul>"},{"location":"project/glossary/#m","title":"M","text":"<ul> <li>Mini - Custom bootloader for internal investigation. May or may not support booting from SSD. This project uses a fork that's referred to as M1N1.</li> <li>Mux: Multiplexer, a device that can connect one of several things to a single connection, such as switching one set of pins between USB, UART, and SWD modes.</li> </ul>"},{"location":"project/glossary/#n","title":"N","text":"<ul> <li>NAND: Not-AND. A type of logic gate, but normally refers to a type of Flash memory, which is the one used on all modern high-capacity Flash-based storage such as SD cards and SSDs, but also comes in bare chips.</li> <li>NOR: Not-OR. A type of logic gate, but normally refers to a type of Flash memory, which is only used for low-capacity applications (up to a few megabytes at most). More robust than NAND. Usually comes in bare 8-pin chips these days.</li> <li>NVRAM: Non-Volatile RAM. The name is obsolete, it just means a list of key=value parameters stored in a Mac for boot configuration. Akin to UEFI variables.</li> </ul>"},{"location":"project/glossary/#p","title":"P","text":"<ul> <li>PMGR: Power manager.</li> <li>PMP: Power Management Processor.</li> </ul>"},{"location":"project/glossary/#r","title":"R","text":"<ul> <li>RecoveryOS: The recovery environment, which can either be a recovery image paired to an OS install (located inside an APFS subvolume) or the global recovery image installed in the last APFS container on disk. macOS 11.x uses the global image by default, while macOS 12.0 and newer uses a paired recoveryOS.</li> <li>RestoreOS: The restore environment, loaded onto the device when \"reviving\" it through DFU mode by Apple Configurator. more info</li> <li>ROM is an acronym for Read-Only Memory. It refers to computer memory chips containing permanent or semi-permanent data.</li> <li>RTKit: Apple's proprietary real-time operating system. Most of the accelerators (AGX, ANE, AOP, DCP, AVE, PMP) run RTKit on an internal processor. The string \"RTKSTACKRTKSTACK\" is characteristic of a firmware containing RTKit.</li> <li>RTOS: Real-time operating system.</li> </ul>"},{"location":"project/glossary/#s","title":"S","text":"<ul> <li>SBU: Sideband Use. Two pins on Type C connectors free to be used for random stuff, not defined by the Type C standard itself.</li> <li>SecureROM: The BootROM of the M1. This is in charge of reading iBoot1 from NOR and passing control to it, or falling back to DFU mode.</li> <li>SEP: Secure Enclave Processor. The M1's built-in HSM/TPM/etc device. Handles Touch ID and most crypto, as well as boot policy decisions. Harmless to Linux, but we can use its features if we want to. Contrast to AP.</li> <li>SFR: System Firmware and Recovery, the collection of firmware and the recovery image shared by all OSes installed on the system, including components in NOR (like iBoot1), the iBoot System Container, the System Recovery partition, and external Flash memories and other miscellaneous locations. SFR always goes forward in version, never backwards (other than via a full wipe).</li> <li>SIP: System Integrity Protection. Also called \"rootless\", where the macOS kernel stops even root from doing some things.</li> <li>SMC: System Management Controller: a piece of hardware handling access to such things as temperature sensors, voltage/power meters, battery status, fan status, and the LCD backlight and lid switch. See SMC</li> <li>SOP: Start Of Packet. Used to differentiate packet types in USB-PD. SOP for normal comms, SOP' and SOP\" to talk to built-in chips in a cable, SOP'DEBUG and SOP\"DEBUG for custom vendor specific things like Apple VDMs.</li> <li>SPI: Serial Peripheral Interface. A 4-wire standard for communicating at low speed between chips on a board.</li> <li>SPMI: System Power Management Interface from MIPI Alliance: 2-wire bi-directional interface, Multi master(up to 4), Multi slave(up to 16), 32KHz to 26MHz. See System Power Management Interface</li> <li>SPRR: probably Shadow Permission Remap Registers. Turns the normal page permission attributes (AP,PXN,UXN) into an index to a separate table. This new table then determines the real page permissions. Also disallows pages that writeable and executable at the same time. See e.g. Sven's write-up or SPRR and GXF</li> <li>SWD: Serial Wire Debug. A 2-pin interface used for debugging ARM cores, like JTAG over fewer pins. Used on Apple devices, but inaccessible (for the main CPU/SoC) in production devices due to security restrictions.</li> </ul>"},{"location":"project/glossary/#t","title":"T","text":"<ul> <li>TBT: Thunderbolt Technology</li> </ul>"},{"location":"project/glossary/#u","title":"U","text":"<ul> <li>UART: Universal Asynchronous Receiver Transmitter. The hardware behind a serial port.</li> <li>USB-PD: USB Power Delivery. A standard for side-band communications over USB Type C (we won't talk about the older standard for our own sanity). This is used for things like detecting what kind of cable is used, connector orientation, configuring the supply voltage, and switching to non-USB modes.</li> <li>USC: Unified shader core. A shader core supporting all shader types (vertex, fragment, compute). AGX is a unified architecture, so this just refers to a shader core.</li> </ul>"},{"location":"project/glossary/#v","title":"V","text":"<ul> <li>VBUS: USB pin delivering power. Defaults to 5V, can go as high as 20V with USB-PD.</li> <li>VDM: Vendor Defined Message. Used for both USB Alternate Mode (not actually proprietary) and vendor-proprietary commands over USB-PD. Apple uses these to configure special modes on their Type C ports.</li> <li>VHE: Virtual Host Extensions. Extra Registers to allow more efficient switching between OS/VMs/User-space. See ARM VHE explanation</li> </ul>"},{"location":"project/glossary/#x","title":"X","text":"<ul> <li>XNU: Apple's operating system kernel for macOS, iOS, iPadOS, watchOS, tvOS and so on. \"XNU\" is an abbreviation for \"X is not Unix\"</li> </ul>"},{"location":"project/help-wanted/","title":"Help Wanted!","text":"<p>This page is a list of miscellaneous tasks that need to be done, but may have been de-prioritised in order to focus on frying bigger fish. Most of these tasks will be low stakes and low effort, making them good places to start for newcomers to kernel development or Free Software in general.</p> <p>If you decide to take up any of these tasks, please update the task's status to avoid duplicate work. Reach out on <code>#asahi-dev</code> if you have any questions or are in need of assistance.</p> Task Status Description Contact libgnome-volume-control fixes Unclaimed GNOME's volume mixer is implemented in the <code>libgnome-volume-control</code> plugin. Unfortunately, this interacts poorly with WirePlumber/Pipewire and does not seem to respect node graph permissions. This leads to the default sink being the \"raw\" hardware device on GNOME, bypassing our DSP, which is completely unsupported. <code>libgnome-volume-control</code> needs to be fixed so that it hides the raw hardware sink and selects the correct default sink. chadmed Rewrite tuxvdmtool to userspace i2c Unclaimed tuxvdmtool uses a sysfs API which isn't particularly nice and probably not upstreamable. After publishing tuxvdmtool we came to the conclusion that using linux userspace I2C client driver API is a better choice and should work. See https://github.com/AsahiLinux/tuxvdmtool/issues/1 janne Fix serial port resets Unclaimed When using the apple silicon debug uart with two connected Apple silicon devices the serial port on the host device (<code>/dev/ttySAC0</code>) resets within seconds after <code>tuxvdmtool reboot serial</code>. Find the cause for this and fix the issue. This tasks is a little annoying since m1n1's hypervisor clobbers the hardware uart0 for its own use. janne Keyboard layout cleanup (XKB/hid_apple) Unclaimed Apple keyboard support across the Linux desktop stack has been hit-and-miss, across layouts and hardware keyboards. Since our keyboard drivers are not upstream yet, we have the chance to do some major cleanup. In particular, the keyboards on these machines have a soft Fn key that is handled entirely in software. The <code>hid_apple</code> driver currently does this in the kernel, but this is the wrong approach. This key should be handled in userspace in XKB/Wayland (Xorg cannot do it, but it's deprecated), so that we can have more comprehensive Fn key mappings including letting users customize the key bindings like they would any other modifier key, or offer special symbols like macOS does. This should probably be done by introducing new XKB keyboard models, which do this mapping in userspace. To test this, use the <code>fnmode=0</code> module parameter for <code>hid_apple</code> to disable all Fn key processing. We will later want to introduce a new fnmode that only does Fn key combination emulation for the edit keys (insert/delete/home/end/pgup/pgdown), which is the minimum required for a usable TTY and Xorg, and leave the rest to XKB, defaulting to this mode on Apple Silicon machines. Besides the Fn story, there are also many regional Mac layouts that need to be fixed in XKB configuration, and everyone with a non-English keyboard is welcome to help out with that effort. Relevant xkeyboard-config issue janne"},{"location":"project/references/","title":"Miscellaneous References","text":""},{"location":"project/references/#web-references","title":"Web References","text":"<p>These are just some references for people to build some background knowledge into getting Linux working on Apple Silicon.</p> <p>Explore the new system architecture of Apple silicon Macs (WWDC 2020 Session)</p> <p>Apple Platform Security Documentation</p> <p>The T2 Development Blog</p> <p>Apple Silicon DFU Restore guide</p> <p>arm Architecture Reference Manual (Armv8-A v8.6) &amp; Errata</p> <p>Rod Smiths Blog (More about the former UEFI mode used on Intel Macs but added for some historical context)</p> <p>S3C2400 datasheet download link for samsung serial hardware </p>"},{"location":"project/references/#social-media","title":"Social Media","text":"<p>Xeno Kovah ( (ex) Apple Silicon secure boot architect )</p> <p>Nikolaj Schlej ( Apple Firmware Security Engineer)</p> <p>Longhorn (@never_released)</p>"},{"location":"project/trivia/","title":"Platform Trivia","text":"<p>A list of random fun trivia about this platform and its legacy.</p>"},{"location":"project/trivia/#iphone-legacy","title":"iPhone legacy","text":""},{"location":"project/trivia/#my-m1-thinks-its-an-iphone-5","title":"My M1 thinks it's an iPhone 5","text":"<p>When an M1 Mac Mini is booted without a display connected, or unconditionally as of macOS 12.0, iBoot does not initialize the display. Instead it creates fake 640\u00d71136 framebuffer. That's the screen resolution of the iPhone 5.</p> <p>Then this happens:</p> <p></p>"},{"location":"project/trivia/#just-cant-let-go-of-samsung","title":"Just can't let go of Samsung","text":"<p>The serial port peripheral in the M1 is ~identical to the one in the original iPhone SoC by Samsung (S5L8900), to the point where we use the same Samsung UART driver in Linux. We don't know if these days it's a re-implementation by Apple, or if they're still licensing the same old Samsung IP.</p> <p>In fact, the idea that the Apple A4 was the first \"in-house\" design by Apple is primarily marketing. Apple SoCs have been leading a slow transition away from third-party IP to Apple IP, but they still use plenty of third-party blocks. There is no clear line between third-party and in-house design.</p>"},{"location":"project/trivia/#powerpc-legacy","title":"PowerPC legacy","text":""},{"location":"project/trivia/#hidden-registers","title":"HIDden registers","text":"<p>Apple CPU cores call their miscellaneous configuration/chicken bit registers \"HIDx\" registers, meaning \"Hardware Implementation Dependent\" register. This name was first used by IBM in their PowerPC CPUs for the same purpose.</p>"},{"location":"project/trivia/#darting-back-to-the-power-mac-g5","title":"DARTing back to the Power Mac G5","text":"<p>The IOMMUs in Apple SoCs are called \"DART\"s. This stands for \"Device Address Resolution Table\", which was also the name of the IOMMU in the U3H host bridge in Power Mac G5 systems. The actual details are unrelated, though, so there is no shared code for this; only the name is the same.</p>"},{"location":"project/trivia/#what-do-an-amigaone-x1000-and-an-m1-mac-have-in-common","title":"What do an AmigaOne X1000 and an M1 Mac have in common?","text":"<p>The I\u00b2C peripheral in the M1 and other recent Apple SoCs is a modified version of the I\u00b2C peripheral in the PWRficient PA6T-1682M chip from P. A. Semi. Apple bought the company to kickstart their SoC/CPU design team, and decided that one IP block was good enough to just keep. This is the same CPU that is used in the AmigaOne X1000, and we extended the existing Linux driver to support both platforms.</p>"},{"location":"project/trivia/#x86-legacy","title":"x86 legacy","text":""},{"location":"project/trivia/#my-m1-natively-runs-x86-code","title":"My M1 natively runs x86 code","text":"<p>The DisplayPort to HDMI bridge chip in the Mac Mini and 14\"/16\" MacBook Pros (MDCP29xx) uses a V186 CPU core. That's an Intel 80186 clone, running good old 16-bit x86 real mode code. Yes, x86 from the MS-DOS era is in your Mac.</p>"},{"location":"project/trivia/#attention-to-detail","title":"Attention to detail","text":""},{"location":"project/trivia/#help-me","title":"Help me!","text":"<p>The Mac\u2019s SecureROM is small and can\u2019t do much by itself; on the Mac mini, it cannot display an image on the screen. It can, however, control the power LED. If you start the Mac in DFU mode, the LED will be amber instead of white. If you start the Mac normally and the early boot process fails (for instance, because of a failed restore operation), the power LED will be amber, and blink with the following pattern: three short blinks, three longer blinks, three shorts blinks, a pause, and repeat. That is Morse code for SOS! The Mac is quietly asking to be saved\u2026</p>"},{"location":"project/when-will-asahi-be-done/","title":"When Will Asahi Be Done?","text":"<p>If you're after the support status of a specific feature, Feature Support has a list of all major hardware included in the Apple Silicon Macs, as well as its level of support.</p>"},{"location":"project/when-will-asahi-be-done/#why-you-shouldnt-ask-this-question-on-irc","title":"Why you shouldn't ask this question on IRC","text":"<p>If you ask on any of our IRC channels when Asahi Linux will be done, you will likely get one of these responses, or a variant thereof:</p> <ul> <li>\"Soon\"</li> <li>\"It already works\"</li> <li>\"Never\"</li> </ul> <p>All of these are actually correct, and the confusion sown by having all of these correct answers thrown at you will likely just give you a headache.</p>"},{"location":"project/when-will-asahi-be-done/#why-theyre-all-correct","title":"Why they're all correct","text":"<p>The problem with asking about \"doneness\" in such a broad community is that everyone's idea of \"done\" is different. We have a large community of developers, testers, and eager users from a variety of backgrounds, all of whom have different expectations of the project.</p>"},{"location":"project/when-will-asahi-be-done/#soon","title":"\"Soon\"","text":"<p>For an end user who uses Just Works<sup>TM</sup> distro, Asahi Linux might not be \"done\" until they are able to boot their favourite distro's installer off a USB stick and run its install procedure like they would on an amd64 machine. They likely also expect features like 3D acceleration, modesetting, WiFi, Bluetooth, Thunderbolt etc. to all work out of the box. For this to all be the case, all the relevant kernel patches have to be accepted upstream and then pulled into the distro's generic kernel and the user's particular machine must have support in U-Boot. Considering that at the time of writing, many of these drivers haven't even been committed to <code>linux-asahi</code>, so this point is probably quite far away. For people who expect such things, Asahi Linux likely won't be \"done\" for another year, maybe two.</p>"},{"location":"project/when-will-asahi-be-done/#it-already-works","title":"\"It already works\"","text":"<p>Next, we consider the case of someone who is actively testing bleeding edge drivers in <code>linux-asahi</code>. Someone like this may be eagerly awaiting a single feature or set of features to test out what these machines can do. For example, someone might be waiting for proper 3D acceleration to see how good the GPU is at certain workloads without the bottleneck of translating to Metal first. Another person might want to test using the Mac Mini as a networked build machine, for which they would probably only want networking, pstates, and a <code>cpufreq</code> driver. For people like this, \"done\" could very well mean whenever the specific feature they require lands in the <code>linux-asahi</code> kernel branch. That may be today, tomorrow, soon, or it may not even be on the list of things to look at.</p>"},{"location":"project/when-will-asahi-be-done/#never","title":"\"Never\"","text":"<p>Finally, we consider the perspective of the developer. Development for an undocumented platform is a treadmill of work. Every new feature requires reverse engineering the relevant hardware, writing drivers, testing those drivers, then getting them upstreamed. Even after a driver is upstreamed, maintenance and optimisation is sometimes required, for example if Apple introduce a breaking change to any firmware we are required to interface with. For developers the work is never really done, however a sort of colloquial \"doneness\" we use around here to decide what work gets priority is when a driver is completed to a quality level where it is accepted for merging upstream.</p>"},{"location":"project/when-will-asahi-be-done/#what-this-means-for-you","title":"What this means for you","text":"<p>No one can really decide when Asahi Linux is \"done\" except for you. Your use case, technical skill, ambition and risk tolerance are your own. As development work is ongoing, we will likely never have an official \"done\" date for you to live by, so your best bet is to use your own judgement and the list of features at Feature Support to decide if the time is right for you to try out Linux on Apple Silicon.</p>"},{"location":"project/when-will-asahi-be-done/#a-note-on-new-hardware","title":"A note on new hardware","text":"<p>The time it takes us to bring new hardware online is entirely dependent on the changes Apple makes to that particular subsystem in new silicon revisions. Core SoC building blocks will likely Just Work<sup>TM</sup> for a long while yet on many new machines with no changes, and other things may require totally new drivers and further work on reverse engineering. </p> <p>Apple make things somewhat easier for us by only introducing changes to hardware when it is absolutely necessary to do so. The original iteration of the AIC (Apple Interrupt Controller) was unchanged from the early iPhones all the way to the M1. We expect AIC2, first found in the M1 Pro and Max, to have a similar, if not longer lifespan. Generally, changes to any piece of hardware will be supported in less time than it took to bring up the hardware initially. </p> <p>Large architectural changes to things like the GPU and Neural Engine may take slightly longer to figure out. As such, we cannot guarantee dates or turnaround times for any new silicon Apple release. The answer to the question \"When will [feature] on [machine] be supported?\" is always \"When it is listed as supported in the documentation.\"</p>"},{"location":"project/board/asahi-board/","title":"Asahi Linux Board","text":"<p>The Asahi Linux Board is the governing body of the Asahi Linux project. The board handles the administration of the project, including day-to-day operations, finances, and the Code of Conduct.</p> <p>The board meets once a month.</p>"},{"location":"project/board/asahi-board/#current-members","title":"Current Members","text":"<ul> <li>Alyssa Rosenzweig</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Sven Peter</li> <li>chaos_princess</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/asahi-board/#meeting-minutes-times-in-useastern","title":"Meeting Minutes (times in US/Eastern)","text":"<ul> <li>7 March 2025 16:00</li> <li>4 April 2025 16:00</li> <li>2 May 2025 17:00</li> <li>6 June 2025 17:00</li> <li>18 July 2025 17:00</li> <li>8 August 2025 17:00</li> <li>5 September 2025 16:00</li> </ul>"},{"location":"project/board/minutes/20250307/","title":"Asahi Linux Board Meeting Minutes - 7 Mar 2025","text":"<p>Date: 7 Mar 2025 1600-0500</p>"},{"location":"project/board/minutes/20250307/#present","title":"Present","text":"<ul> <li>Alyssa Rosenzweig</li> <li>chaos princess</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Sven Peter</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250307/#agenda","title":"Agenda:","text":"<p>No agenda set, first meeting</p>"},{"location":"project/board/minutes/20250307/#discussion-items","title":"Discussion items","text":"<ul> <li>Expenses<ul> <li>Approved purchase of J313 for AUD 722.50</li> <li>Discussed purchase of laptop for Neal</li> </ul> </li> <li>Setting up email<ul> <li>@asahilinux.org emails for board members, CoC, etc.</li> <li>Look at setting up Migadu</li> </ul> </li> <li>Domain ownership<ul> <li>Need to transfer domains to project ownership</li> </ul> </li> <li>Password vault<ul> <li>1Password offers free services to OpenCollective projects</li> </ul> </li> <li>Blog posts and giving backers value<ul> <li>Blog post for each major kernel release</li> <li>Blog posts to include important developments even if not upstreamed   in the relevant kernel release</li> <li>Start with 6.13, talk about PMUv3, mics, Vk sparse</li> </ul> </li> </ul>"},{"location":"project/board/minutes/20250307/#action-items","title":"Action Items","text":"<ul> <li>Neal to investigate options for an M2 machine</li> <li>Sven and Alyssa to set up Migadu</li> <li>Neal and Alyssa to get domain transferred to OSC</li> <li>Neal to reach out to 1Password for password vault</li> <li>Everyone to start writing blog collateral</li> </ul>"},{"location":"project/board/minutes/20250404/","title":"Asahi Linux Board Meeting Minutes - 4 Apr 2025","text":"<p>Date: 4 Apr 2025 1600-0500</p>"},{"location":"project/board/minutes/20250404/#present","title":"Present","text":"<ul> <li>Alyssa Rosenzweig</li> <li>chaos princess</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Sven Peter</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250404/#agenda","title":"Agenda:","text":"<ul> <li>Expenses approval</li> <li>Migrating Asahi Stats server</li> <li>Standardising treatment of alt distros</li> </ul>"},{"location":"project/board/minutes/20250404/#discussion-items","title":"Discussion items","text":"<ul> <li>Expenses<ul> <li>Neal's laptop approved</li> <li>Alyssa's Migadu expenses approved</li> </ul> </li> <li>Someone needs to host the stats server</li> <li>Mesa CI? No point until uAPI is merged</li> <li>We should turn off the GitHub wiki</li> <li>Still need to transfer some domains from Hector to Asahi</li> <li>OpenCollective can hold our domains for us if they're set up with Namecheap</li> <li>FAR domains can't be transferred to Fedora Project</li> <li>Fedora 42 testing - muvm patch needs to be backported if we don't release</li> <li>How much support do we give distros? We should have a policy/quality standards</li> </ul>"},{"location":"project/board/minutes/20250404/#action-items","title":"Action Items","text":"<ul> <li>Neal to transfer domains to Namecheap</li> <li>chaos_princess to take on hosting of the stats server temporarily</li> <li>James to create alt distro policy</li> </ul>"},{"location":"project/board/minutes/20250502/","title":"Asahi Linux Board Meeting Minutes - 2 May 2025","text":"<p>Date: 2 May 2025 1700-0500</p>"},{"location":"project/board/minutes/20250502/#present","title":"Present","text":"<ul> <li>Alyssa Rosenzweig</li> <li>chaos princess</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Sven Peter</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250502/#agenda","title":"Agenda:","text":"<ul> <li>Expenses</li> <li>Alt distro policy</li> <li>Stats server</li> <li>Progress report</li> </ul>"},{"location":"project/board/minutes/20250502/#discussion-items","title":"Discussion items","text":"<ul> <li>Domain expenses approved</li> <li>Contracting Neal on an ongoing basis<ul> <li>What does this look like?</li> <li>Go back to OSC to find out</li> </ul> </li> <li>Existing invoice<ul> <li>Approved</li> </ul> </li> <li>Stats server<ul> <li>Revert distro name commit</li> <li>Get dump of db and send to chaos_princess</li> <li>Set DNS record to point to new server</li> <li>Distro stats are too abusable</li> </ul> </li> <li>HELLOTUX merch<ul> <li>Worth the revenue share?</li> <li>Lots of demand, might as well</li> </ul> </li> <li>Alt distro policy<ul> <li>We're not going to host others' images</li> <li>Installer criteria are too stringent for now</li> </ul> </li> <li>Progress report<ul> <li>Remember to mention everything that's been upstreamed</li> <li>Follow up on any developments since the last one</li> </ul> </li> <li>Domain transfers<ul> <li>60 day competitive cooldown</li> </ul> </li> </ul>"},{"location":"project/board/minutes/20250502/#action-items","title":"Action Items","text":"<ul> <li>Neal to ask OSC about ongoing expenses/contracts</li> <li>chaos_princess to get stats database backup</li> <li>James to make changes to draft alt distro policy</li> <li>James also to draft progress report</li> </ul>"},{"location":"project/board/minutes/20250606/","title":"Asahi Linux Board Meeting Minutes - 6 June 2025","text":"<p>Date: 6 June 2025 1700-0500</p>"},{"location":"project/board/minutes/20250606/#present","title":"Present","text":"<ul> <li>chaos princess</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Sven Peter</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250606/#agenda","title":"Agenda:","text":"<ul> <li>Generative AI policy</li> </ul>"},{"location":"project/board/minutes/20250606/#discussion-items","title":"Discussion items","text":"<ul> <li>AI policy<ul> <li>Two documents - actual policy and justification</li> <li>Emphasis on copyright issues for Asahi</li> </ul> </li> <li>CentOS builds have started<ul> <li>Upstream Mesa not working for some reason</li> </ul> </li> <li>Anaconda team to look at restricting partitioning</li> </ul>"},{"location":"project/board/minutes/20250606/#action-items","title":"Action Items","text":"<ul> <li>Neal to finalise proposal</li> <li>Janne to submit Kiwi descriptor MR for live ISO builds</li> <li>James to finalise AI policy</li> </ul>"},{"location":"project/board/minutes/20250718/","title":"Asahi Linux Board Meeting Minutes - 18 July 2025","text":"<p>Date: 18 July 2025 1700-0500</p>"},{"location":"project/board/minutes/20250718/#present","title":"Present","text":"<ul> <li>chaos princess</li> <li>Neal Gompa</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Alyssa Rosenzweig</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250718/#agenda","title":"Agenda:","text":"<ul> <li>Akademy</li> <li>Discuss finalised proposal</li> <li>m1n1 release</li> </ul>"},{"location":"project/board/minutes/20250718/#discussion-items","title":"Discussion items","text":"<ul> <li>Akademy<ul> <li>Travel very expensive, probably not in remit to cover</li> </ul> </li> <li>Do a m1n1 release before Rust porting goes in</li> </ul>"},{"location":"project/board/minutes/20250808/","title":"Asahi Linux Board Meeting Minutes - 8 August 2025","text":"<p>Date: 8 August 2025 1700-0500</p>"},{"location":"project/board/minutes/20250808/#present","title":"Present","text":"<ul> <li>chaos princess</li> <li>Sven Peter</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>James Calligeros</li> </ul>"},{"location":"project/board/minutes/20250808/#agenda","title":"Agenda:","text":"<ul> <li>PackIt</li> </ul>"},{"location":"project/board/minutes/20250808/#discussion-items","title":"Discussion items","text":"<ul> <li>Get rid of PackIt on m1n1 repo, keep elsewhere for now<ul> <li>Might still remove if it gets even more annoying</li> </ul> </li> <li>Stats server looking good now, probably should bring the infra under project ownership</li> <li>Infra sponsorship - contact AWS</li> <li>Still need to figure out Bunny CDN push on installer updates</li> </ul>"},{"location":"project/board/minutes/20250905/","title":"Asahi Linux Board Meeting Minutes - 5 September 2025","text":"<p>Date: 5 September 2025 1600-0500</p>"},{"location":"project/board/minutes/20250905/#present","title":"Present","text":"<ul> <li>chaos princess</li> <li>Sven Peter</li> <li>Davide Cavalca</li> <li>Janne Grunau</li> <li>Alyssa Rosenzweig</li> </ul>"},{"location":"project/board/minutes/20250905/#discussion-items","title":"Discussion items","text":"<ul> <li>6.17 Progress Report<ul> <li>DART changes, USB-C, Devicetree changes, SMC</li> </ul> </li> <li>USB-C<ul> <li>Needs new U-Boot release</li> </ul> </li> <li>F43 beta<ul> <li>Mesa still broken</li> <li>Asahi repos need splitting up</li> </ul> </li> <li>t602x DT submission<ul> <li>Figure out merge strategy</li> </ul> </li> </ul>"},{"location":"project/board/minutes/20250905/#action-items","title":"Action items","text":"<ul> <li>Janne to spin up MR for Asahi repo split</li> <li>Follow up with Fedora Mesa maintainers re F43</li> <li>Cut a U-Boot release</li> </ul>"},{"location":"project/policies/slop/","title":"Generative AI Policy","text":"<p>It is the opinion of the Board that Large Language Models (LLMs), herein referred to as Slop Generators, are unsuitable for use as software engineering tools, particularly in the Free and Open Source Software movement.</p> <p>The use of Slop Generators in any contribution to the Asahi Linux project is expressly forbidden. Their use in any material capacity where code, documentation, engineering decisions, etc. are largely created with the \"help\" of a Slop Generators will be met with a single warning. Subsequent disregard for this policy will be met with an immediate and permanent ban from the Asahi Linux project and all associated spaces.</p>"},{"location":"project/policies/slop/#illegal-output","title":"Illegal output","text":"<p>All of the popular Slop Generators are trained on an incomprehensibly large corpus of text. There is ample evidence across the Web of this training material including copyrighted material, brazenly stolen by the Slop Generator proprietors with impunity. Due to the nature of Slop Generators, they are prone to regurgitating their training corpus almost verbatim. This presents a challenge for FOSS projects in that the use of generated slop is highly likely to violate intellectual property law by way of regurgitating the aforementioned stolen training material. This likelihood is proportional to the specificity of the problem area.</p> <p>Asahi Linux is a highly specific project, working in esoteric problem spaces on publicly undocumented hardware. Given the techniques used by Slop Generator manufacturers, it is not impossible for them to have confidential or leaked material owned by Apple or its vendor partners in their training corpi. It is therefore likely that Slop Generators will regurgitate this when queried in just the right way. We already forbid the use of illegally acquired or leaked documentation and tooling (e.g. Apple's internal repair diagnostic tools). This also applies to regurgitated slop.</p> <p>FOSS projects like Asahi Linux cannot afford costly intellectual property lawsuits in US courts. The current political situation in that nation also makes it incredibly unlikely that any FOSS project would win such a suit regardless of the quality of its defence.</p>"},{"location":"project/policies/slop/#waste-of-resources","title":"Waste of resources","text":"<p>Slop Generators consume an unfathomable amount of resources we can scarcely afford to waste. Training, and to a lesser extent inference, require enormous amounts of energy, water, land, and hardware. Manufacturing the hardware itself requires enormous amounts of energy, water and minerals. All parts of the Slop Generator supply chain are environmentally intensive. These resources are better used on quite literally anything else.</p>"},{"location":"project/policies/slop/#lmgtfy","title":"LMGTFY","text":"<p>An emerging trend we have observed is people copying user questions or posts into a Slop Generator, then replying to the post with the generated slop. This is occurring with increasing frequency, particularly on Reddit. For some people it is tempting to \"help\" others and answer questions by feeding them to a LLM and then posting the answer as-is, or lightly edited at best. If this is you, please realise that others also have access to the same models as you do, and if they wanted an answer from one, they could have asked it themselves. Doing this is exactly as helpful as posting a LMGTFY link, and everyone else will view your actions as if you did exactly that.</p>"},{"location":"project/policies/slop/#its-just-matmul","title":"It's just matmul","text":"<p>It is very easy to get caught up in the hype that bad actors have built around Slop Generators. The anthropomorphic presentation of Slop Generators as \"agents\" or \"assistants\" is a very deliberate attempt to manufacture consent for their integration into workforces at the expense of human interaction. The implication of some higher degree intelligence or sentience is very much deliberate, and it is very much false.</p> <p>Make no mistake, they cannot think. They cannot reason. They cannot take into account context. They don't \"know\" things or have a sense of humour or any of the other human-centric qualities bad actors would have you believe of them. Slop Generators are a chain of matrices in a stochastic system. The output of a Slop Generator is nothing more than a statistical calculation, where the next word to be generated is decided by an opaque probabilistic function dependent on previously generated words. This is fundamentally the same mathematics that is used to predict the weather.</p> <p>A Slop Generator cannot assess the veracity of its claims, nor can it ever tell you that it simply does not know something. Slop Generators are often confidently incorrect as a result, and require brow-beating to admit a mistake. They are therefore highly inappropriate tools in contexts where truth and correctness are of utmost importance, and when the user is not already highly knowledgeable and confident in the problem area. This presents a bit of an issue for Slop Generators; if the user is already highly knowledgeable and confident in the problem area, then why ask the Slop Generator in the first place?</p>"},{"location":"sw/agx-driver-notes/","title":"AGX Driver Notes","text":""},{"location":"sw/agx-driver-notes/#general-docs","title":"General docs","text":"<ul> <li>Alyssa's Driver Survival Guide</li> <li>AGX (somewhat outdated)</li> </ul>"},{"location":"sw/agx-driver-notes/#git-links","title":"Git links","text":"<ul> <li>Upstream Mesa (merge requests)</li> <li>Asahi Mesa (<code>mesa-asahi-edge</code> releases cut from here)</li> <li>Lina's WIP kernel branch (UAPI may be out of sync with mesa)</li> </ul>"},{"location":"sw/agx-driver-notes/#uapi-design","title":"UAPI design","text":"<p>The UAPI design is inspired by the upcoming Intel Xe UAPI.</p> <ul> <li>File: An open file descriptor to the DRM device</li> <li>VM: A GPU address space</li> <li>Bind: A mapping from a GEM object into a VM</li> <li>Queue: A logical execution queue on the GPU (backed by several firmware queues)</li> </ul>"},{"location":"sw/agx-driver-notes/#gem-objects-and-vms","title":"GEM objects and VMs","text":"<p>GEM objects can be created private to a given VM. What this means is that the object can never be exported, and can only be bound to that VM. This allows the driver to optimize object locking (not yet implemented, will be necessary once we have a shrinker, but the driver does enforce the private object requirement already).</p> <ul> <li>TODO: Does it make sense to offer an ioctl to convert a private object into a shared one? The driver needs this for some GL flows, right now it ends up re-allocating and copying which isn't ideal...</li> </ul> <p>The VM bind ioctl supports binding/unbinding arbitrary ranges of a GEM object into a VM, though the driver does not yet implement this (it requires the whole object to be bound into free VM space, and objects may only be fully unbound by object name, not VMA range). This will change in the future, the UAPI is already prepared for it.</p>"},{"location":"sw/agx-driver-notes/#queues","title":"Queues","text":"<p>Reader beware: This is tricky!!</p> <p>The UAPI exposes an arbitrary number of user queues. Each user queue has a parent VM. A user queue receives jobs for execution, and each job can be composed of up to 64 GPU commands (to guarantee we don't exceed certain firmware limitations). Jobs are scheduled by the <code>drm_sched</code> scheduler and support arbitrary in/out sync object lists, for explicit sync. The job does not start execution until all the in sync objects are signaled, and the out sync objects are all signaled when all commands in the job have fully completed. Jobs are submitted to the firmware as soon as all in sync objects are signaled: a job boundary does NOT imply a CPU round trip if there are no direct dependencies between them (though the GPU will asynchronously signal completion of each job, since the kernel needs to clean up resources). However, jobs are always submitted in order: unsatisfied in sync objects for a job will block submission of all subsequent jobs to the firmware (this is implied by <code>drm_sched</code> and also a hard requirement of the driver design as it stands today). True arbitrary concurrency/reordering requires using multiple queues.</p> <p>Within a job, commands are directly queued for execution by the firmware without CPU involvement. Each user queue is logically composed of two logical queues: render and compute. Render commands and compute commands are submitted in sequence, but they can execute concurrently within a single user queue.</p> <p>The logical render queue is backed by two firmware queues (vertex and fragment). The kernel always submits firmware commands in pairs to those, with a barrier between them. This barrier is permeable (insert handwavy firmware magic here \u2728) in that partial renders and preemption can interleave partial vertex and fragment executions. Vertex/fragment barriers between individual draw commands, if necessary, are handled at the VDM level (in the GPU command stream), as are certain cache-related barriers.</p> <p>Within a user queue, command dependencies can be optionally added. These are specified as the boundary index (think Python slice indexing) of the command to wait on for each logical queue (compute, render), per command. Indices start at 0 (the point before any commands from this submission) and increment by one for every submitted command of a given type. It is illegal to wait on a command boundary in the future. Waiting on index 0 (the beginning of the job) for a given logical queue means waiting for all commands part of prior jobs of that type to complete, that is, it is equivalent to waiting on the end boundary of the prior submission. Since logical queues always start and complete commands in sequence, waiting on a given index implies waiting on all prior commands for that logical queue.</p> <p>Absent explicit barriers, the vertex half of render commands can run concurrently with the fragment half of prior commands. That is, vertex processing can \"run ahead\" of fragment processing. To prevent this, specify a command barrier of the previous command index. This is a no-op for compute, since there is only a single serialized firmware queue in that case, but has meaning for render commands, and it is recommended for compute commands in case more parallelization becomes available in the future.</p> <p>Consider the following submission:</p> <pre><code>#0  R1 barrier=[__, C0]\n#1  C1 barrier=[__, __]\n#2  C2 barrier=[__, __]\n#3  R2 barrier=[R1, C2]\n#4  R3 barrier=[__, __] # [R1, C2] implied\n#5  R4 barrier=[R3, __] # [R3, C2] implied\n</code></pre> <p>This describes the following dependency graph:</p> <pre><code>[C*]-&gt;[R1]----+----\\\n   [C1]------+|---vv\n   [C2]-----+||-&gt;[R3]-v\n            vvv      [R4]\n            [R2]------^\n</code></pre> <p>Note that there is a C1&lt;-C2 ordering in practice due to queue serialization, but this wasn't explicitly specified with barriers. However, R2 and R3 are ordered after C2 and all prior compute commands, which includes C1, and also ordered after R1. Also note that R2/R3 can run concurrently (which means that vertex processing for R3 can overlap with or precede fragment processing for R2), but R4 will not start its vertex half until R3 is fully complete (which implies that R2 is also complete, due to queue ordering).</p> <p><code>[C*]</code> is the last submitted compute command (from a prior job). Note that specifying a 0 barrier is legal even if no commands have been submitted yet (it is ignored in that case, as it is equivalent to the case where all prior commands have fully completed at the driver and the associated ordering primitives freed). In this case, R1 could start its vertex processing before a previous submission's fragment processing is complete (no render barrier), but would wait for any prior compute commands to be complete (C0 barrier).</p> <p>The firmware queue view of the same job is:</p> <pre><code>Compute  Vertex    Fragment\nRUN C1   WAIT C0   WAIT R1v\nRUN C2   RUN  R1v  RUN  R1f\n         WAIT R1f  WAIT R2v\n         WAIT C2   RUN  R2f\n         RUN R2v   WAIT R3v\n         RUN R3v   RUN  R3f\n         WAIT R3f  WAIT R4v\n         RUN R4v   RUN  R4f\n</code></pre> <p>In other words: for every render command, the explicit barrier waits go in the vertex queue before the vertex half, then the fragment queue always gets an implicit barrier before the fragment half.</p> <p>Blit command support will be added in a future driver. These are effectively fragment-only render commands, and so will have their explicit barriers and execution both within the fragment queue.</p> <p>Right now, the Gallium driver only issues single-command submissions and always uses <code>[C0, R0]</code> barriers to fully serialize everything. This might be improved in the future, but the main use case for all this is Vulkan queues.</p>"},{"location":"sw/agx-driver-notes/#results","title":"Results","text":"<p>Userspace can optionally request feedback from command execution. This is done by specifying a result buffer BO, and then per-command offsets and sizes into that buffer. The kernel will write command result information there, once the command is complete. Currently, this includes basic timing information, tiled vertex buffer statistics and partial render counts (for render commands), and detailed fault information (for faulting commands, very handy when combined with some BO lookup logic in mesa!).</p>"},{"location":"sw/agx-driver-notes/#faq","title":"FAQ","text":"<ul> <li>What's up with the <code>struct drm_asahi_cmd_render</code> mess?   The firmware commands directly specify all these low-level render details and we cannot expose those structures directly to userspace, since it is not safe to do so. There is no other way, and macOS does the same thing... (at least it's less of a mess than PowerVR!)</li> </ul>"},{"location":"sw/agx-driver-notes/#todo","title":"TODO","text":"<p>Upstreaming blockers (affect current draft UAPI):</p> <ul> <li> Figure out the attachment flags and confirm exactly what this does/how it works</li> <li> Sort out the compute preemption kernel stuff and the command fields it uses (or else drop it and leave it for a future rev/feature flag)</li> <li> Figure out one or two remaining unknown buffers and whether they should go in the UAPI (the 02345 thing...)</li> <li> Add the missing abstractions for mmu.rs (memremap stuff)</li> </ul> <p>Other:</p> <ul> <li> Implement <code>DRM_IOCTL_ASAHI_GET_TIME</code></li> <li> Implement RTKit runtime-PM (sleep ASC when GPU is idle, macOS does this on laptops)</li> <li> Reverse engineer and implement blit commands</li> <li> Hook up firmware KTrace to Linux tracing</li> <li> Complete the VM management (arbitrary subrange maps/unmaps)</li> <li> Performance counters</li> <li> M2 Pro/Max support</li> </ul>"},{"location":"sw/audio-userspace/","title":"Userspace Audio Stack","text":""},{"location":"sw/audio-userspace/#speaker-support-in-asahi-linux","title":"Speaker support in Asahi Linux","text":"<p>Currently supported models:</p> <ul> <li>M1 MacBook Air 13\" (J313)</li> <li>MacBook Air (13-inch, M1, 2020)</li> <li>MacBook Air (13-inch, M2, 2022)</li> <li>MacBook Air (15-inch, M2, 2023)</li> <li>MacBook Pro (13-inch, M1/M2, 2020/2022)</li> <li>MacBook Pro (14-inch, M1/M2 Pro/Max, 2021/2023)</li> <li>MacBook Pro (16-inch, M1/M2 Pro/Max, 2021/2023)</li> <li>Mac mini (M1/M2/M2 Pro, 2020/2023)</li> <li>Mac Studio (M1/M2 Max/Ultra, 2022/2023)</li> </ul> <p>Proper speaker support has been a multi-year development effort involving many people across all parts of the Linux audio stack. We want to offer the best speaker support of any Linux laptop platform, and that has meant driving Linux desktop audio forward a couple decades so that we can do what is expected of a modern laptop audio subsystem!</p>"},{"location":"sw/audio-userspace/#current-state","title":"Current state","text":"<p>We are ready to begin releasing preliminary speaker support to users. Keep in mind that as Asahi Linux is the first desktop Linux platform with integrated advanced speaker DSP, there will likely be bugs. In addition, the DSP profiles will be improved and adjusted over time, and do not represent the absolute best possible results.</p> <p>Speaker DSP is currently only supported on Fedora Asahi Remix (things are moving fast), however alternative distros should be able to integrate this work relatively painlessly once things settle down (see the section below).</p>"},{"location":"sw/audio-userspace/#known-bugs","title":"Known bugs","text":"<ul> <li>In KDE Plasma, if you toggle mute using the keyboard hotkey while the master volume is set at anything other than 100%, on unmute the speaker volume will be too low. Touching the volume control (or pressing a volume hotkey) will restore the intended volume.</li> <li>The DSP chain introduces excessive delay, and trailing audio is \"buffered\" (if you stop playing something and start something else, you get a bit of the end of the first when the second starts).</li> <li>There is no final limiter/compressor in the current DSP chains (although there is an input compressor), so inputs with content in high-gain regions of the EQ curve might cause distortion or clipping (and speakersafetyd limiting). This is most prominent in the 200Hz region right now. This should not cause damage, but we recommed lowering the volume if you notice the sound is noticeably distorted.</li> <li>The 13\" MacBook Air EQ curve might be a bit harsh on the treble; pending re-calibration with an individually calibrated microphone to confirm/fix.</li> <li>Bankstown (the \"fake bass\" plugin) uses a relatively na\u00efve algorithm right now, which doesn't work well for all music.</li> </ul>"},{"location":"sw/audio-userspace/#project-goals","title":"Project goals","text":"<p>Our DSP profiles aim to provide a balanced sound, with the features that people expect from high-quality laptop/small-speaker audio. In particular, we aim for:</p> <ul> <li>A balanced (neutral) tone at moderate listening volumes, with a mostly flat frequency response from a typical listening position</li> <li>Reasonably high peak volume with acceptable sound degradation (compression, limiting, etc.)</li> <li>\"Fake bass\" processing to make audible frequencies that cannot be physically reproduced by the speakers, extending the perceived frequency response of the system. </li> <li>Equal-loudness volume compensation, so that the sound does not become noticeably tinny as the system master volume is lowered.</li> </ul> <p>These are all techniques that are in wide use in consumer microspeaker systems in tablets and phones, though sadly not common on laptops from most non-Apple brands. All of these processing tricks are also used by macOS.</p> <p>Our goal is explicitly not to clone the full/exact macOS audio experience. We consider the macOS speaker DSP processing to be too tryhard; some of the things it does work well, some do not (or are outright buggy!), and some are just strange. Although audio is ultimately subjective, and we recognize that some people might prefer the \"macOS sound\", we aim for a more objectively neutral and balanced sound than macOS as a baseline. Users are encouraged to try adding their own effects (e.g. with EasyEffects) if they want to customize their experience and achieve certain sonic profiles. We believe that a balanced baseline that allows users to shape the sound to their own preference if they so desire is a better option than hard-coding specific effects (such as macOS' spatial audio processing) with no option to turn them off. There is no user-friendly (GUI) way to modify or tweak our DSP chains, so it's best if additional effects are left to existing utilities like EasyEffects that can be easily customized by the user.</p> <p>That said, for the types of processing we do intend to apply, failing to work properly where macOS does (e.g. objectively bad audio quality for certain kinds of inputs in particular, such as bad-sounding compression or distortion at high volumes where macOS sounds better at an equal output volume) is considered a bug. Feel free to file issues if you find test cases where macOS does a clearly better job. We're particularly talking about program-dependent problems here, not \"I like the macOS EQ/spatial/whatever stuff better in general\".</p>"},{"location":"sw/audio-userspace/#smart-amp-safety-support","title":"\"Smart Amp\" / safety support","text":"<p>In addition to the DSP processing, we also have the world's first (as far as we know) open source \"smart amp\" implementation. This allows the speakers to be driven to much higher peak levels than the worst-case safe volume level, greatly extending their dynamic range. Our implementation, speakersafetyd, monitors feedback signals from the amplifiers, estimates speaker voice coil temperature using a two-stage thermal model, and reduces the hardware speaker volumes when the speakers get too warm. We also have kernel-side interlocks to disable or limit speaker volumes if speakersafetyd is not running or non-responsive.</p> <p>Right now, we are shipping with a hard volume reduction limit of -7dBFS to catch potential bugs or misbehavior. If you notice that your speakers cut off for approximately one second and then come back at a reduced volume level, it is likely that you triggered this safety limit. Stop playback to let the speakers cool down (just in case) and let the limit re-arm, and then check <code>/var/lib/speakersafetyd/blackbox</code> for any blackbox dumps and file a bug attaching them together with any speakersafetyd logs (try <code>journalctl -S '10m ago' -u speakersafetyd</code>). If you play full-scale test tones or \"extreme\" music at maximum volume, it is expected that you will hit this limit and trigger a blackbox dump / panic. This is intended to help catch any badness while playing normal music, and we will remove this conservative limit once we are confident in the software stack (speakersafetyd has other safety limits built in and will gain more over time).</p> <p>You can watch speakersafetyd in action by using <code>sudo journalctl -fu speakersafetyd</code>. As a rule of thumb, with the speaker volume at max, you should expect speakersafetyd not to kick in when playing loudness-normalized music (e.g. YouTube). Playing overly loud music without normalization (e.g. increasing the browser app volume to 100% in the Plasma applet while using YouTube, which bypasses the normalization limit it applies, or using media players without normalization) is likely to trigger some gain reduction from speakersafetyd, but it should not hit the -7 dB panic limit unless it's something ridiculous.</p> <p>WARNING: Speaker safety models have yet to be fully validated on all models. We are enabling audio only on models where we are confident things are ready and safe to use. If you use any undocumented overrides to force-enable speakers on any other machine models, you are entirely on your own and may very well blow up your speakers.</p>"},{"location":"sw/audio-userspace/#distro-integration-notes","title":"Distro integration notes","text":"<p>Requirements according to asahi-audio's README.md.</p> <p>The correct deployment order is asahi-audio/speakersafetyd &gt; (whatever you use to get those installed for users, e.g. metapackage) &gt; kernel. If you push the kernel first before asahi-audio, users will get either a nonfunctional (if no speakersafetyd) or functional but bad-sounding (if speakersafetyd is installed) raw speaker device with no DSP.</p>"},{"location":"sw/audio-userspace/#microphone-support","title":"Microphone support","text":"<p>Currently supported models:</p> <ul> <li>MacBook Pro 13\" (M1/M2)</li> <li>MacBook Air 13\" (M1/M2)</li> <li>MacBook Pro 14\" (M1 Pro/Max, M2 Pro/Max)</li> <li>MacBook Pro 16\" (M1 Pro/Max, M2 Pro/Max)</li> <li>MacBook Air 15\" (M2)</li> </ul> <p>MacBooks have three Pulse Density Modulation (PDM) mics wired up to an ADC and decimator in the AOP. All three mics are plumbed directly to userspace on separate channels, with no preamplification.</p> <p>They are very sensitive and omnidirectional, so to be able to use them, some kind of beamforming needs to be applied.</p> <p>For this, Triforce was built, implementing a Minimum Variance Distortionless Response adaptive beamformer.</p> <p><code>asahi-audio</code> includes the necessary wireplumber config to set this up.</p>"},{"location":"sw/audio-userspace/#known-bugs_1","title":"Known Bugs","text":""},{"location":"sw/audio-userspace/#requires-os-fw-version-135","title":"Requires <code>os-fw-version</code> &gt; 13.5","text":"<p>Microphone support currently only works if your <code>asahi,os-fw-version</code> is &gt;= 13.5. This is due to <code>BOOTARGS_OFFSET</code> and <code>BOOTARGS_SIZE</code> being different on <code>12.4</code>.</p> <p>If your <code>/proc/device-tree/chosen/asahi,os-fw-version</code> shows an older version, and you see a</p> <pre><code>apple_aop 24ac00000.aop: probe with driver apple_aop failed with error -22\n</code></pre> <p>in dmesg, an update of the APFS container is needed (or adding support for the older version to the kernel driver).</p>"},{"location":"sw/audio-userspace/#macbook-pro-14-m2-j414-probing-issues","title":"Macbook Pro 14\" M2 (J414) probing issues","text":"<p>There's been reports about the Macbook Pro 14\" M2, where the AOP does not probe properly and microphone support doesn't work.</p>"},{"location":"sw/audio-userspace/#microphone-indicator-on-constantly","title":"Microphone indicator on constantly","text":"<p>With microphone support set up, <code>gnome-shell</code> and <code>plasma</code> permanently report the microphone being used.</p> <p>This is due to wireplumber reporting it has a handle open on a \"microphone device\".</p> <p>Fixing this probably requires rearchitecturing a lot of concepts like nodes and handles in Pipewire / Wireplumber.</p>"},{"location":"sw/broken-software/","title":"Broken Software","text":"<p>This page lists software that is known not to work correctly on Apple Silicon machines. We publish it in the hope that it incentivizes inclined members of the community to contribute fixes for the affected packages upstream, bettering the AArch64 software ecosystem for everyone.</p>"},{"location":"sw/broken-software/#if-package-supports-aarch64-why-doesnt-it-work","title":"If ${PACKAGE} supports AArch64, why doesn't it work?","text":"<p>This is almost always due to incorrect/incomplete support for 16K pages. Packages are sometimes built assuming a 4K page size, or are otherwise incompatible with large pages. This has not been a serious issue for desktop Linux software, as x86/amd64 supports only 4K pages and PowerPC supports only 4K or 64K pages. AArch64 is unique in that an AArch64 machine can use 4K, 16K or 64K pages.</p>"},{"location":"sw/broken-software/#why-not-just-use-4k-pages-then","title":"Why not just use 4K pages then?","text":"<p>While these machines can boot 4K kernels, doing so requires some very hacky patches, as the IOMMUs only support 16K-aligned pages. Not only does this cause severe performance penalties, but it does not address the actual problem which is userspace software with incomplete support for AArch64. XNU (macOS) gets around this by supporting independent page sizes in userspace, however we have no such mechanism in Linux and likely never will.</p>"},{"location":"sw/broken-software/#why-not-just-host-a-fixed-version-of-package-yourself","title":"Why not just host a fixed version of ${PACKAGE} yourself?","text":"<p>Desktop-class AArch64 machines are only going to become more common in the next few years. By having an upstream-first policy we can make sure these fixes are propagated to everyone via distro repositories, improving the AArch64 ecosystem for everyone! See Fixed packages for a list of software that has been fixed for everyone as a result of this. You wouldn't want us to keep Emacs all to ourselves now, would you?</p>"},{"location":"sw/broken-software/#why-does-not-work-sometimes-mean-instantly-segfault","title":"Why does \"not work\" sometimes mean \"instantly segfault\"?","text":"<p>If an ELF executable or library has sections which are not aligned to 16K pages, the loader will be unable to map the binary into memory and will signal this failure by causing a segmentation fault before the program even technically starts execution.</p> <p>You can confirm that this is the case using <code>readelf -l /path/to/binary</code>. All program header sections of type <code>LOAD</code> must have an <code>ALIGN</code> value of at least <code>0x4000</code> to successfully load on a 16K machine like Apple Silicon. The library illustrated here is only aligned for 4K pages (<code>0x1000</code>) so it cannot load.</p> <pre><code>$ readelf -l lib64/ld-android.so\n\nElf file type is DYN (Shared object file)\nEntry point 0x0\nThere are 9 program headers, starting at offset 64\n\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040\n                 0x00000000000001f8 0x00000000000001f8  R      0x8\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000874 0x0000000000000874  R      0x1000\n  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000\n                 0x0000000000000004 0x0000000000000004  R E    0x1000\n  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000\n                 0x00000000000000a0 0x00000000000000a0  RW     0x1000\n  DYNAMIC        0x0000000000002000 0x0000000000002000 0x0000000000002000\n                 0x00000000000000a0 0x00000000000000a0  RW     0x8\n  GNU_RELRO      0x0000000000002000 0x0000000000002000 0x0000000000002000\n                 0x00000000000000a0 0x0000000000001000  R      0x1\n  GNU_EH_FRAME   0x000000000000082c 0x000000000000082c 0x000000000000082c\n                 0x0000000000000014 0x0000000000000014  R      0x4\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     0x0\n  NOTE           0x0000000000000238 0x0000000000000238 0x0000000000000238\n                 0x0000000000000020 0x0000000000000020  R      0x4\n\n Section to Segment mapping:\n  Segment Sections...\n   00     \n   01     .note.gnu.build-id .dynsym .gnu.hash .dynstr .eh_frame_hdr .eh_frame \n   02     .text \n   03     .dynamic \n   04     .dynamic \n   05     .dynamic \n   06     .eh_frame_hdr \n   07     \n   08     .note.gnu.build-id \n</code></pre> <p>Though the default for AArch64 compilers is to produce ELF files with sections aligned to 64K for compatibility with all AArch64 machines, tooling bugs (such as binaries manipulated by old versions of <code>patchelf</code>) or customized compiler flags (such as many Google programs, including older versions of Chrome (and Electron) and most current Android programs) may result in a binary whose sections are only aligned to 4K.</p>"},{"location":"sw/broken-software/#are-there-any-available-workarounds","title":"Are there any available workarounds?","text":"<p>Fedora Linux Asahi Remix's <code>muvm</code> package is, by default, configured to virtualize a 4K kernel (along with setting FEX as the x86_64 binfmt handler so x86_64 programs may be run). You may have varying levels of success by attempting to run your software in <code>muvm</code>.</p>"},{"location":"sw/broken-software/#broken-packages","title":"Broken packages","text":"Package Upstream report Notes hardened_malloc https://github.com/GrapheneOS/hardened_malloc/issues/183 There are more changes necessary to hardened_malloc before 16k page support is done. It is also not a high priority at the moment as we need MTE jemalloc https://github.com/jemalloc/jemalloc/issues/467 Upstream unwilling to fix, Needs build options if compiled on a 4k page size system. Addressed in ArchLinuxARM. notion-app(-enhancer) https://github.com/notion-enhancer/notion-repackaged/issues/107 electron + broken build flags Waydroid https://github.com/waydroid/waydroid/issues/373 Upstream AOSP is working on 16k page support: https://developer.android.com/guide/practices/page-sizes trezord https://github.com/trezor/trezord-go/issues/306 Crashes if daemon is started before wallet is plugged in; workaround is to plug in the wallet and then restart daemon. <p>* Running x86-64 software is supported via a 4k page size microVM running FEX.</p>"},{"location":"sw/broken-software/#fixed-packages","title":"Fixed packages","text":"Package Fixing commit Notes 1Password proprietary Fixed as of 8.8.0-119 beta. Android Cuttlefish https://android-review.googlesource.com/c/device/google/cuttlefish/+/2545951 Fixed in AOSP main branch by switching to musl. box64 https://github.com/ptitSeb/box64/issues/384 Fixed since 0.2.8 btrfs https://lore.kernel.org/lkml/cover.1653327652.git.dsterba@suse.com/ Fixed since Linux 5.19 (caveats) Chromium https://bugs.chromium.org/p/chromium/issues/detail?id=1301788 Includes Electron apps.Fixed since 102. Emacs https://lists.gnu.org/archive/html/bug-gnu-emacs/2021-03/msg01260.html Fixed since 28.0 f2fs https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d7e9a9037de27b642d5a3edef7c69e2a2b460287 Fixed since Linux 6.7 fd https://github.com/sharkdp/fd/issues/1085 Fixed since 10.1 k3s-io https://github.com/k3s-io/k3s/issues/7335 Fixed since 1.27.2 KiCad https://gitlab.com/kicad/code/kicad/-/issues/16008 Fixed since 7.0.10 libglvnd https://gitlab.freedesktop.org/glvnd/libglvnd/-/merge_requests/262 Fixed since 1.5.0 libunwind https://github.com/libunwind/libunwind/pull/330 Fixed since 1.7.0 libunwind https://github.com/libunwind/libunwind/issues/260 Fixed since 1.8.0 libvirt/QEMU/KVM https://patchew.org/QEMU/20230727073134.134102-1-akihiko.odaki@daynix.com/ Fixed since QEMU 7.2.6 / 8.0.5 / 8.1.1 lvm2 https://bugzilla.redhat.com/show_bug.cgi?id=2059734 Fixed since 2.03.21 MEGAsync https://github.com/meganz/MEGAsync/issues/303 https://github.com/meganz/MEGAsync/issues/310 Fixed since 5.12.0 pdfium https://bugs.chromium.org/p/pdfium/issues/detail?id=1853 Fixed and shipped with Chromium 108 qt5-webengine https://bugreports.qt.io/browse/QTBUG-105145 chromium 87, likely won\u2019t be fixed upstream. Fixed in downstream ArchLinuxARM qt6-webengine https://bugreports.qt.io/browse/QTBUG-105145 chromium 94 for 6.3, partially fixed upstream in 6.4 for webview but not for QtPdf. Fixed in downstream ArchLinuxARM Redis https://bugzilla.redhat.com/show_bug.cgi?id=2240293 https://bodhi.fedoraproject.org/updates/FEDORA-2023-bdb1515542 Fixed in fedora since redis-7.0.13-2.fc38 and redis-7.2.1-2.fc39) rr https://github.com/rr-debugger/rr/pull/3146 Fixed since 5.6.0 Rust https://github.com/archlinuxarm/PKGBUILDs/commit/19a1393 Fixed for <code>rust-1.62.1-1.1</code> in ALARM/extra Telegram Desktop https://github.com/telegramdesktop/tdesktop/issues/26103 Fixed since 4.1.1 Visual Studio Code https://aur.archlinux.org/packages/visual-studio-code-bin Fixed since 1.71.0 (uses Electron 19) WebKitGTK https://github.com/WebKit/WebKit/commit/0a4a03da45f774 Fixed since 2.34.6 Wine https://bugs.winehq.org/show_bug.cgi?id=52715 Fixed since 10.5 Zig https://github.com/ziglang/zig/issues/11308 Fixed since 0.14.0"},{"location":"sw/broken-software/#bugs","title":"Bugs","text":"<p>Issues (other than page size and architectural support issues) in third-party software, reported and/or tracked by Asahi core team members:</p>"},{"location":"sw/broken-software/#open-bugs","title":"Open Bugs","text":"Package Issue Notes firefox wayland: The first frame on startup is sometimes uninitialized for a moment (also maybe on x11) gnome-bluetooth/bluez Frequent audio stutters and deconnections of audio A2DP output (no issues using blueman) No bugs filled yet kwin Root background damage regions are calculated incorrectly with multiscreen plasmashell startplasma breaks variable merging between profile.d and environment.d systemsettings default system keyboard model is not correctly set on Wayland wireplumber Cannot pass args to PW modules from lua wlroots Add support for DRM Color Transformation Matrix (Useful for e.g. redshift) Related PR wlroots cannot open render as master when using seatd xkeyboard-config Handling Mac Fn keys in xkeyboard"},{"location":"sw/broken-software/#closed-bugs","title":"Closed Bugs","text":"Package Issue Notes abrt ABRT can't submit crash report: processing failed Issue Closed blender blender core dumps at execution instead of giving sane feedback about unsupported hardware Issue Closed chromium Skia shader compilation error Fixed in Chromium 121.0.6167.85 chromium cppgc crashes on Linux w/ 16KiB pages because of hardcoded kGuardPageSize Fixed in Chromium 133.0.6943.141 dracut Memoize find_kmod_module_from_sysfs_node Fixed in dracut 103 firefox YouTube is capping resolutions to 1080 on Linux aarch64 user agents Fixed in Firefox 123 gcc LTO miscompilation of ceph on aarch64 and x86_64 Fixed in gcc 13.3 / 14.1 glibc TLS modid reuse breaks TLS accesses Fixed in glibc 2.39 gtk GSK issues illegal render ops with load=dont-care and blend=over with Wayland fractional scaling, causing graphical corruption Fixed in gtk 4.17.6 gtk GSK/vulkan uses mipmaps without checking the formats/tiling <code>VkImageFormatProperties.maxMipLevels</code> Fixed in gtk 4.17.5 hyprland issue with OpenGL applications crashing when using Hyprland 0.42.0 Fixed in hyprland 0.43.0 hyprland Explicit sync doesn't work on split-node gpu drivers Fixed in hyprland 0.51.0 kpipewire Spectacle fails to record a window with h264 in specific dimensions Issue Closed kpipewire OpenH264 codec support Fixed in Plasma 6.1.4 kwin Outputs freeze on multi-screen when hardware cursors are not supported Fixed in Plasma 6.0 kwin Software cursor repaints are glitchy with fractional scaling sometimes Fixed in Plasma 6.0 lsp-common-lib Fix atomic operations for AArch64 Fixed in lsp-common-lib 1.0.40 lib-dsp-lib Fix aarch64 msmatrix code Fixed in lsp-dsp-lib 1.0.20 plasmashell startplasma breaks variable merging between profile.d and environment.d qqc2-desktop-style Some text glyphs in QML software are vertically mis-aligned or squished when using a fractional scale factor Fixed in KDE Frameworks 6.9.0 wireplumber Wireplumber ignores default playback volume Fixed in wireplumber 0.5.3"},{"location":"sw/deleting-an-install/","title":"Deleting an installation","text":""},{"location":"sw/deleting-an-install/#this-is-for-default-vanilla-asahi-installs-these-steps-do-not-apply-for-custom-partitioning-setups","title":"This is for default vanilla Asahi installs. These steps do not apply for custom partitioning setups.","text":""},{"location":"sw/deleting-an-install/#do-not-use-diskutil-gui","title":"Do not use Diskutil GUI","text":"<ol> <li>Find the 3 partitions that Asahi installer creates. Run the installer script and exit after you get to the disk information.  </li> </ol> <pre><code>curl https://alx.sh | sh\n</code></pre> <p>Example disk information:</p> <pre><code>Partitions in system disk (disk0):\n  1: APFS [Macintosh HD] (380.00 GB, 6 volumes)\n    OS: [B ] [Macintosh HD] macOS v12.3 [disk3s1, D44D4ED9-B162-4542-BF50-9470C7AFDA43]\n  2: APFS [Asahi Linux] (2.50 GB, 4 volumes)\n    OS: [ *] [Asahi Linux] incomplete install (macOS 12.3 stub) [disk4s2, 53F853CF-4851-4E82-933C-2AAEB247B372]\n  3: EFI (500.17 MB)\n  4: Linux Filesystem (54.19 GB)\n  5: (free space: 57.19 GB)\n  6: APFS (System Recovery) (5.37 GB, 2 volumes)\n    OS: [  ] recoveryOS v12.3 [Primary recoveryOS]\n\n  [B ] = Booted OS, [R ] = Booted recovery, [? ] = Unknown\n  [ *] = Default boot volume\n</code></pre> <p>The partitions that Asahi installs are <code>Asahi Linux</code>, <code>EFI</code>, and <code>Linux Filesystem</code>. Note down the <code>disk#s#</code> beside Asahi Linux line.  </p> <ol> <li>Delete the \"Asahi APFS container\"</li> </ol> <pre><code>diskutil apfs deleteContainer disk&lt;num-here&gt;\n</code></pre> <ol> <li>Find the partition numbers of EFI and Linux Filesystem partitions.  </li> </ol> <pre><code>diskutil list\n</code></pre> <p>Example output:</p> <pre><code>/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *500.3 GB   disk0\n   1:             Apple_APFS_ISC Container disk1         524.3 MB   disk0s1\n   2:                 Apple_APFS Container disk4         362.6 GB   disk0s2\n                    (free space)                         2.5 GB     -\n   3:                        EFI EFI - FEDOR             524.3 MB   disk0s4\n   4:           Linux Filesystem                         1.1 GB     disk0s5\n   5:           Linux Filesystem                         127.7 GB   disk0s6\n   6:        Apple_APFS_Recovery Container disk3         5.4 GB     disk0s7\n\n/dev/disk4 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +362.6 GB   disk4\n                                 Physical Store disk0s2\n   1:                APFS Volume Macintosh HD            11.2 GB    disk4s1\n   2:              APFS Snapshot com.apple.os.update-... 11.2 GB    disk4s1s1\n   3:                APFS Volume Preboot                 6.9 GB     disk4s2\n   4:                APFS Volume Recovery                1.0 GB     disk4s3\n   5:                APFS Volume Data                    287.6 GB   disk4s5\n   6:                APFS Volume VM                      20.5 KB    disk4s6\n</code></pre> <ol> <li>Delete the EFI and Linux Filesystem partitions</li> </ol> <pre><code>diskutil eraseVolume free free disk&lt;num-here&gt;s&lt;num-here&gt;\ndiskutil eraseVolume free free disk&lt;num-here&gt;s&lt;-other-num-here&gt;\n</code></pre>"},{"location":"sw/deleting-an-install/#resize-macos-to-fill-disk-again","title":"Resize MacOS to fill disk again","text":"<ol> <li>Get the logical Disk number corresponding to MacOS installation</li> </ol> <pre><code>diskutil list\n</code></pre> <p>Example output:</p> <pre><code>/dev/disk0 (internal, physical):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                        *500.3 GB   disk0\n   1:             Apple_APFS_ISC Container disk1         524.3 MB   disk0s1\n   2:                 Apple_APFS Container disk4         362.6 GB   disk0s2\n                    (free space)                         2.5 GB     -\n   3:                        EFI EFI - FEDOR             524.3 MB   disk0s4\n   4:           Linux Filesystem                         1.1 GB     disk0s5\n   5:           Linux Filesystem                         127.7 GB   disk0s6\n   6:        Apple_APFS_Recovery Container disk3         5.4 GB     disk0s7\n\n/dev/disk4 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +362.6 GB   disk4\n                                 Physical Store disk0s2\n   1:                APFS Volume Macintosh HD            11.2 GB    disk4s1\n   2:              APFS Snapshot com.apple.os.update-... 11.2 GB    disk4s1s1\n   3:                APFS Volume Preboot                 6.9 GB     disk4s2\n   4:                APFS Volume Recovery                1.0 GB     disk4s3\n   5:                APFS Volume Data                    287.6 GB   disk4s5\n   6:                APFS Volume VM                      20.5 KB    disk4s6\n</code></pre> <p>In the above example the <code>/dev/disk# (synthesized)</code> line which has Macintosh HD listed under it is the disk to note down. In this example you would expand logical disk4</p> <ol> <li>Resize - expand logical volume to fill the free space.</li> </ol> <pre><code>diskutil apfs resizeContainer disk&lt;num-here&gt; 0\n</code></pre>"},{"location":"sw/deleting-an-install/#errors-need-more-background-information","title":"Errors? Need More Background Information?","text":"<p>Partitioning cheatsheet</p>"},{"location":"sw/devicetree-bindings/","title":"Devicetree Bindings","text":""},{"location":"sw/devicetree-bindings/#pmgr","title":"PMGR","text":"<ul> <li>'apple,t6000-pmgr'</li> <li>'apple,t8103-pmgr'</li> <li>'apple,pmgr'</li> </ul> <p>Proposal submitted by marcan</p>"},{"location":"sw/devicetree-bindings/#pmgr-nodes","title":"PMGR nodes","text":"<ul> <li>'apple,t6000-pmgr-pwrstate'</li> <li>'apple,t8103-pmgr-pwrstate'</li> <li>'apple,pmgr-pwrstate'</li> </ul> <p>Proposal submitted by marcan</p>"},{"location":"sw/devicetree-bindings/#spmi","title":"SPMI","text":"<ul> <li>'apple,t8103-spmi'</li> <li>'apple,spmi'</li> </ul> <p>Used by OpenBSD; not submitted upstream yet</p>"},{"location":"sw/devicetree-bindings/#spmi-pmu","title":"SPMI PMU","text":"<ul> <li>'apple,sera-pmu'</li> </ul> <p>Used by OpenBSD; not submitted upstream yet</p>"},{"location":"sw/devicetree-bindings/#spi","title":"SPI","text":"<ul> <li>'apple,t6000-spi'</li> <li>'apple,t8103-spi'</li> <li>'apple,spi'</li> </ul> <p>Used by OpenBSD; not submitted upstream yet</p>"},{"location":"sw/devicetree-bindings/#spi-keyboardtouchpad","title":"SPI keyboard/touchpad","text":"<ul> <li>'apple,spi-hid-transport'</li> </ul> <p>Not sumitted upstream yet</p>"},{"location":"sw/devicetree-bindings/#smc","title":"SMC","text":"<ul> <li>'apple,t8103-smc'</li> <li>'apple,smc'</li> </ul> <p>Soon to be used by OpenBSD; not submitted upstream yet</p>"},{"location":"sw/devicetree-bindings/#nvme","title":"NVME","text":"<ul> <li>'apple,t6000-nvme-ans2'</li> <li>'apple,t8103-nvme-ans2'</li> <li>'apple,nvme-ans2'</li> </ul> <p>Not submitted upstream yet</p>"},{"location":"sw/getting-started/","title":"Getting Started","text":"<p>Obsolete, you want Developer Quickstart</p>"},{"location":"sw/kernel-config/","title":"Apple Silicon Kernel Config Options","text":"<p>Your kernel configuration will need to include the Asahi-specific drivers.  As of linux-asahi-6.12.4-1, this list is:</p> <pre><code>CONFIG_ARCH_APPLE=y\nCONFIG_ARM64_MEMORY_MODEL_CONTROL=y\nCONFIG_APPLE_AIC=y\nCONFIG_APPLE_WATCHDOG=y\nCONFIG_APPLE_DART=y\nCONFIG_APPLE_SART=y\nCONFIG_APPLE_PLATFORMS=y\nCONFIG_APPLE_MAILBOX=y\nCONFIG_APPLE_RTKIT=y\nCONFIG_APPLE_RTKIT_HELPER=y\nCONFIG_APPLE_SMC=y\nCONFIG_APPLE_SMC_RTKIT=y\nCONFIG_APPLE_PMGR_PWRSTATE=y\nCONFIG_APPLE_PMGR_MISC=y\nCONFIG_I2C_APPLE=y\nCONFIG_NVME_APPLE=y\nCONFIG_PCIE_APPLE=y\nCONFIG_PINCTRL_APPLE_GPIO=y\nCONFIG_PWM_APPLE=y\nCONFIG_SPI_APPLE=y\nCONFIG_SPMI_APPLE=y\nCONFIG_GPIO_MACSMC=y\nCONFIG_SENSORS_MACSMC=m\nCONFIG_ARM_APPLE_SOC_CPUFREQ=y\nCONFIG_APPLE_ADMAC=y\nCONFIG_APPLE_M1_CPU_PMU=y\nCONFIG_COMMON_CLK_APPLE_NCO=y\nCONFIG_ARM_APPLE_CPUIDLE=y\nCONFIG_TOUCHSCREEN_APPLE_Z2=m\nCONFIG_INPUT_MACSMC_HID=y\nCONFIG_POWER_RESET_MACSMC=y\nCONFIG_CHARGER_MACSMC=y\nCONFIG_MFD_APPLE_SPMI_PMU=y\nCONFIG_VIDEO_APPLE_ISP=m\nCONFIG_DRM_ASAHI=y\nCONFIG_DRM_ADP=m\nCONFIG_DRM_APPLE=m\nCONFIG_DRM_APPLE_AUDIO=y\nCONFIG_APPLE_SIO=m\nCONFIG_APPLE_SEP=y\nCONFIG_APPLE_AOP=y\nCONFIG_SND_SOC_APPLE_AOP_AUDIO=m\nCONFIG_SND_SOC_APPLE_MACAUDIO=m\nCONFIG_SND_SOC_APPLE_MCA=m\nCONFIG_SND_SOC_CS42L84=m\nCONFIG_SPI_HID_APPLE_OF=y\nCONFIG_HID_DOCKCHANNEL=m\nCONFIG_BT_HCIBCM4377=m\nCONFIG_RTC_DRV_MACSMC=y\nCONFIG_APPLE_DOCKCHANNEL=y\nCONFIG_PHY_APPLE_ATC=m\nCONFIG_PHY_APPLE_DPTX=m\nCONFIG_NVMEM_SPMI_MFD=y\nCONFIG_MUX_APPLE_DPXBAR=m\nCONFIG_NVMEM_APPLE_EFUSES=y\nCONFIG_IIO_AOP_SENSOR_LAS=m\nCONFIG_IIO_AOP_SENSOR_ALS=m\n</code></pre> <p>(Distros intending to support other platforms with their 16k arm64 kernel besides Apple Silicon will be inclined to build as many of these drivers as modules as they can.  This is fine, though from a reliability standpoint building NVME_APPLE and SPI_HID_APPLE_OF in-kernel has worked much better for me.)</p> <p>(Also note that the configuration options above do not match the standard dracut configuration provided by asahi-scripts.) It looks like a recent change to asahi-scripts makes your choices of modules much less important: https://github.com/AsahiLinux/asahi-scripts/commit/4acd310cd8c394f9ec2e7e7506d89b7bb3c3ca39</p> <p>You should also double-check that you have the following configuration options set:</p> <pre><code>CONFIG_RUST=y\n# CONFIG_GCC_PLUGINS is not set\nCONFIG_ARM64_16K_PAGES=y\n# CONFIG_RUST_DEBUG_ASSERTIONS is not set\nCONFIG_RUST_OVERFLOW_CHECKS=y\n# CONFIG_RUST_BUILD_ASSERT_ALLOW is not set\nCONFIG_UCLAMP_TASK=y\nCONFIG_UCLAMP_TASK_GROUP=y\nCONFIG_SUSPEND=y\n# CONFIG_HIBERNATION is not set\nCONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL=y\nCONFIG_ENERGY_MODEL=y\nCONFIG_SERIAL_SAMSUNG=y\nCONFIG_SERIAL_SAMSUNG_CONSOLE=y\nCONFIG_REGULATOR_FIXED_VOLTAGE=y\nCONFIG_WATCHDOG_HANDLE_BOOT_ENABLED=y\n# CONFIG_DRM_ASAHI_DEBUG_ALLOCATOR is not set\nCONFIG_DRM_FBDEV_EMULATION=y\nCONFIG_DRM_SCHED=y\n# CONFIG_DRM_VGEM is not set\nCONFIG_DRM_GEM_SHMEM_HELPER=y\nCONFIG_SND_SOC_CS42L83=m\nCONFIG_SND_SOC_TAS2764=m\nCONFIG_SND_SOC_TAS2770=m\nCONFIG_HID_BATTERY_STRENGTH=y\nCONFIG_HID_APPLE=m\nCONFIG_HID_MAGICMOUSE=m\nCONFIG_MOUSE_APPLETOUCH=m\nCONFIG_INPUT_LEDS=y\nCONFIG_LEDS_PWM=y\nCONFIG_USB_XHCI_HCD=m\nCONFIG_USB_XHCI_PCI_RENESAS=y\nCONFIG_USB_XHCI_PCI_ASMEDIA=y\nCONFIG_USB_DWC3=m\nCONFIG_USB_DWC3_DUAL_ROLE=y\nCONFIG_TYPEC_TPS6598X=m\nCONFIG_MMC_SDHCI=m\nCONFIG_MMC_SDHCI_PCI=m\nCONFIG_MMC_CQHCI=m\nCONFIG_NET_VENDOR_AQUANTIA=y\nCONFIG_AQTION=m\nCONFIG_NET_VENDOR_BROADCOM=y\nCONFIG_TIGON3=m\nCONFIG_BT=m\nCONFIG_BT_BREDR=y\nCONFIG_BT_RFCOMM=m\nCONFIG_BT_BNEP=m\nCONFIG_BT_HIDP=m\nCONFIG_BT_LE=y\nCONFIG_BT_HCIUART_BCM=y\nCONFIG_CFG80211=m\nCONFIG_WLAN_VENDOR_BROADCOM=y\nCONFIG_BRCMFMAC=m\nCONFIG_BRCMFMAC_PROTO_BCDC=y\nCONFIG_BRCMFMAC_PROTO_MSGBUF=y\nCONFIG_BRCMFMAC_USB=y\nCONFIG_BRCMFMAC_PCIE=y\nCONFIG_APPLE_MFI_FASTCHARGE=m\n\n</code></pre> <p>Warning: if this is your first time modifying a kernel configuration, please do take the advice at the top of the file about not hand-editing the file seriously.  Do NOT just copy the fragments in this page into your config and try to build the kernel; this is likely to result in an inconsistent config and a failed build.   Instead, use the <code>make menuconfig</code> or <code>make xconfig</code> system to modify your kernel configuration.</p>"},{"location":"sw/linux-bringup-nvme/","title":"Linux bringup nvme","text":""},{"location":"sw/linux-bringup-nvme/#title-linux-bringup-nvme","title":"title: Linux Bringup: NVME","text":""},{"location":"sw/linux-bringup-nvme/#usb-drive-boot","title":"USB drive boot","text":""},{"location":"sw/linux-bringup-nvme/#the-easy-way","title":"The easy way","text":"<ul> <li>As per Glanzmann's notes fetch a debian bullseye rootfs under MacOS and dd it directly into a newly created nvme partition. </li> </ul>"},{"location":"sw/linux-bringup-nvme/#the-harder-way","title":"The harder way","text":"<ul> <li>This is done on another Linux machine - uses debian bullseye</li> </ul>"},{"location":"sw/linux-bringup-nvme/#build-your-rootfs","title":"Build your rootfs","text":"<ul> <li>build your own</li> </ul> <pre><code>mkdir debinst\nsudo debootstrap --arch arm64 --foreign bullseye debinst http://ftp.au.debian.org/debian/\nsudo cp /usr/bin/qemu-aarch64-static debinst/usr/bin\n</code></pre> <pre><code>* Login via a chroot to a bash prompt:`sudo LANG=C.UTF-8 chroot debinst qemu-aarch64-static /bin/bash`\n* Then complete the 2nd stage `/debootstrap/debootstrap --second-stage`\n* While your there install any other packages you want: `apt install file screenfetch procps`\n* For ssh install an ssh server `apt install openssh-server`\n* Allow root login via ssh by setting `PermitRootLogin yes` via `vi /etc/ssh/sshd_config`\n* Most important set the root password `passwd`\n</code></pre>"},{"location":"sw/linux-bringup-nvme/#install-rootfs-onto-usb-drive","title":"Install rootfs onto USB drive","text":"<pre><code>* Plug in your USB drive and create a partition with fdisk (assumes drive is /dev/sdb) `sudo fdisk /dev/sdb`\n* Format partition (assumes it's the first one) `sudo mkfs.ext4 /dev/sdb1`\n* Mount the drive some where like /mnt/img `sudo mount /dev/sdb1 /mnt/img`\n* Install the rootfs you created above onto the drive `sudo cp -a debinst/. /mnt/img`\n* Unmount the drive `sudo umount /mnt/img`\n</code></pre>"},{"location":"sw/linux-bringup-nvme/#boot-with-usb-drive-as-root","title":"Boot with USB drive as root","text":"<pre><code>* Back to [booting over USB cable](linux-bringup.md#running-linux-via-usb-cable)\n* Make sure you have the latest m1n1.macho loaded `python3 proxyclient/tools/chainload.py build/m1n1.macho`\n* Build a kernel with builtin features (check for =m and change to =y in .config)\n* In particular need CONFIG_EXT4_FS=y is needed to boot!\n* Try this [Asahi linux snapshot](https://github.com/amworsley/AsahiLinux/tree/asahi-kbd) and this [config](https://raw.githubusercontent.com/amworsley/asahi-wiki/main/images/config-keyboard+nvme)\n* Then boot the gzipp'ed image with the USB drive. I had to plug the drive in the 2nd USB type-C port on the MBA (MacBook Air) through a Type-C to USB-Type A HUB.\n* Be-aware when I plugged in a lower speed USB device (keyboard) it reset the HUB and corrupted my USB drive. So don't use a keyboard, a Type-A to Type-C dongle worked fine\n* Over the USB cable load the new kernel and boot with the USB drive as the root filesystem:\n</code></pre> <pre><code>python3 proxyclient/tools/linux.py -b 'earlycon console=tty0  console=tty0 debug net.ifnames=0 rw root=/dev/sda1 rootdelay=5 rootfstype=ext4'  Image.gz t8103-j313.dtb\n</code></pre> <pre><code>* The root filesystem is in first partition of the drive (/dev/sda1) and it's a MBA (t8103-j313.dtb)\n* If your booting something different check the .dts file in **arch/arm64/boot/dts/apple/** by looking at the value of the **model** field\n</code></pre>"},{"location":"sw/linux-bringup-nvme/#install-rootfs-in-the-nvme","title":"Install rootfs in the nvme","text":"<ul> <li>Under MacOS you need to create some free space as per Glanzmann's notes </li> <li>Be very careful you know exactly what partition you specify this is just an  example your numbers may vary</li> <li>make space - the last number is the space that macos will occupy <code>diskutil apfs resizeContainer disk0s2 200GB</code></li> <li>List the partitions and see where the free space now lies <code>diskutil list</code></li> <li>Allocate a FAT32 partition for your linux rootfs on the NVME from the free space</li> <li>NOTE you have to specify the partition before the free space <code>diskutil addPartition disk0s3 FAT32 LB 42.6GB</code></li> <li>Boot with the USB ext4 USB drive as root (as above)</li> <li>Use fdisk to confirm which partition is the new FAT32 one (it should have the size you created above too) <code>fdisk -l /dev/nvme0n1</code></li> <li>Once you have confirmed it format it to ext4 <code>mkfs.ext4 /dev/nvme0n1p4</code></li> <li>Mount it <code>mount /dev/nvme0n1p4 /mnt</code></li> <li>Copy your USB drive rootfs into it as before <code>cp -ax /. /mnt</code></li> <li>I believe the -x should prevent the recursive descent into the new filesystem on the nvme</li> <li>Unmount it <code>umount /mnt</code></li> <li>Then try booting via the USB cable with your new root filesystem on the nvme ``` python3 proxyclient/tools/linux.py -b 'earlycon console=tty0  console=tty0 debug net.ifnames=0 rw root=/dev/nvme0n1p6 rootfstype=ext4' Image.gz t8103-j313.dtb</li> </ul>"},{"location":"sw/linux-bringup-usb-keyboard/","title":"Linux bringup usb keyboard","text":""},{"location":"sw/linux-bringup-usb-keyboard/#title-linux-bringup-usb-keyboard","title":"title: Linux Bringup: USB Keyboard","text":""},{"location":"sw/linux-bringup-usb-keyboard/#linux-usb-keyboard","title":"Linux USB keyboard","text":"<ul> <li>Got a USB keyboard working with an ramdisk root filesystem.</li> <li>By booting the Asahi dart/dev kernel with USB3 XHCD, DWC3 and DART et cetera </li> <li>Can use this Linux config file for M1 MacBook Air with USB as a base (doesn't enable gadget mode)</li> <li>Modifying the initrd to just run /bin/sh (edit /init) </li> <li>Booted it directly via <code>python3.9 proxyclient/tools/linux.py -b 'earlycon console=tty0  console=tty0 debug' Image-dwc3.gz t8103-j274.dtb initrd-be2.gz</code><ul> <li>Where the Image-dwc3.gz is the Asahi dart/dev kernel, the t8103.j274.dtb built with that kernel, at linux/arch/arm64/boot/dts/apple/t8103-j274.dtb, and initrd-be2.gz is the modified debian Bullseye initrd to just run /bin/sh after the set up.</li> </ul> </li> <li> <p>Then I used a Type-C to Type-A adapter to plug in a normal old USB Dell keyboard and enter commands into the /bin/sh running. </p> </li> <li> <p>You can go one step further and try booting a USB drive</p> </li> </ul>"},{"location":"sw/linux-bringup-usb/","title":"Linux bringup usb","text":""},{"location":"sw/linux-bringup-usb/#title-linux-bringup-usb","title":"title: Linux Bringup: USB","text":""},{"location":"sw/linux-bringup-usb/#root-as-usb-drive","title":"root as USB drive","text":"<ul> <li>Inspired by Alyssa's tomshardware article </li> <li>Make an arm64 root filesystem as per debian rootfs</li> <li>Note: The following is done as root on a debian system:</li> </ul> <pre><code>mkdir debinst-buster\ndebootstrap --arch arm64 --foreign buster debinst-buster http://ftp.au.debian.org/debian/\ncp /usr/bin/qemu-aarch64-static debinst-buster/usr/bin\nLANG=C.UTF-8 chroot debinst-buster qemu-aarch64-static /bin/bash\n</code></pre> <ul> <li>In the chroot complete the set up:</li> </ul> <pre><code>/debootstrap/debootstrap --second-stage\n</code></pre> <ul> <li>Install any other packages you want with apt</li> </ul> <pre><code>apt install file screenfetch procps openssh-server\n</code></pre> <ul> <li>Configure the sshd to allow root access and set the password to what you want</li> </ul> <pre><code># Add PermitRootLogin yes\nvi /etc/ssh/sshd_config\n# Set root's password\npasswd\n</code></pre> <ul> <li>Create an ext4 partition on a USB device (e.g. /dev/sdb in example below)</li> </ul> <pre><code>fdisk /dev/sdb\n# n =&gt; new partition\n# w =&gt; write it out\n</code></pre> <ul> <li>Format ext4 filesystem <code>mkfs.ext4 /dev/sdb1</code></li> <li>Install your new rootfs on it (you could have just created the rootfs on the partition.... :-)</li> </ul> <pre><code>mount /dev/sdb1 /mnt/img\ncp -a debinst-buster/. /mnt/img\numount /mnt/img\n</code></pre> <ul> <li>Boot up linux with the USB drive plugged in (now should be /dev/sda1). I used a simple USB hub on the 2nd port with a USB keyboard the USB drive plugged in before powering on the Mac.</li> </ul> <pre><code>python3.9 proxyclient/tools/linux.py -b 'earlycon console=tty0  console=tty0 debug net.ifnames=0 rw root=/dev/sda1 rootdelay=5 rootfstype=ext4'  Image-dart-dev.gz t8103-j274-dart-dev.dtb\n</code></pre> <ul> <li>Image-dart-dev.gz - dart/dev branch of the Asahi linux as above</li> <li>t8103-j274-dart-dev.dtb - the dtb from the above linux</li> <li>NO initrd is passed</li> </ul>"},{"location":"sw/linux-bringup-wifi/","title":"Linux bringup wifi","text":""},{"location":"sw/linux-bringup-wifi/#title-linux-bringup-wifi","title":"title: Linux Bringup: WiFi","text":""},{"location":"sw/linux-bringup-wifi/#wifi-support","title":"WiFi Support","text":""},{"location":"sw/linux-bringup-wifi/#under-macos-grab-the-wifi-firmware-as-per-glanzmanns-notes","title":"Under MacOS grab the WiFi firmware as per Glanzmann's notes","text":"<ul> <li>Clone the installer <code>git clone https://github.com/AsahiLinux/asahi-installer</code></li> <li>Go into the src directory  <code>cd asahi-installer/src</code></li> <li>Grab the firmware into a tar file  <code>python3 -m firmware.wifi /usr/share/firmware/wifi /tmp/linux-firmware.tar</code></li> </ul>"},{"location":"sw/linux-bringup-wifi/#install-firmware","title":"Install firmware","text":"<ul> <li>Under Linux booted via USB drive or NVMe rootfs Create the firmware directory: <code>sudo mkdir -p /usr/lib/firmware</code></li> <li>Install the wifi firmware you extracted earlier <code>sudo tar -C /usr/lib/firmware -xf firmware.tar</code></li> <li>Install any other networking / WiFi packages you will need. e.g. wpasupplicant </li> </ul>"},{"location":"sw/linux-bringup-wifi/#enable-wifi","title":"Enable WiFi","text":"<ul> <li>You need to have built a Asahi Linux kernel with the M1 WiFI support such as the wifi/take5 branch</li> <li>Before you boot that kernel via m1n1 over USB - run this script to enable the WiFi hardware <code>python3 ./proxyclient/experiments/pcie_enable_devices.py</code></li> <li>There are other ways to do this - this what I did under Debian linux</li> <li>Now after the linux kernel has booted you should be able to see a WiFi device (wlan0) via the usual tools  <code>ip a l</code></li> <li>You can start networking the usual Linux tools e.g.<ul> <li>Edit the configuration file:</li> </ul> </li> </ul> <pre><code>auto wlan0\niface wlan0 inet dhcp\n    wpa-ssid YOUR_SSID\n    wpa-psk YOUR_WIFI_PASSPHRASE\n</code></pre> <ul> <li>Then start up the interface (wlan0) via (note -v =&gt; verbose info) <code>sudo ifup -v wlan0</code></li> </ul>"},{"location":"sw/linux-bringup-x11/","title":"Linux bringup x11","text":""},{"location":"sw/linux-bringup-x11/#title-linux-bringup-x11","title":"title: Linux Bringup: X11","text":""},{"location":"sw/linux-bringup-x11/#running-x11","title":"Running X11","text":"<ul> <li>You can run a non-accelerated X11 if you build the kernel with <code>CONFIG_DRM_FBDEV_EMULATION=y</code></li> <li>After booting that kernel install the relevant xserver fbdev (under debian) <code>sudo apt install xserver-xorg-video-fbdev</code></li> <li>Then you can try starting X <code>startx</code></li> <li>If you have problems look for error messages in the Xserver log  <code>less /var/log/Xorg.0.log</code></li> <li>Assuming you get X starting up then will need to set up a window manager - as per your distribution e.g. see this Debian GUI system</li> <li>I installed the very light keyboard based fluxbox <code>apt install fluxbox</code></li> <li>To get a simple graphical login screen <code>apt install xdm</code></li> <li>I install the nice X terminal konsole <code>apt install konsole</code></li> <li>For a web browser install firefox as Chrome requires special kernel paging support (not available at this time) <code>sudo apt install firefox-esr</code></li> </ul> <p>()</p>"},{"location":"sw/linux-bringup/","title":"Linux Bringup","text":""},{"location":"sw/linux-bringup/#building-linux","title":"Building Linux","text":"<ul> <li>See github linux Asahi Kernel for the latest Asahi kernel patched for M1 support</li> <li>In particular according to Dec 2021 progress report you can try the asahi branch which \"...is a bleeding edge kernel ... in a usable enough state that we would like people to test...\"</li> <li>Even though development happens on the AsahiLinux repo, some changes for supporting M1 were mainlined in the linux kernel (see table in progress report for details) , so you can clone the official Linux kernel mirror</li> </ul> <pre><code>git clone https://github.com/torvalds/linux.git\ncd ./linux\n</code></pre> <ul> <li>Generate the default arm64 configuration and add the simple framebuffer support. </li> </ul> <pre><code>make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig\n./scripts/config --set-val CONFIG_FB_SIMPLE y\n</code></pre> <ul> <li>Build linux for arm64</li> </ul> <pre><code>make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j8 Image dtbs\n</code></pre> <ul> <li>m1n1's proxyclient linux.py script wants a gzip'ed image</li> </ul> <pre><code>gzip &lt; ./arch/arm64/boot/Image &gt; Image.gz\n</code></pre> <ul> <li>Beware NOT to use m1n1's dtb: <code>build/dtb/t8103-j274.dtb</code> with different Linux kernel such as Asahi dart/dev kernel which better supports USB. In this case use the one that is generated by that kernel at linux/arch/arm64/boot/dts/apple otherwise your USB ports might not be working.</li> </ul> <pre><code>cp ../linux/arch/arm64/boot/dts/apple/t8103-j274.dtb t8103-j274.dtb\n</code></pre>"},{"location":"sw/linux-bringup/#keyboard-nvme-working","title":"keyboard  + nvme working","text":"<ul> <li>Snapshot of rev a2281d64fdbc with config such as this one</li> </ul>"},{"location":"sw/linux-bringup/#boot-with-your-usb-cables-plugged-in","title":"Boot with your USB cables plugged in","text":"<ul> <li>Plug your USB cables/hubs/adapters before booting your Mac as m1n1/linux doesn't do the USB low level PHY setup yet. Let the iBoot do this when it boots to m1n1 you installed via your setup of boot to m1n1</li> <li>If m1n1 C code has been updated since the set up you should chain load the new .macho image</li> </ul> <pre><code>python3.9 proxyclient/tools/chainload.py build/m1n1.macho\n</code></pre>"},{"location":"sw/linux-bringup/#running-linux-via-usb-cable","title":"Running Linux via USB cable","text":"<ul> <li>Connecting USB Type-C to Type A/C cable to M1 Mac provides two USB serial interfaces on the other computer</li> <li>This can be connected to via the python proxy tool to boot up Linux directly or load up a macho binary like an updated m1n1 version or combined with a Linux image</li> <li>Get a 27Mb initrd from debian arm64 installer</li> </ul> <pre><code>wget https://deb.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz\n</code></pre>"},{"location":"sw/linux-bringup/#directly","title":"Directly","text":"<ul> <li>Set up your M1N1DEVICE</li> </ul> <pre><code>M1N1DEVICE=/dev/ttyACM0\nexport M1N1DEVICE\n</code></pre> <ul> <li>Boot linux via the linux.py tool:</li> </ul> <pre><code>python3.9 proxyclient/tools/linux.py -b 'earlycon console=ttySAC0,1500000 console=tty0 debug' \\\n  Image.gz t8103-j274.dtb initrd.gz\n</code></pre> <p>The debian arm64 installer(initrd.gz) will boot the installer. If you want to have a shell that you can use with an USB keyboard, you can modify the init script of this installer initrd.gz(ramdisk) to launch a shell. Extract the ramdisk: </p> <pre><code>gzip -cd &lt; /pathto/initrd.gz | cpio --extract\n</code></pre> <p>=&gt; you will get the content of the ramdisk in the current directory Modify the init script by replacing the last \"exec $init\" line by \"exec /bin/busybox sh\" for instance. Recreate the new ramdisk: (from the ramdisk directory) </p> <pre><code>find . | cpio -o -H newc | gzip -c -9 &gt;| /pathto/initrd-new.gz\n</code></pre>"},{"location":"sw/linux-bringup/#under-hypervisor","title":"Under Hypervisor","text":"<ul> <li>Running Linux under m1n1 hypervisor lets you inspect the memory/stop/start and even do a stack trace</li> <li>Create a .macho combined image (run_guest.py only accepts .macho)</li> </ul> <pre><code>cat build/m1n1.macho Image.gz build/dtb/apple-j274.dtb initramfs.cpio.gz &gt; m1n1-payload.macho\n</code></pre> <ul> <li>Load it with run_guest</li> </ul> <pre><code>python3.9 proxyclient/tools/run_guest.py -S m1n1-payload.macho\n</code></pre> See full log <pre><code>% python3.9 proxyclient/tools/run_guest.py -S m1n1-payload.macho\nFetching ADT (0x00058000 bytes)...\nDisable iodev IODEV.USB1\nInitializing hypervisor over iodev IODEV.USB0\nTTY&gt; Starting secondary CPUs...\nTTY&gt; Starting CPU 1 (0:1)...   Started.\nTTY&gt; Starting CPU 2 (0:2)...   Started.\nTTY&gt; Starting CPU 3 (0:3)...   Started.\nTTY&gt; Starting CPU 4 (1:0)...   Started.\nTTY&gt; Starting CPU 5 (1:1)...   Started.\nTTY&gt; Starting CPU 6 (1:2)...   Started.\nTTY&gt; Starting CPU 7 (1:3)...   Started.\nRemoving ADT node /arm-io/dart-usb0\nRemoving ADT node /arm-io/atc-phy0\nRemoving ADT node /arm-io/usb-drd0\nRemoving ADT node /arm-io/acio0\nRemoving ADT node /arm-io/acio-cpu0\nRemoving ADT node /arm-io/dart-acio0\nRemoving ADT node /arm-io/apciec0\nRemoving ADT node /arm-io/dart-apciec0\nRemoving ADT node /arm-io/apciec0-piodma\nRemoving ADT node /arm-io/i2c0/hpmBusManager/hpm0\nRemoving ADT node /arm-io/atc0-dpxbar\nRemoving ADT node /arm-io/atc0-dpphy\nRemoving ADT node /arm-io/atc0-dpin0\nRemoving ADT node /arm-io/atc0-dpin1\nRemoving ADT node /arm-io/atc-phy0\nRemoving ADT node /cpus/cpu1\nRemoving ADT node /cpus/cpu2\nRemoving ADT node /cpus/cpu3\nRemoving ADT node /cpus/cpu4\nRemoving ADT node /cpus/cpu5\nRemoving ADT node /cpus/cpu6\nRemoving ADT node /cpus/cpu7\nLOAD: _HDR 16384 bytes from 0 to 0\nLOAD: TEXT 131072 bytes from 4000 to 4000\nLOAD: RODA 32768 bytes from 24000 to 24000\nLOAD: DATA 393216 bytes from 2c000 to 2c000\nZERO: 442368 bytes from 0x8c000 to 0xf8000\nLOAD: PYLD 9851973 bytes from 8c000 to f8000\nSKIP: 57256891 bytes from 0xa5d445 to 0x40f8000\nTotal region size: 0x11b4000 bytes\nPhysical memory: 0x819d30000 .. 0xbccbe8000\nGuest region start: 0x81ade8000\nMapping guest physical memory...\nLoading kernel image (0xa5d449 bytes)...\n.........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\nCopying SEPFW (0x750000 bytes)...\nCopying TrustCache (0x60000 bytes)...\nAdjusting addresses in ADT...\nUploading ADT (0x4f088 bytes)...\nSetting up bootargs at 0x81bf98000...\nEntering hypervisor shell. Type `start` to start the guest.\n&gt;&gt;&gt;\n</code></pre> <ul> <li>It prompts with debug shell and you begin execution from the load point with the start command:</li> </ul> See bootup log <pre><code>Entering hypervisor shell. Type `start` to start the guest.\n&gt;&gt;&gt; start\nDisabling other iodevs...\n - IODEV.UART\n - IODEV.FB\n - IODEV.USB1\n - IODEV.USB0_SEC\n - IODEV.USB1_SEC\nDoing essential MMIO remaps...\nUpdating page tables...\nPT[200000000:235200000] -&gt; HW\nPT[235200000:235204000] -&gt; RESERVED VUART\nPT[235204000:23b700420] -&gt; HW\nPT[23b700420:23b700424] -&gt; RESERVED PMU HACK\nPT[23b700424:23d280088] -&gt; HW\nPT[23d280088:23d28008c] -&gt; RESERVED PMU HACK\nPT[23d28008c:23d280098] -&gt; HW\nPT[23d280098:23d28009c] -&gt; RESERVED PMU HACK\nPT[23d28009c:700000000] -&gt; HW\nImproving logo...\nShutting down framebuffer...\nEnabling SPRR...\nEnabling GXF...\nJumping to entrypoint at 0x81b118800\nPass: mrs x0, HID5_EL1 = 2082df50e700df14 (HID5_EL1)\nPass: msr HID5_EL1, x0 = 2082df50e700df14 (OK) (HID5_EL1)\nPass: mrs x0, EHID9_EL1 = 600000811 (EHID9_EL1)\nPass: msr EHID9_EL1, x0 = 600000811 (OK) (EHID9_EL1)\nPass: mrs x0, EHID10_EL1 = 3000528002788 (EHID10_EL1)\nPass: msr EHID10_EL1, x0 = 3000528002788 (OK) (EHID10_EL1)\nPass: mrs x0, EHID20_EL1 = 618100 (EHID20_EL1)\nPass: msr EHID20_EL1, x0 = 618100 (OK) (EHID20_EL1)\nPass: mrs x0, EHID20_EL1 = 618100 (EHID20_EL1)\nPass: msr EHID20_EL1, x0 = 618100 (OK) (EHID20_EL1)\nPass: mrs x0, EHID20_EL1 = 618100 (EHID20_EL1)\nPass: msr EHID20_EL1, x0 = 618100 (OK) (EHID20_EL1)\nPass: mrs x1, CYC_OVRD_EL1 = 2000000 (CYC_OVRD_EL1)\nSkip: msr CYC_OVRD_EL1, x1 = 2000000\nPass: mrs x1, ACC_CFG_EL1 = d (ACC_CFG_EL1)\nSkip: msr ACC_CFG_EL1, x1 = d\n</code></pre> <ul> <li>Once it is running use ^C to get a debug shell</li> </ul> <pre><code>...\nSkip: msr CYC_OVRD_EL1, x1 = 2000000\nPass: mrs x1, ACC_CFG_EL1 = d (ACC_CFG_EL1)\nSkip: msr ACC_CFG_EL1, x1 = d\n^CUser interrupt\nEntering debug shell\n&gt;&gt;&gt; \n</code></pre> <ul> <li>Then get a stack trace (with symbols) after loading the <code>System.map</code> file of the kernel and setting the <code>PAC_MASK</code> (pointer protection mask)</li> </ul> <pre><code>&gt;&gt;&gt; load_system_map('../linux/System.map')\n&gt;&gt;&gt; hv.pac_mask = 0xfffff00000000000\n&gt;&gt;&gt; bt\nStack trace:\n - 0xffff8000102fdc3c (cpu_do_idle+0xc)\n - 0xffff8000102fdc5c (arch_cpu_idle+0xc)\n - 0xffff800010305420 (default_idle_call+0x20)\n - 0xffff80001005fcf0 (do_idle+0x210)\n - 0xffff80001005fec4 (cpu_startup_entry+0x24)\n - 0xffff8000102fe278 (rest_init+0xd0)\n - 0xffff8000103d0c7c (arch_call_rest_init+0xc)\n - 0xffff8000103d11f0 (start_kernel+0x528)\n</code></pre> <ul> <li>Disassemble addresses before the program counter</li> </ul> <pre><code>&gt;&gt;&gt; disassemble_at(p.hv_translate(hv.ctx.elr, True) - 32, 64)\n    81f6fdc04:  d53cd042        mrs     x2, tpidr_el2\n    81f6fdc08:  d53cd041        mrs     x1, tpidr_el2\n    81f6fdc0c:  d53cd041        mrs     x1, tpidr_el2\n    81f6fdc10:  d53cd040        mrs     x0, tpidr_el2\n    81f6fdc14:  d53cd040        mrs     x0, tpidr_el2\n    81f6fdc18:  d503233f        paciasp\n    81f6fdc1c:  d5033f9f        dsb     sy\n    81f6fdc20:  d503207f        wfi\n    81f6fdc24:  d50323bf        autiasp\n    81f6fdc28:  d65f03c0        ret\n    81f6fdc2c:  d503201f        nop\n    81f6fdc30:  d503233f        paciasp\n    81f6fdc34:  a9bf7bfd        stp     x29, x30, [sp, #-16]!\n    81f6fdc38:  910003fd        mov     x29, sp\n    81f6fdc3c:  97fffff7        bl      81f6fdc18 &lt;_start+0x14&gt;\n    81f6fdc40:  a8c17bfd        ldp     x29, x30, [sp], #16\n</code></pre> <ul> <li>Dump out register %0 from the last exception to the hypervisor</li> </ul> <pre><code>&gt;&gt;&gt; hv.ctx.regs[0]\n0xffff0003ccaf21e0\n</code></pre>"},{"location":"sw/linux-bringup/#linux-console-output","title":"Linux console output","text":"<ul> <li>Under the hypervisor you can get the console output from linux via the 2nd ttyACM1 device generated by the m1n1 HV</li> <li>NOTE The output was padded with lots of leading blanks I had to strip with <code>sed '/^ */s///'</code> to get this pretty display below:</li> </ul> See console output <pre><code>% picocom /dev/ttyACM1\n\npicocom v3.1\n\nport is        : /dev/ttyACM1\nflowcontrol    : none\nbaudrate is    : 9600\nparity is      : none\ndatabits are   : 8\nstopbits are   : 1\nescape is      : C-a\nlocal echo is  : no\nnoinit is      : no\nnoreset is     : no\nhangup is      : no\nnolock is      : no\nsend_cmd is    : sz -vv\nreceive_cmd is : rz -vv -E\nimap is        : \nomap is        : \nemap is        : crcrlf,delbs,\nlogfile is     : none\ninitstring     : none\nexit_after is  : not set\nexit is        : no\n\nType [C-a] [C-h] to see available commands\nTerminal ready\nm1n1\nsc: Initializing\nCPU init... CPU: M1 Icestorm\n\nboot_args at 0x81bd9c000\nrevision:     2\nversion:      2\nvirt_base:    0xfffffe0011b34000\nphys_base:    0x819b34000\nmem_size:     0x3b30b0000\ntop_of_kdata: 0x81bda0000\nvideo:\nbase:       0xbd2ce4000\ndisplay:    0x0\nstride:     0x2800\nwidth:      2560\nheight:     1600\ndepth:      0x1001e\nmachine_type: 0\ndevtree:      0xfffffe0012b34000\ndevtree_size: 0x58000\ncmdline:      -v\nboot_flags:   0x0\nmem_size_act: 0x400000000\n\n\n\nm1n1 vda44067\nCopyright (C) 2021 The Asahi Linux Contributors\nLicensed under the MIT license\n\nRunning in EL1\n\nHeap base: 0x81ece4000\nMMU: Initializing...\nMMU: SCTLR_EL1: 100030d50980 -&gt; 30901085\nMMU: running with MMU and caches enabled!\nfb init: 2560x1600 (30) [s=2560] @0xbd2ce4000\nfb console: max rows 46, max cols 64\nfb: display logo\nDevice info:\nModel: MacBookAir10,1\nTarget: J313\nBoard-ID: 0x26\nChip-ID: 0x8103\n\nWDT registers @ 0x23d2b0000\nWDT disabled\npmgr: initialized, 272 devices found.\nInitialization complete.\nChecking for payloads...\nFound a gzip compressed payload at 0x81ace4000\nUncompressing... 2029114 bytes uncompressed to 5693448 bytes\nFound a kernel at 0x81ee00000\nFound a devicetree at 0x81aed363a\nFound a gzip compressed payload at 0x81aed446f\nUncompressing... 7819222 bytes uncompressed to 16741888 bytes\nFound a cpio initramfs at 0x81f400000\nNo more payloads at 0x81b649445\nStarting secondary CPUs...\nFDT: initrd at 0x81f400000 size 0xff7600\nFDT: framebuffer@bd2ce4000 base 0xbd2ce4000 size 0xfa0000\nADT: 64 bytes of random seed available\nFDT: KASLR seed initialized\nFDT: Passing 64 bytes of random seed\nFDT: DRAM at 0x800000000 size 0x400000000\nFDT: Usable memory is 0x819b34000..0xbccbe4000 (0x3b30b0000)\nFDT: CPU 1 is not alive, disabling...\nFDT: CPU 2 is not alive, disabling...\nFDT: CPU 3 is not alive, disabling...\nFDT: CPU 4 is not alive, disabling...\nFDT: CPU 5 is not alive, disabling...\nFDT: CPU 6 is not alive, disabling...\nFDT: CPU 7 is not alive, disabling...\nFDT prepared at 0x8203f8000\ntps6598x: Error getting /arm-io/i2c0/hpmBusManager/hpm0 node\nusb: tps6598x_init failed for /arm-io/i2c0/hpmBusManager/hpm0.\nusb: failed to init hpm0\npmgr: Error getting node /arm-io/atc-phy0\nusb: unable to bringup the phy with index 0\ntunable: unable to find ADT node /arm-io/apcie/pci-bridge1.\npcie: Error applying apcie-config-tunables for /arm-io/apcie/pci-bridge1\nPreparing to boot kernel at 0x81ee00000 with fdt at 0x8203f8000\nValid payload found\nPreparing to run next stage at 0x81ee00000...\nMMU: shutting down...\nMMU: shutdown successful, clearing caches\nVectoring to next stage...\nM1 Linux\nStarting Shell\nStill running 1\nStill running 2\nStill running 3\nStill running 4\nStill running 5\nStill running 6\nStill running 7\nStill running 8\nStill running 9\nStill running 10\nStill running 11\nStill running 12\nStill running 13\nStill running 14\nStill running 15\nStill running 16\nStill running 17\nStill running 18\nStill running 19\nStill running 20\nStill running 21\n....\n</code></pre>"},{"location":"sw/linux-bringup/#root-filesystem-options","title":"Root filesystem options","text":"<ul> <li>initrd + USB keyboard</li> <li>USB drive boot</li> <li>USB Drive to NVME partition</li> </ul>"},{"location":"sw/linux-bringup/#other-features","title":"Other features","text":"<ul> <li>WiFi Support</li> <li>X11 Support</li> </ul>"},{"location":"sw/linux-bringup/#missing","title":"Missing","text":"<ul> <li>Sound</li> <li>Power management - do NOT shut the lid</li> </ul>"},{"location":"sw/m1n1-dev-guide/","title":"m1n1 Developer Guide","text":"<p>(Not written yet, just throwing some stuff in)</p>"},{"location":"sw/m1n1-dev-guide/#boot-protocol","title":"Boot protocol","text":"<p>The boot protocol used for m1n1 images is a trivial subset of the XNU boot protocol. Raw binaries can be loaded anywhere (at 16K aligned offsets). The RVBAR is at offset 0 (only relevant for resuming from sleep mode, due to iBoot locking down that register). Payloads are simply concatenated to the main binary and are loaded together with it. The entry point is at 0x800 with translation disabled and the physical address to the XNU <code>boot_args</code> structure in r0.</p> <p>There are also legacy Mach-O images; these are currently only still necessary for older iBoot2 versions and for run_guest.py (TODO: fix that). Those are basically the same thing with a Mach-O header and the .bss section trimmed, as the file is not loaded flat any more. There is a hacky large payload section at the end that is trimmed to 0 bytes and \"hangs off of the end of the file\", to provide space for payloads to be appended by concatenation.</p>"},{"location":"sw/m1n1-hypervisor/","title":"m1n1 Hypervisor","text":""},{"location":"sw/m1n1-hypervisor/#running-macos-under-the-m1n1-hypervisor","title":"Running macOS under the m1n1 hypervisor","text":"<p>You can run either a development kernel obtained from Apple, in which case you will have debug symbols, or use the stock kernel found in a macOS install.</p>"},{"location":"sw/m1n1-hypervisor/#preparation","title":"Preparation","text":"<p>You can use either your existing macOS install, or alternatively install a second copy of macOS.</p> <p>To install a second copy of macOS you will need to complete a couple of steps:</p> <ol> <li> <p>Create a second Volume on your macOS partition:  </p> <pre><code>diskutil apfs addVolume disk4 APFS macOSTest -mountpoint /Volumes/macOSTest\n</code></pre> <p>Change disk4 and volume name (i.e <code>macOSTest</code>) for your particular system/preferences. Note: Don't make this a system role or it will mess with your existing system (no valid users in 1TR).  </p> </li> <li> <p>Download and install macOS. To download a specific version of macOS installer you can use the command:  </p> <pre><code>softwareupdate --fetch-full-installer --full-installer-version 12.3\n</code></pre> <p>Substitute <code>12.3</code> for whichever version you require. The installer will be found in the Applications folder. Copy it out of here if you want to save it, otherwise it deletes itself once you have installed once. </p> <p>Unfortunately, Apple's CDN only keeps the full-installer package for a limited number of version, and doesn't have 12.3 anymore.  Note: we are now at firmware version 13.5, which is available normally. You don't need to install 12.3.</p> </li> </ol>"},{"location":"sw/m1n1-hypervisor/#using-archived-installassistantpkg","title":"Using archived InstallAssistant.pkg","text":"<p>The Montery 12.3 InstallAssistant.pkg has been archived here, but trying to install by double-clicking installs an online version of the <code>Install macOS Monterey.app</code>, with a file size of about 40MB. When that file is run, it will install the latest version of macOS. However, installing it via the command line appears to do the correct thing:</p> <pre><code>    sudo installer -pkg 12.3\\ 21E230\\ \\(Release\\).pkg -target /\n</code></pre> <p>Check that <code>Install macOS Monterey.app</code> in the <code>applications</code> folder is ~12GB.</p>"},{"location":"sw/m1n1-hypervisor/#getting-the-macos-development-kernel-and-creating-the-kernelcache","title":"Getting the macOS development kernel and creating the kernelcache","text":"<ol> <li>Create a macOS developer account (requires an iCloud account).</li> <li>Download the Mac OS Kernel Debug Kit (KDK) from Apple here. It should match your Mac OS version.</li> <li>Install the KDK into Mac OS. The KDK will be installed to <code>/Library/Developer/KDKs/KDK_&lt;MACOS_VERSION&gt;_&lt;KDK_VERSION&gt;.kdk</code></li> <li> <p>Change to the kernels directory:  </p> <pre><code>cd /Library/Developer/KDKs/KDK_&lt;MACOS_VERSION&gt;_&lt;KDK_VERSION&gt;.kdk/System/Library/Kernels\n</code></pre> </li> <li> <p>Switch into the KDK folder and run the following command:</p> <pre><code>kmutil create -z -n boot -a arm64e -B ~/dev.kc.macho -V development \\\n  -k kernel.development.t8101 \\\n  -r /System/Library/Extensions/ \\\n  -r /System/Library/DriverExtensions \\\n  -x $(kmutil inspect -V release --no-header | grep -v \"SEPHiber\" | awk '{print \" -b \"$1; }')\n</code></pre> <p><code>-B</code> designates the output file, our kernel cache is written to <code>dev.kc.macho</code> in the home directory</p> <p><code>-k</code> must match a kernel in the kernels directory</p> </li> </ol>"},{"location":"sw/m1n1-hypervisor/#preparing-the-macos-volume-by-disabling-security-features","title":"Preparing the macOS Volume by disabling security features","text":"<ol> <li>Set the macOS Volume as a default boot target.</li> <li>Start into 1tr and start a terminal.</li> <li>Disable most security feature in the boot policy: <code>bputil -nkcas</code>; use <code>diskutil info [disk name]</code> to get UUID.</li> <li>Disable SIP (bputil resets it): <code>csrutil disable</code>.</li> <li>Install m1n1 as custom boot object:  <pre><code>kmutil configure-boot \\\n  -c build/m1n1.bin \\\n  --raw \\\n  --entry-point 2048 \\\n  --lowest-virtual-address 0 \\\n  -v /Volumes/macOSTest\n</code></pre> </li> </ol>"},{"location":"sw/m1n1-hypervisor/#starting-the-development-kernel-under-the-m1n1-hypervisor","title":"Starting the development kernel under the m1n1 hypervisor","text":"<ol> <li>Copy the kernelcache to your development machine.</li> <li>Copy the debug DWARF from <code>/Library/Developer/KDKs/KDK_&lt;MACOS_VERSION&gt;_&lt;KDK_VERSION&gt;.kdk/System/Library/Kernels/kernel.development.t8101.dSYM/Contents/Resources/DWARF/kernel.development.t8101</code></li> <li>To start macOS with the m1n1 hypervisor, run: <pre><code>python3 proxyclient/tools/run_guest.py \\\n  -s &lt;PATH_TO_DEBUG_DWARF&gt; \\\n  &lt;PATH_TO_DEVELOPMENT_KERNEL_CACHE&gt; \\\n  -- \"debug=0x14e serial=3 apcie=0xfffffffe -enable-kprintf-spam wdt=-1 clpc=0\"\n</code></pre> </li> </ol> <p>Note: t8101 files (both kernel and dwarf symbols) are available starting with KDK for macOS 11.3. Marcan streams on booting macOs with hypervisor were done with 11.3.  These notes have also been validated with macOS 11.5.2 and can get to login with WiFi network on a MacBook Air:  </p> <ul> <li>Kernel version:  </li> </ul> <pre><code>$ uname -a \n&gt; Darwin MacBook-Air.home 20.6.0 Darwin Kernel Version 20.6.0: Wed Jun 23 00:26:27 PDT 2021; root:xnu-7195.141.2~5/RELEASE_ARM64_T8101 arm64\n</code></pre> <ul> <li>macOS version: </li> </ul> <pre><code>$ sw_vers\n&gt; ProductName:  macOS / ProductVersion: 11.5.2 / BuildVersion:  20G95\n</code></pre> <p>If you see the apple logo (rainbow version) and not the progress bar, this means you probably had a macOS panic early in the boot process. This can come from a mismatch of macOS version between the kernel cache (kernel + extensions) and the macOS root FS. To figure out where the boot process is stuck, you can start a serial utility like minicom/picocom and the like, with 115200 baud rate (something like <code>picocom -b 115200 /dev/ttyACM1</code>). Be patient when you are booting with one cpu and the hypervisor. Depending on what you are tracing, it is slower than normal and it is expected. </p> <p>Here are some numbers from some experiment with macOS <code>11.5.2</code> and m1n1 version commit <code>bd5211909e36944cb376d66c909544ad23c203bc</code>: - From run_guest command launched (<code>t0</code>) to start loading kernel: 9s. - From <code>t0</code> to login screen (without keyboard nor mouse cursor moving first): around 2min. - With keyboard and mouse cursor moving: around 2min35s. - From password entered to desktop and menu bar: around +2min.  </p>"},{"location":"sw/m1n1-hypervisor/#running-the-stock-macos-kernel-from-a-macos-install","title":"Running the stock macOS kernel from a macOS install","text":"<ol> <li>Boot into macOS.</li> <li>Find the <code>kernelcache</code>, it is at <code>/System/Volumes/Preboot/(UUID)/boot/(long hash)/System/Library/Caches/com.apple.kernelcaches/kernelcache</code></li> <li>Make a copy of this file somewhere.</li> <li>Get (or build) a copy of img4tool (https://github.com/tihmstar/img4tool).</li> <li> <p>Extract the im4p image:</p> <pre><code>img4tool -e -p out.im4p kernelcache\n</code></pre> </li> <li> <p>Extract the machO from the im4p:</p> <pre><code>img4tool -e -o kernel.macho out.im4p\n</code></pre> </li> <li> <p>You can now run macOS in a similar manner as shown above (just no debug DWARF):</p> <pre><code>python3 proxyclient/tools/run_guest.py \\\n  &lt;PATH_TO_EXTRACTED_MACHO&gt; \\\n  -- \"debug=0x14e serial=3 apcie=0xfffffffe -enable-kprintf-spam wdt=-1 clpc=0\"\n</code></pre> </li> </ol>"},{"location":"sw/m1n1-hypervisor/#updating-your-m1n1-hypervisor-tree","title":"Updating your m1n1 hypervisor tree","text":"<p>The hypervisor/m1n1 ABI is not stable. If you have installed a fresh m1n1 build as above, you can use <code>run_guest.py</code> directly to save some time. However, as soon as you update your m1n1 git tree, you must build the updated m1n1 and run  </p> <pre><code>python tools/chainload.py -r ../build/m1n1.bin\n</code></pre> <p>before <code>run_guest.py</code>, to make sure the ABI is synced. Failure to do this will lead to random errors/crashes due to ABI mismatches.</p>"},{"location":"sw/m1n1-hypervisor/#using-gdblldb","title":"Using GDB/LLDB","text":"<p><code>gdbserver</code> command starts the server implementation that can be connected to GDB or LLDB. LLDB is more recommended because it supports pointer authentication and Darwin kernel dyld.</p> <p>You need to load kernel extensions to get symbols on LLDB. The below shell script generates <code>target.lldb</code>, a convenient LLDB script that sets the target and loads kernel extensions:</p> <pre><code>echo target create -s kernel.development.t8101.dSYM kernel.development.t8101 &gt; target.lldb\nfor k in $(find Extensions); do [ \"$(file -b --mime-type $k)\" != application/x-mach-binary ] || printf 'image add %q\\n' $k; done &gt;&gt; target.lldb\n</code></pre> <p>The following commands for LLDB loads the generated script and connects to m1n1:</p> <pre><code>command source -e false target.lldb\nprocess connect unix-connect:///tmp/.m1n1-unix\n</code></pre> <p>Do not run hypervisor console commands interfering with GDB/LLDB, or they will be out-of-sync. For example, do not edit breakpoints from both of hypervisor console and GDB/LLDB at the same time.</p>"},{"location":"sw/m1n1-hypervisor/#sources","title":"Sources","text":"<p>Source for the kernelcache creation: https://kernelshaman.blogspot.com/2021/02/building-xnu-for-macos-112-intel-apple.html</p>"},{"location":"sw/m1n1-user-guide/","title":"m1n1 User Guide","text":"<p>m1n1 is the bootloader developed by the Asahi Linux project to bridge the Apple (XNU) boot ecosystem to the Linux boot ecosystem.</p> <p>GitHub: AsahiLinux/m1n1</p>"},{"location":"sw/m1n1-user-guide/#what-it-does","title":"What it does","text":"<ul> <li>Initializes hardware</li> <li>Puts up a pretty logo</li> <li>Loads embedded (appended) payloads, which can be:<ul> <li>Device Trees (FDTs), with automatic selection based on the platform</li> <li>Initramfs images (compressed CPIO archives)</li> <li>Kernel images in Linux ARM64 boot format (optionally compressed)</li> <li>Configuration statements</li> </ul> </li> <li>Chainloads another version of itself from a FAT32 partition (if configured to do so)</li> </ul> <p>Proxy mode enables a huge toolset of developer features, from reducing your Linux kernel test cycle to 7 seconds, to live hardware probing and experimentation, to a hypervisor capable of running macOS or Linux and tracing hardware accesses in real time while providing a virtual UART over USB. See the m1n1 Developer Guide for that. This guide only describes trivial proxy use cases.</p>"},{"location":"sw/m1n1-user-guide/#building","title":"Building","text":"<p>You need an <code>aarch64-linux-gnu-gcc</code> cross-compiler toolchain (or a native one, if running on ARM64). You also need <code>convert</code> (from ImageMagick) for the boot logos.</p> <pre><code>$ git clone --recursive https://github.com/AsahiLinux/m1n1.git\n$ cd m1n1\n$ make\n</code></pre> <p>The output will be in build/m1n1.{bin,macho}.</p> <p>To build on a native arm64 machine, use <code>make ARCH=</code>.</p> <p>Building on ARM64 macOS is supported with clang and LLVM; you need to use Homebrew to install the required dependencies:</p> <pre><code>$ brew install llvm imagemagick\n</code></pre> <p>After that, just type <code>make</code>.</p>"},{"location":"sw/m1n1-user-guide/#building-using-the-container-setup","title":"Building using the container setup","text":"<p>If you have a container runtime installed, like Podman or Docker, you can make use of the compose setup, which contains all build dependencies.</p> <pre><code>$ git clone --recursive https://github.com/AsahiLinux/m1n1.git\n$ cd m1n1\n$ podman-compose build m1n1\n$ podman-compose run m1n1 make\n$ # or\n$ docker-compose run m1n1 make\n</code></pre>"},{"location":"sw/m1n1-user-guide/#build-options","title":"Build options","text":"<ul> <li> <p><code>make RELEASE=1</code> enables m1n1 release behavior, which hides the console by default and provides an escape hatch to activate an early proxy mode (see Proxy mode).</p> </li> <li> <p><code>make CHAINLOADING=1</code> enables chainloading support. This requires a Rust nightly toolchain with aarch64 support, which you can get with: <code>rustup toolchain install nightly &amp;&amp; rustup target install aarch64-unknown-none-softfloat</code>.</p> </li> </ul> <p>m1n1 stage 1 release builds packaged with the Asahi Linux Installer have both of those options set. m1n1 stage 2 release builds packaged by distros should just have <code>RELEASE=1</code> (since they do not need to chainload further) and thus do not need Rust to build.</p>"},{"location":"sw/m1n1-user-guide/#installation","title":"Installation","text":""},{"location":"sw/m1n1-user-guide/#stage-1-as-fuos","title":"Stage 1 (as fuOS)","text":"<p>m1n1 (with your choice of payloads) can be installed from 1TR (macOS 12.1 OS/stub and later) as follows:</p> <pre><code>kmutil configure-boot -c m1n1-stage1.bin --raw --entry-point 2048 --lowest-virtual-address 0 -v &lt;path to your OS volume&gt;\n</code></pre> <p>On older versions (not recommended), you need the <code>macho</code> instead:</p> <pre><code>kmutil configure-boot -c m1n1-stage1.macho -v &lt;path to your OS volume&gt;\n</code></pre> <p>The Asahi Linux installer will normally do this for you, and most users will never have to do it again manually.</p> <p>Each OS has its own recovery OS. You must go to the recovery for Asahi Linux to run this command, or you'll get errors with something like <code>not paired</code>. </p> <p>If you're not in the correct recovery OS, you can go to the correct one by:</p> <pre><code>/Volumes/Asahi\\ Linux/Finish\\ Installation.app/Contents/Resources/step2.sh\n</code></pre>"},{"location":"sw/m1n1-user-guide/#stage-2-in-the-esp","title":"Stage 2 (in the ESP)","text":"<p>Stage 2 m1n1 is normally stored in the EFI system partition, typically with U-Boot as a payload. Assuming your ESP is mounted at <code>/boot/efi</code>, you'd normally do:</p> <pre><code>cat build/m1n1.bin /path/to/dtbs/*.dtb /path/to/uboot/u-boot-nodtb.bin &gt; /boot/efi/m1n1/boot.bin\n</code></pre> <p>For details on how to add dtb and uboot to m1n1, see <code>Configuring for stage 2</code> under <code>Payloads</code> below. </p>"},{"location":"sw/m1n1-user-guide/#payloads","title":"Payloads","text":"<p>m1n1 supports the following payloads:</p> <ul> <li>Device Trees (FDTs), optionally gzip/xz compressed</li> <li>Initramfs images, which must be gzip/xz compressed</li> <li>arm64 Linux style kernel images, which should be gzip/xz compressed</li> <li>Configuration variables in the form \"var=value\\n\"</li> </ul> <p>Payloads are simply concatenated after the initial m1n1 binary.</p>"},{"location":"sw/m1n1-user-guide/#configuring-for-stage-1","title":"Configuring for stage 1","text":"<p>m1n1 stage 1 is configured by the Asahi Linux Installer by appending variables like this:</p> <pre><code>cp build/m1n1.bin m1n1-stage1.bin\necho 'chosen.asahi,efi-system-partition=EFI-PARTITION-PARTUUID' &gt;&gt; m1n1-stage1.bin\necho 'chainload=EFI-PARTITION-PARTUUID;m1n1/boot.bin' &gt;&gt; m1n1-stage1.bin\n</code></pre> <p>PITFALL: Make sure the UUID is lowercase otherwise some consumers of the devicetree (notably U-Boot) won't find the system partion.</p>"},{"location":"sw/m1n1-user-guide/#configuring-for-stage-2","title":"Configuring for stage 2","text":"<p>m1n1 stage 2 will normally boot payloads directly, plus receive the <code>chosen.asahi,efi-system-partition</code> config from stage 1 automatically. Using device trees shipped with U-Boot:</p> <pre><code>cat build/m1n1.bin \\\n    ../uboot/arch/arm/dts/\"t[86]*.dtb \\\n    &lt;(gzip -c ../uboot/u-boot-nodtb.bin) \\\n    &gt;m1n1-uboot.bin\n</code></pre> <p>Note that U-Boot is compressed before appending. Uncompressed kernels may cause issues with variables getting lost, since their size cannot be accurately determined.</p>"},{"location":"sw/m1n1-user-guide/#configuring-to-boot-linux-directly","title":"Configuring to boot Linux directly","text":"<p>m1n1 can boot a Linux kernel and initramfs directly, either as stage 1 or 2 (but you probably don't want to do this for stage 1). You can specify the boot arguments directly. Using device trees shipped with the kernel:</p> <pre><code>cat build/m1n1.bin \\\n    &lt;(echo 'chosen.bootargs=earlycon debug root=/dev/nvme0n1p6 rootwait rw') \\\n    ${KERNEL}/arch/arm64/boot/dts/apple/*.dtb \\\n    ${INITRAMFS}/initramfs.cpio.gz \\\n    ${KERNEL}/arch/arm64/boot/Image.gz \\\n    &gt;m1n1-linux.bin\n</code></pre> <p>Again note the use of a compressed kernel image. Also, if you want to concatenate multiple initramfs images, you should uncompress them first, then concatenate them and compress them again (bug).</p>"},{"location":"sw/m1n1-user-guide/#configuring-for-proxy-mode","title":"Configuring for proxy mode","text":"<p>If given no payloads, or if booting the payloads fails, m1n1 will fall back to proxy mode.</p>"},{"location":"sw/m1n1-user-guide/#proxy-mode","title":"Proxy mode","text":"<p>Proxy mode provides a USB device interface (available on all Thunderbolt ports) for debugging. To use it, connect your target device to your host device with a USB cable (e.g. a USB-C to USB-A cable, with the C side on the m1n1 target). See the m1n1 Developer Guide for all the crazy details. These are just some simple examples of what you can do.</p> <p>When in proxy mode, a Linux host will see two USB TTY ACM devices, typically /dev/ttyACM0 &amp; /dev/ttyACM1. (In macOS this will be /dev/cu.usbmodemP_01 and /dev/cu.usbmodemP_03). The first one is the proper proxy interface, while the second one is reserved for use by the hypervisor's virtual UART feature. You should set the <code>M1N1DEVICE</code> environment variable to the path to the right device.</p>"},{"location":"sw/m1n1-user-guide/#booting-a-linux-kernel","title":"Booting a Linux kernel","text":"<pre><code>export M1N1DEVICE=/dev/ttyACM0\nproxyclient/tools/linux.py &lt;path/to/Image.gz&gt; &lt;path/to/foo.dtb&gt; &lt;path/to/initramfs.cpio.gz&gt; -b \"boot arguments here\"\n</code></pre>"},{"location":"sw/m1n1-user-guide/#chainloading-another-m1n1","title":"Chainloading another m1n1","text":"<pre><code>export M1N1DEVICE=/dev/ttyACM0\nproxyclient/tools/chainload.py -r build/m1n1.bin\n</code></pre>"},{"location":"sw/m1n1-user-guide/#running-a-linux-kernel-as-a-m1n1-hypervisor-guest-with-virtual-uart","title":"Running a Linux kernel as a m1n1 hypervisor guest, with virtual UART","text":"<p>First, open the secondary port (e.g. <code>/dev/ttyACM1</code>) with a serial terminal:</p> <pre><code>picocom --omap crlf --imap lfcrlf -b 500000 /dev/ttyACM1\n</code></pre> <p>Then boot your kernel:</p> <pre><code>proxyclient/tools/chainload.py -r build/m1n1.bin\ncat build/m1n1.bin \\\n    &lt;(echo 'chosen.bootargs=earlycon debug rw') \\\n    ../linux/arch/arm64/boot/dts/apple/*.dtb \\\n    &lt;initramfs path&gt;/initramfs-fw.cpio.gz \\\n    ../linux/arch/arm64/boot/Image.gz \\\n    &gt; /tmp/m1n1-linux.macho\npython proxytools/tools/run_guest.py -r /tmp/m1n1-linux.macho\n</code></pre> <p>Note that we use the raw <code>m1n1.bin</code>, and pass <code>-r</code> to <code>run_guest.py</code>. Mach-O support for non-XNU binaries has been deprecated. Please do not build Linux-based payloads with the Mach-O version of m1n1.</p> <p>Alternatively, use the <code>run_guest_kernel.sh</code> script to make this process significantly less cumbersome</p> <pre><code>$ ./proxyclient/tools/run_guest_kernel.sh [kernel build root] [boot args] [initramfs (optional)]\n</code></pre>"},{"location":"sw/m1n1-user-guide/#running-a-macos-kernel-as-a-m1n1-hypervisor-guest","title":"Running a macOS kernel as a m1n1 hypervisor guest","text":"<p>See m1n1 Hypervisor</p>"},{"location":"sw/m1n1-user-guide/#backdoor-proxy-mode-in-stage-1-release-builds","title":"Backdoor proxy mode in stage 1 release builds","text":"<p>If you have a standard release build of m1n1 installed as fuOS (i.e. what you get when you run the Asahi Linux installer), you can enable verbose messages and a backdoor proxy mode by going into 1TR and doing this from the macOS Terminal:</p> <pre><code>csrutil disable\n</code></pre> <p>You will be prompted to select the correct boot volume if you are multi booting and then asked to authenticate yourself. </p> <p>You can then enable verbose mode using:</p> <pre><code>nvram boot-args=-v\n</code></pre> <p>Once initially enabled, this feature can be toggled off with:</p> <pre><code>nvram boot-args=\n</code></pre> <p>By doing this, m1n1 will turn on verbose logging, and wait 5 seconds before booting its payloads. If it receives a USB proxy connection in that time, it will go into proxy mode. This is extremely useful when you want to have a working, auto-booting Linux install, but retain the ability to boot kernels via proxy mode if something goes wrong, or just for fast development.</p> <p>Note that this state is less secure, as any installed OS can alter the <code>boot-args</code> property. Reset your boot policy with <code>csrutil enable</code> (do NOT choose to enable full security when prompted, as this will uninstall m1n1).</p> <p>To break into proxy mode, the host needs to open the USB ACM device (either of the 2 will do). This can be done by e.g. running a serial terminal in a loop on the secondary interface (which you might want for the hypervisor anyway): Note: for macOS use <code>/dev/cu.usbmodemP_01</code></p> <pre><code>while true; do\n    while [ ! -e /dev/ttyACM1 ]; do sleep 1; done\n    picocom --omap crlf --imap lfcrlf -b 500000 /dev/ttyACM1\n    sleep 1\ndone\n</code></pre> <p>Once picocom connects, you can then invoke proxy scripts with <code>M1N1DEVICE=/dev/ttyACM0</code>.</p> <p>Note: the proxy backdoor requires both verbose mode (<code>boot-args=-v</code>) and disabled SIP (<code>csrutil disable</code>). Just using verbose mode may give you m1n1 debug output (depending on Apple's boot-arg filtering policy, which can change) but will not enable the proxy backdoor in recent m1n1 builds, for security.</p>"},{"location":"sw/macos-kernelcache/","title":"macOS Kernelcache","text":""},{"location":"sw/macos-kernelcache/#read-this-before-proceeding-further","title":"READ THIS BEFORE PROCEEDING FURTHER","text":"<p>Asahi Linux has a very strict reverse engineering policy. Do not start disassembling macOS code, including the Darwin kernel, unless you have fully read and understood the policy.</p> <p>We expect any contributors who wish to use binary reverse engineering as part of their contribution to their project to discuss the specifics with us in advance. This will usually mean arranging a clean-room environment, where their only job will be to write specifications, not any source code, on any related subsystems.</p> <p>You may be banned from ever contributing code directly to our project if you do not do this. You have been warned.</p> <p>Distributing macOS binaries, in whole or in part, is a copyright violation. Do not upload or share any such files. You have to extract the files from your own installation of macOS, on an Apple computer.</p> <p>Again, only proceed if you have talked to us first about this.</p>"},{"location":"sw/macos-kernelcache/#extracting-the-darwin-kernelcache","title":"Extracting the Darwin kernelcache","text":"<ul> <li>Find your kernelcache in the Preboot partition of your OS install</li> <li>Grab img4tool</li> <li><code>img4tool -a kernelcache -e -p kernelcache.im4p -m kernelcache.im4m</code></li> <li><code>img4tool kernelcache.im4p -e -o kernelcache.macho</code></li> <li>The result is a standard Mach-O file. You can look at the headers with machodump.py if you do not have a Mach-O toolchain handy.</li> </ul>"},{"location":"sw/macos-kernelcache/#alternate-using-the-kernelrelease-file","title":"Alternate using the kernel.release.* file","text":"<ul> <li>From suggestion by davidrysk there are some MacOS kernel images already available at /System/Library/Kernels/kernel.release.t8020</li> <li>Below shows dumping the macho header with Marcan's script machodump.py in order to get the offsets to disassemble the code:<ul> <li>Note: This requires the construct python package but the debian buster packages didn't work (python 3 or 2) or even a github version</li> <li>I had to use the pypi install via pip3:</li> </ul> </li> </ul> <pre><code> apt install python3-pip\n pip3 install construct\n</code></pre> <ul> <li>Then dump out the headers to extract the offsets to the code:</li> </ul> <pre><code>python3 machodump.py kernel.release.t8020\n...\n            cmd = (enum) SEGMENT_64 25\n            args = Container: \n                segname = u'__TEXT' (total 6)\n                vmaddr = 0xFFFFFE0007004000\n                vmsize = 0x00000000000C4000\n                fileoff = 0x0000000000000000\n                filesize = 0x00000000000C4000\n...\n        Container: \n            cmd = (enum) UNIXTHREAD 5\n            args = ListContainer: \n                Container: \n                    flavor = (enum) THREAD64 6\n                    data = Container: \n                        x = ListContainer: \n                            0x0000000000000000\n...\n                            0x0000000000000000\n                        fp = 0x0000000000000000\n                        lr = 0x0000000000000000\n                        sp = 0x0000000000000000\n                        pc = 0xFFFFFE00071F4580\n                        cpsr = 0x00000000\n                        flags = 0x00000000\n....\n</code></pre> <ul> <li>Calculate the offset from the starting instruction pc=0xFFFFFE00071F4580 to the start of the VM (vmaddr=0xFFFFFE0007004000)</li> </ul> <pre><code>calc \"base(16); 0xFFFFFE00071F4580 - 0xFFFFFE0007004000\"\n        0x1f0580\n</code></pre> <ul> <li>Skip over the first 0x1f0000 = 0x1f0 x 0x1000 (4k) blocks and split off 64K from the here:</li> </ul> <pre><code>dd if=/home/amw/doc/share/kernel.release.t8020 of=init.bin bs=4k skip=$((0x1f0)) count=16\n</code></pre> <ul> <li>Disassemble the raw binary blob</li> </ul> <pre><code>aarch64-linux-gnu-objdump -D -b binary -m aarch64 init.bin\n\ninit.bin:     file format binary\n\nDisassembly of section .data:\n\n0000000000000000 &lt;.data&gt;:\n       0:       14000100        b       0x400\n       4:       d503201f        nop\n       8:       d503201f        nop\n       c:       d503201f        nop\n      10:       d503201f        nop\n      14:       d503201f        nop\n      18:       d503201f        nop\n      1c:       d503201f        nop\n      20:       d503201f        nop\n...\n     3f4:       d503201f        nop\n     3f8:       d503201f        nop\n     3fc:       d503201f        nop\n     400:       d510109f        msr     oslar_el1, xzr\n     404:       d5034fdf        msr     daifset, #0xf\n     408:       f2e88aa0        movk    x0, #0x4455, lsl #48\n     40c:       f2c80a80        movk    x0, #0x4054, lsl #32\n     410:       f2ac8cc0        movk    x0, #0x6466, lsl #16\n     414:       f28c8ee0        movk    x0, #0x6477\n     418:       90003fe4        adrp    x4, 0x7fc000\n     41c:       3944c085        ldrb    w5, [x4, #304]\n     420:       710000bf        cmp     w5, #0x0\n...\n</code></pre> <ul> <li>On the actual Mac with XCode installed as pointed out by davidrysk you can do the much simpler:</li> </ul> <pre><code>otool -xv /System/Library/Kernels/kernel.release.t8020\n\n...\n/System/Library/Kernels/kernel.release.t8020:\n(__TEXT_EXEC,__text) section\nfffffe00071ec000        sub     x13, sp, #0x60\nfffffe00071ec004        sub     sp, sp, #0x60\nfffffe00071ec008        st1.4s  { v0, v1, v2 }, [x13], #48 ; Latency: 4\n...\nfffffe00071f43f8        nop\nfffffe00071f43fc        nop\nfffffe00071f4400        msr     OSLAR_EL1, xzr\nfffffe00071f4404        msr     DAIFSet, #0xf\nfffffe00071f4408        movk    x0, #0x4455, lsl #48\nfffffe00071f440c        movk    x0, #0x4054, lsl #32\nfffffe00071f4410        movk    x0, #0x6466, lsl #16\nfffffe00071f4414        movk    x0, #0x6477\nfffffe00071f4418        adrp    x4, 2044 ; 0xfffffe00079f0000\nfffffe00071f441c        ldrb    w5, [x4, #0x130]        ; Latency: 4\nfffffe00071f4420        cmp     w5, #0x0\nfffffe00071f4424        b.ne    0xfffffe00071f4438\n....\n</code></pre>"},{"location":"sw/partitioning-cheatsheet/","title":"Partitioning Cheatsheet","text":""},{"location":"sw/partitioning-cheatsheet/#warning-never-delete-the-apple_apfs_recovery-partition","title":"WARNING: NEVER DELETE THE <code>Apple_APFS_Recovery</code> PARTITION","text":"<p>The last partition on your disk, listed as type <code>Apple_APFS_Recovery</code> in diskutil, contains critical system recovery components. If you delete this partition accidentally, macOS upgrades will cease to work, and any other problem with your system will leave it unbootable and require a factory restore and complete wipe. Restoring this partition without a full machine wipe is a major pain in the ass. Do NOT, under any circumstances, mess with this partition.</p> <p>It is not possible for the Asahi Linux installer to cause this by itself, since it doesn't contain any partition deletion code at all and never has, nor does it access the raw partition table in any way. If you find yourself in this situation, then you either deleted the partition yourself unknowingly (from Linux or from macOS/recoveryOS), or some kind of Apple bug did.</p>"},{"location":"sw/partitioning-cheatsheet/#intro","title":"Intro","text":"<p>Partition management from macOS can be confusing. Hopefully this helps explain things.</p> <p>Note: We'll add uninstall/cleanup options to the installer soon, but by definition it will always be a simplified tool that is only guaranteed to work for the common case of vanilla Asahi Linux installs; if you do your own partition management or install another distro, you'll have to know how to do it manually like this in order to clean up properly.</p> <p>Note: If you are deleting Asahi Linux, you will have to set macOS as the default boot OS again if you have not already done so. You can do this from System Settings in macOS itself, or by holding down the Option key while selecting it in Startup Options. Not doing this ahead of time won't break your computer, but you may not be able to boot automatically until you do so. If you find you cannot go into the Startup Options screen normally, try starting up with a double tap (tap, release, tap and hold the power button).</p>"},{"location":"sw/partitioning-cheatsheet/#do-not-use-the-disk-utility-application","title":"Do not use the Disk Utility application","text":"<p>The graphical Disk Utility application shipped with macOS only barely works for trivial cases where you have one or more APFS containers, no unpartitioned space, all partitions in the right order, and no foreign partitions. Even for ostensibly \"supported\" things like creating FAT32/HFS partitions, it is buggy. Just don't use it. It will confuse you, it will show you impossible numbers, and it will do the wrong thing. It is not intended as a proper disk management tool; it is a flimsy user interface front-end that can only handle the simplest of tasks and situations and falls apart completely otherwise.</p> <p>The commandline <code>diskutil</code> has a strange interface and is harder to understand, but at least it usually works properly.</p>"},{"location":"sw/partitioning-cheatsheet/#if-everything-goes-wrong","title":"If everything goes wrong","text":"<p>Apple Silicon machines cannot be bricked, but they can be rendered unbootable if you break your System Recovery. To fix this, you will need to connect another machine to it and use a special DFU recovery procedure to restore it via USB. If you have another Mac handy (Intel works), follow Apple's official documentation. If you don't, you can use idevicerestore instead. Here's a quick guide for that.</p> <p>If you broke your OS recovery, you might find yourself in a boot loop, even as you hold down the power button. If this happens, shut down the machine, then boot with a quick double-tap-hold of the power button (tap, release, press and hold). If you're on a laptop, you might find you can't actually force a shutdown from the boot loop. If this happens, count three seconds from the point where the Apple logo disappears during a loop cycle, then do the double tap. This should get you into System Recovery and you can fix things from there without a full DFU flash.</p>"},{"location":"sw/partitioning-cheatsheet/#physical-disk-layout-on-apple-silicon","title":"Physical disk layout on Apple Silicon","text":"<ul> <li>The NVMe drive has namespaces. You only care about the primary one, that's <code>disk0</code> on macOS or <code>nvme0n1</code> on Linux.<ul> <li>The others are used for kernel panic logs and stuff like that. That's pretty low level stuff you don't have to care about. This is an NVMe thing, like \"low-level partitions\". Just don't think too much about it.</li> </ul> </li> <li>The primary namespace is formatted as a GPT partition table, same as on most Linux/Windows/Intel Mac systems these days</li> <li>The GPT contains partitions, which can be traditional ones (FAT32, HFS+, Linux...) or APFS containers</li> <li>An APFS container contains multiple logical volumes sharing disk space</li> <li>Each Apple Silicon machine has two special system APFS containers, the first one on the disk (iBoot System Container) and the last one on the disk (System Recovery). These should never be touched. Only create/remove partitions between them.</li> </ul> <p>Warning: Some of Apple's tools do not like unsorted partitions in the GPT partition table. Since you need to keep the first and last partition in place, that means most disk management operations from Linux will append partitions to the GPT, and put it out of order. Make sure you fix this. With the <code>fdisk</code> Linux command this can be done with <code>x</code> (go into expert mode) \u2192 <code>f</code> (fix partitions order) \u2192 <code>r</code> (return to main menu) \u2192 <code>w</code> (write changes and exit).</p>"},{"location":"sw/partitioning-cheatsheet/#macos-disk-management-basics","title":"macOS disk management basics","text":"<p><code>disk0</code> is your NVMe drive. <code>disk0sN</code> is a GPT partition within it. <code>N</code> is not stable and is allocated dynamically by the macOS kernel. It does not correspond to the physical slot index in the GPT, nor does it correspond to the physical order of the partition data in the drive. Any time you create a partition, N can be allocated to a different number, and they can all be renumbered on reboot.</p> <p><code>diskN</code> (<code>N</code> &gt;= 1) could be a disk image or an external disk, but more likely is an APFS container. This is a hack that Apple came up with to represent subvolumes. The \"partitions\" within such a disk aren't real partitions, they just represent volumes within one APFS container. The container itself exists within a physical partition in <code>disk0</code>. That means that for APFS operations, for example, <code>disk0s2</code> and <code>disk1</code> could mean the same thing, the former referencing the container by its physical partition, and the latter by the virtual (synthesized) disk number.</p> <p>Multiple macOS installs can share one APFS container. Each OS has a volume group consisting of two paired subvolumes, a System volume and a Data volume. There are extra volumes: <code>Preboot</code>, <code>Recovery</code>, <code>VM</code>, <code>Update</code>. These are shared between all OSes in that container. Not all of them necessarily exist.</p> <p>Each macOS install has within it its own copy of recoveryOS. Then there is a global System recoveryOS, and (rarely) an additional System Fallback recoveryOS.</p>"},{"location":"sw/partitioning-cheatsheet/#asahi-linux-installs","title":"Asahi Linux installs","text":"<p>For Asahi Linux, we do not install alongside macOS in the same container, because that would require using APFS for Linux (which isn't stable yet nor mainlined). We just create normal GPT partitions for Linux. Asahi Linux also needs to install itself the same way macOS would, into an APFS container as a volume group, to be actually bootable. This is what we call the \"stub macOS\" and is what links the Apple world to the Linux world. Think of it as a bootloader partition. We could share a container with macOS for this, but we choose not to because it makes it less error-prone and easier to delete, and we're already partitioning the disk anyway.</p> <p>So the installer will (for a normal Asahi Linux = Arch Linux ARM install) create three partitions:</p> <ul> <li>A 2.5GB APFS container, containing the bits of iBoot/macOS we need to boot the machine including a copy of recoveryOS<ul> <li>m1n1 stage 1 is installed here</li> </ul> </li> <li>A 500MB EFI System Partition<ul> <li>m1n1 stage 2, U-Boot, and the GRUB core image live here</li> </ul> </li> <li>A Linux ext4 partition filling up the rest of the space<ul> <li>GRUB modules and the Linux kernel/initramfs live here</li> </ul> </li> </ul> <p>To uninstall, you need to delete all three.</p> <p>Asahi Linux is unusual in that, unlike on traditional UEFI systems, we create an EFI System Partition for each instance you install. We have a bespoke mechanism for OSes to find the right ESP to install into/boot from to handle this. This is because each ESP is logically tied to the 2.5G stub, and it makes OS management easier if we treat it all as one unit, and use the native boot picker to choose among different OSes (and thus ESPs). You should think of the 2.5GB APFS stub container, the EFI System Partition, and whatever root/... partitions are created after that as one logical \"container\" for an open source OS within an Apple Silicon system. In a way, m1n1+U-Boot turn your machine into a UEFI system, and each time you install you are creating a new \"virtual UEFI environment\" within your Apple Silicon Mac (note: this isn't a VM).</p>"},{"location":"sw/partitioning-cheatsheet/#listing-partitions-with-the-asahi-linux-installer","title":"Listing partitions with the Asahi Linux installer","text":"<p><code>diskutil</code> can be very baroque and enumerating installed OSes can be painful, so the Asahi Linux installer itself tries to condense the most important disk information into an easily understandable format. You can run it as usual (<code>curl https://alx.sh | sh</code>) and simply quit without doing anything if you just want to see this information.</p> <p>Here's an example from right after installing Asahi Linux, before completing the second step of the installation:</p> <pre><code>Partitions in system disk (disk0):\n  1: APFS [Macintosh HD] (380.00 GB, 6 volumes)\n    OS: [B ] [Macintosh HD] macOS v12.3 [disk3s1, D44D4ED9-B162-4542-BF50-9470C7AFDA43]\n  2: APFS [Asahi Linux] (2.50 GB, 4 volumes)\n    OS: [ *] [Asahi Linux] incomplete install (macOS 12.3 stub) [disk4s2, 53F853CF-4851-4E82-933C-2AAEB247B372]\n  3: EFI (500.17 MB)\n  4: Linux Filesystem (54.19 GB)\n  5: (free space: 57.19 GB)\n  6: APFS (System Recovery) (5.37 GB, 2 volumes)\n    OS: [  ] recoveryOS v12.3 [Primary recoveryOS]\n\n  [B ] = Booted OS, [R ] = Booted recovery, [? ] = Unknown\n  [ *] = Default boot volume\n</code></pre> <p>This shows:</p> <ul> <li>One APFS container (380GB) containing 6 volumes (not listed) which comprise one macOS 12.3 install (\"Macintosh HD\"). Note: \"Macintosh HD\" is actually the name of the System subvolume, and this is how macOS itself displays volumes.<ul> <li>If you had another macOS install sharing space in the same container, it would be listed as another <code>OS:</code> line under the same partition.</li> <li>disk3s1 is the volume for this macOS system, which means <code>disk3</code> is the virtual disk that represents this APFS container partition</li> <li>The UUID is the Volume Group ID of this OS, which is the primary identifier for it (e.g. how the machine finds it to boot it, how you select it in <code>bputil</code> prompts, the associated subdirectory name within the Preboot and Recovery subvolumes, and more)</li> </ul> </li> <li>One APFS container (2.5GB) containing 4 volumes which is actually an Asahi Linux bootloader stub, using macOS 12.3 as its base version, named \"Asahi Linux\"<ul> <li>If the install were complete, this would show your m1n1 stage 1 version. However, because it is not, it is listed as <code>incomplete install</code> until you reboot into it holding down the power button and complete the second step of installation.</li> <li>disk4s2 is the volume for this stub's system, which means <code>disk4</code> is the virtual disk that represents this APFS container partition</li> </ul> </li> <li>One EFI system partition (FAT32)</li> <li>One Linux Filesystem partition (ext4 in this case, but the specific FS isn't identified/shown)</li> <li>Some free space (unpartitioned) - note that the installer represents this as its own \"partition\"<ul> <li><code>diskutil</code> instead likes to refer to free space by the partition identifier of the partition right before it in physical disk order, which is needless to say quite confusing and error-prone. We figure giving it its own number makes more sense.</li> </ul> </li> <li>The System Recovery partition (always exists last), which contains 2 APFS volumes and has one instance of recoveryOS installed (version 12.3).<ul> <li>You don't want to touch this, but we show it since knowing what version of recoveryOS is present is useful. There could be a fallback version too.</li> </ul> </li> </ul> <p>Note how it tells you that you are currently booted into the Macintosh HD OS (<code>[B ]</code>), but that the default boot OS is set to Asahi Linux (<code>[ *]</code>). If you were to run this from recoveryOS, it'd be shown as a <code>[R*]</code> (running the recoveryOS that is part of your default boot OS), unless you ended up falling back to System Recovery, in which case the boot mark would be in the last line, starting <code>[R ] recoveryOS...</code>.</p> <p>Note that the Asahi Linux installer will not show you the iBoot System Container partition (to not confuse users too much) but will show you your System Recovery partition, so you can see what System Recovery versions(s) you have (but won't let you do anything with it). It also doesn't show physical disk partition numbers.</p>"},{"location":"sw/partitioning-cheatsheet/#listing-partitions-with-diskutil","title":"Listing partitions with <code>diskutil</code>","text":"<p>Use <code>diskutil list</code>. The same set-up above looks like this:</p> <pre><code>/dev/disk0 (internal):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      GUID_partition_scheme                         500.3 GB   disk0\n   1:             Apple_APFS_ISC \u2068\u2069                        524.3 MB   disk0s1\n   2:                 Apple_APFS \u2068Container disk3\u2069         380.0 GB   disk0s2\n   3:                 Apple_APFS \u2068Container disk4\u2069         2.5 GB     disk0s5\n   4:                        EFI \u2068EFI - ASAHI\u2069             500.2 MB   disk0s4\n   5:           Linux Filesystem \u2068\u2069                        54.2 GB    disk0s7\n                    (free space)                         57.2 GB    -\n   6:        Apple_APFS_Recovery \u2068\u2069                        5.4 GB     disk0s3\n\n/dev/disk3 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +380.0 GB   disk3\n                                 Physical Store disk0s2\n   1:                APFS Volume \u2068Macintosh HD\u2069            15.2 GB    disk3s1\n   2:              APFS Snapshot \u2068com.apple.os.update-...\u2069 15.2 GB    disk3s1s1\n   3:                APFS Volume \u2068Preboot\u2069                 887.6 MB   disk3s2\n   4:                APFS Volume \u2068Recovery\u2069                798.7 MB   disk3s3\n   5:                APFS Volume \u2068Data\u2069                    157.1 GB   disk3s5\n   6:                APFS Volume \u2068VM\u2069                      20.5 KB    disk3s6\n\n/dev/disk4 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +2.5 GB     disk4\n                                 Physical Store disk0s5\n   1:                APFS Volume \u2068Asahi Linux - Data\u2069      884.7 KB   disk4s1\n   2:                APFS Volume \u2068Asahi Linux\u2069             1.1 MB     disk4s2\n   3:                APFS Volume \u2068Preboot\u2069                 63.6 MB    disk4s3\n   4:                APFS Volume \u2068Recovery\u2069                1.8 GB     disk4s4\n</code></pre> <p>This shows the physical partitions in the order they are present on disk0 first:</p> <ul> <li><code>disk0</code> (shown as type \"GUID_partition_scheme\") actually represents the whole disk (500GB)</li> <li><code>disk0s1</code> is the iBoot System Container (type <code>Apple_APFS_ISC</code>), not shown in the Installer output<ul> <li>This is actually an APFS container with more subvolumes, but <code>diskutil</code> itself hides those details from you too!</li> <li>This stores a bunch of system-critical information, you don't want to mess with it</li> </ul> </li> <li><code>disk0s2</code> is the first APFS container, which holds the \"Macintosh HD\" macOS volume<ul> <li>Note how it says \"Container disk3\" to indicate this is shown as the virtual/synthesized <code>disk3</code> disk.</li> </ul> </li> <li><code>disk0s5</code> is the Asahi Linux bootloader stub<ul> <li>The partition index is out of order! This is logically after <code>disk0s2</code> and also in that position in the GPT. These partition numbers don't mean anything, it's whatever macOS feels like assigning that day.</li> <li>This is virtual disk <code>disk4</code>.</li> </ul> </li> <li><code>disk0s4</code> is the FAT32 EFI System Partition (displayed as type <code>EFI</code>, and with name <code>EFI - ASAHI</code> because it gets truncated for these)</li> <li><code>disk0s7</code> is the Linux root partition (displayed as type <code>Linux filesystem</code>)</li> <li>Then there's some free space</li> <li><code>disk0s3</code> is the System Recovery partition (type <code>Apple_APFS_Recovery</code>)<ul> <li>Really, don't mess with this. It is the only way to recover locally if your OS is broken.</li> </ul> </li> </ul> <p>After this, you can see the two APFS containers broken out into volumes, each as their own virtual disk: <code>disk3</code> and <code>disk4</code>. In fact, there are two more: <code>disk1</code> is the iBoot System Container (backed by <code>disk0s1</code>) and <code>disk2</code> is the System Recovery (backed by <code>disk0s3</code>), but these are hidden from diskutil output. Remember, the numbering may/will be different for you!</p>"},{"location":"sw/partitioning-cheatsheet/#do-not-blindly-copy-and-paste-these-commands","title":"Do not blindly copy and paste these commands","text":"<p>All the following examples use disk/partition numbers from the above output. You need to substitute the right numbers for your system. These will be different for you. You have been warned.</p>"},{"location":"sw/partitioning-cheatsheet/#deleting-partitions-with-diskutil","title":"Deleting partitions with <code>diskutil</code>","text":"<p>Deleting partitions works differently for APFS and non-APFS partitions.</p>"},{"location":"sw/partitioning-cheatsheet/#deleting-apfs-containers","title":"Deleting APFS containers","text":"<p>To delete the Asahi Linux APFS container, use one of these forms:</p> <p><code>diskutil apfs deleteContainer disk4</code></p> <p><code>diskutil apfs deleteContainer disk0s5</code></p> <p>The first one identifies it by virtual disk, the second one by physical partition. They are exactly equivalent and have the same result, as long as you are using the right numbers.</p>"},{"location":"sw/partitioning-cheatsheet/#deleting-other-partitions","title":"Deleting other partitions","text":"<p>To delete the EFI and Linux partitions, do this:</p> <pre><code>diskutil eraseVolume free free disk0s4\ndiskutil eraseVolume free free disk0s7\n</code></pre> <p>This is called \"eraseVolume free free\" because diskutil's amazingly intuitive interface represents the concept of deleting partitions as \"formatting them as free space\" (except for APFS). Yes, really.</p>"},{"location":"sw/partitioning-cheatsheet/#resizing-apfs-containers","title":"Resizing APFS containers","text":"<p>After deleting Asahi Linux, you could re-install it again (no need to use the resize option in the installer). But if you want to grow macOS to use the full size of the disk again, use either of these:</p> <p><code>diskutil apfs resizeContainer disk0s2 0</code></p> <p><code>diskutil apfs resizeContainer disk3 0</code></p> <p>Again, you can use the physical partition identifier or the logical disk number. They are equivalent. The <code>0</code> means resize to fill all available free space after the partition. If instead you want to expand/shrink to a given size, specify it there, e.g. <code>100GB</code>.</p> <p>Please note that running this command might momentarily freeze your macOS terminal. Do not panic and let it run for a few minutes.</p>"},{"location":"sw/partitioning-cheatsheet/#storage-system-verify-or-repair-failed","title":"<code>Storage system verify or repair failed</code>","text":"<p>If you get this error during the APFS resize operation, it means you have latent APFS filesystem corruption. This problem is caused by bugs in Apple's APFS drivers, not Asahi Linux (which does not touch APFS partitions at all). To fix it, boot into recoveryOS (this will not work from macOS), then run the following command (substituting disk0s2 for your APFS container disk name, as above):</p> <p><code>diskutil repairVolume disk0s2</code></p> <p>If this complains about \"encrypted and locked volumes\", you will have to run <code>diskutil apfs unlockVolume &lt;diskName&gt;</code> on every FileVault-protected macOS volume in your system. Run <code>diskutil apfs list</code> and look for <code>FileVault: Yes (locked)</code> to identify them. You may safely skip System volumes (only Data volumes need to be unlocked). Then, retry the <code>diskutil repairVolume</code> operation.</p> <p>Finally, retry the resize operation after the repair successfully completes.</p> <p>If this does not repair your volume successfully and the resize operation still fails, unfortunately, there is no known solution other than a complete wipe and reformat of the macOS volume (losing all data). The Asahi Linux project cannot offer bugfixes or support for Apple's own system drivers and tools. If you find a reproducible way of causing APFS corruption, please report it directly to Apple.</p>"},{"location":"sw/partitioning-cheatsheet/#addendum-mounting-efi-partition","title":"Addendum: Mounting EFI partition","text":"<p>There are two methods to mount the EFI partition. The first one is this:</p> <pre><code>diskutil list\ndiskutil mount disk0s4\nmount\ncd /Volumes/...\n</code></pre> <p>The second one is this:</p> <pre><code>mkdir /Volumes/efi\nmount -t msdos /dev/disk0s4 /Volumes/efi\n</code></pre>"},{"location":"sw/profiling/","title":"Profiling Linux Software","text":"<p><code>perf stat</code> works on Asahi Linux on bare metal, using Apple's proprietary performance counters (which are supported in the kernel).</p> <p>Since this is a big.LITTLE system, there are some caveats. Profiling across core types is confusing, so you should pin your task to one core type. And since performance counters can differ per core type, you have to explicitly qualify counters with the core type when you specify them.</p> <p>For example, to profile <code>echo</code> on core 4 (a big Firestorm core on all M1 variants):</p> <pre><code>$ taskset -c 4 perf stat -e apple_firestorm_pmu/cycles/ -e apple_firestorm_pmu/instructions/ echo\n\nPerformance counter stats for 'echo':\n\n        116,874      apple_firestorm_pmu/cycles/u                                   \n        181,687      apple_firestorm_pmu/instructions/u\n\n    0.000352959 seconds time elapsed\n\n    0.000000000 seconds user\n    0.000357000 seconds sys\n</code></pre> <p>On core 0 (a LITTLE Icestorm core on all M1 variants):</p> <pre><code>$ taskset -c 0 perf stat -e apple_icestorm_pmu/cycles/ -e apple_icestorm_pmu/instructions/ echo\n\nPerformance counter stats for 'echo':\n\n        185,564      apple_icestorm_pmu/cycles/u                                   \n        181,669      apple_icestorm_pmu/instructions/u\n\n    0.000491126 seconds time elapsed\n\n    0.000510000 seconds user\n    0.000000000 seconds sys\n</code></pre> <p>Note how Icestorm gets ~1 IPC while Firestorm gets ~1.6 IPC in this example; this is why you have to pin your tasks to get meaningful numbers. You can technically not pin your task and specify all counters, and then you will get independent counts for how many cycles/instructions were spent on each core type (aggregated across all cores of that type). Whether this is actually useful to anyone is unclear.</p> <p>This will never work in a VM, because Apple do not support the standard ARM performance counters (they use a custom PMU) and they do not expose proprietary features to VM guests (and nor will KVM/qemu for that matter). But it does work on bare metal (and on the m1n1 hypervisor, though benchmarking on it is probably a very bad idea).</p> <p>You can also get more counters other than cycles/instructions, by specifying the raw event IDs. These are not currently mapped to friendly names in Linux, but you can use <code>r&lt;hex ID&gt;</code>. Dougall has documented a bunch of them here. For example, to get DCACHE_LOAD_MISS:</p> <pre><code>$ taskset -c 4 perf stat -e apple_firestorm_pmu/rbf/ echo\n\nPerformance counter stats for 'echo':\n\n            3,136      apple_firestorm_pmu/rbf/u\n\n    0.000288042 seconds time elapsed\n\n    0.000301000 seconds user\n    0.000000000 seconds sys\n</code></pre> <p>Note that it is not guaranteed that all of these will be the same across big/LITTLE cores, and some will differ with newer core types.</p>"},{"location":"sw/sonoma-display-bug/","title":"macOS Sonoma Display Bug","text":""},{"location":"sw/sonoma-display-bug/#critical-update","title":"CRITICAL UPDATE","text":"<p>With macOS 14.1.1, 14.2 beta 2, and (likely) 13.6.2, Apple \"fixed\" the bug by making the ProMotion setting not change the boot-time screen mode.</p> <p>Unfortunately, they forgot to actually reset the boot-time screen mode to the safe (ProMotion) setting, which means that affected users who upgrade with ProMotion disabled are now forever stuck in a broken state. To make things worse, we have no idea how to detect this condition preemptively in macOS.</p> <p>To make matters even worse, Apple are still not forcing a System Recovery roll-forward to 14.x, which means the vast majority of users will be in the worst-case dangerous state where, if the bug occurs, no recovery is possible.</p> <p>We still expect Apple to fix this properly in a future version, but we don't have the slightest idea how they thought this interim \"fix\" was a good idea. It just makes things even more confusing and silently deadly for affected users.</p> <p>As a result of this update, we are now outright blocking Asahi Linux installs on the subset of affected systems with outdated System Recovery (likely the vast majority of users with 14\" and 16\" machines and up to date macOS), for safety reasons. Sorry. We tried, but we're giving up on trying to patch over the issue on our side or detect the problem cases ahead of time for our users. Apple broke this, only Apple can fix it, and they need to fix it the right way. There is nothing else we can do.</p> <p>The only workaround at this time is to do a preemptive DFU Revive using another Mac, which will force an upgrade of System Recovery and at least leave your system with a functional fail-safe. The problem might still occur while installing Asahi in this case, but at least you will be able to return to macOS (if this happens, you're still stuck without Asahi until Apple fixes this though). The installer will allow installation for users with an up to date System Recovery, with a warning.</p>"},{"location":"sw/sonoma-display-bug/#what-happened","title":"What happened?","text":"<p>Update 2023-11-09: Apple have released Ventura 13.6.2 with a claimed fix for this bug. At this point, we believe this is an interim fix to work around the worst case situation affecting single-boot Ventura users (see the last section of this document), and NOT yet a complete fix. Multi-boot and (to a lesser extent) Asahi Linux users are still affected in the same way. We expect a major/complete fix will likely arrive with the Sonoma 14.2 release (currently in beta, not yet fixed in beta 1).</p> <p>Update: We have made changes to the Asahi Installer, to our bootloader m1n1, and to asahi-nvram. At this time, we believe installing or having installed Asahi should not introduce any additional danger over a plain vanilla Sonoma upgrade on a single-boot machine.</p> <p>macOS Sonoma and macOS Ventura 13.6 were released with multiple serious bugs in their upgrade and boot process. Combined, these bugs can create conditions where a machine always boots to a black screen, no matter what power button press combination is used. This leaves users stuck, and the only solution is to use DFU recovery.</p> <p>This bug can affect users both with and without Asahi Linux installed.</p> <p>This situation can happen with certain settings on certain models, when multiple macOS versions are installed side by side (one Sonoma, one earlier). Since Asahi Linux behaves as if it were macOS 12.3/12.4/13.5 (depending on model and installation time), dual-boot installs of macOS Sonoma and Asahi Linux have the same effect. For macOS 13.6, this situation doesn't even require a dual-boot system, and can be triggered stand-alone as the only installed OS.</p> <p>We have updated the Asahi Linux installer to automatically perform an integrity check and diagnose your system on startup. To run it, paste this command into Terminal in macOS:</p> <p><code>curl https://alx.sh | sh</code></p> <p>You can quit the installer once you reach the main menu, without making any changes to your system.</p> <p>Apple bug reports: FB13319681 and FB13319708 and FB13313702 </p>"},{"location":"sw/sonoma-display-bug/#what-are-the-bugs-exactly","title":"What are the bugs exactly","text":"<p>There are two bugs:</p> <ul> <li> <p>macOS Sonoma upgrades use the previously installed version as System Recovery. This makes some sense, but does not consider backwards compatibility problems between older RecoveryOS and newer firmware. If this mismatch causes recoveryOS to fail to boot, this will leave System Recovery unusable.</p> </li> <li> <p>For 14\" and 16\" models: Once System Firmware is updated to the macOS Sonoma version, if the display is configured to a refresh rate other than ProMotion, that system will no longer be able to boot into older macOS installs nor Asahi Linux correctly. This includes recovery mode when those systems are set as the default boot OS, and also System Recovery at least until the next subsequent OS upgrade. *</p> </li> </ul> <p>* Asahi Linux in particular will, somewhat amusingly, still boot to a login screen in this case, but the bootloader output (U-Boot / GRUB) will not be visible. This is because our Linux display driver can fortuitously recover from the misconfigured display scenario, while the macOS driver can't. Nonetheless, you'll still be in trouble, as you won't be able to use the Boot Picker (which is recoveryOS) to switch back to macOS.</p>"},{"location":"sw/sonoma-display-bug/#what-happens-if-i-get-hit-by-the-bug-will-i-lose-data","title":"What happens if I get hit by the bug? Will I lose data?","text":"<p>You will need another Mac to recover from the fault using DFU mode. However, you will not lose data.</p>"},{"location":"sw/sonoma-display-bug/#what-machines-are-affected","title":"What machines are affected?","text":"<p>MacBook Pro models with ProMotion displays (14\" and 16\") are affected by the black screen boot bug.</p>"},{"location":"sw/sonoma-display-bug/#what-versions-are-affected","title":"What versions are affected?","text":"<ul> <li>macOS Sonoma 14.0+ (not fixed as of 2023-10-31)</li> <li>macOS Ventura 13.6+ (uses 14.0 firmware)</li> <li>macOS Monterey 12.7 (unclear, some reports of 13.6 and some of 14.0 firmware, assume it's affected just in case)</li> </ul> <p>IMPORTANT UPDATE: We have just learned that the standard software update process will always upgrade to the latest firmware version, even when you request a specific macOS version manually. For this reason, ALL macOS upgrades performed after the release of macOS Sonoma are affected, regardless of target version. Installing older versions will silently download Sonoma firmware.</p>"},{"location":"sw/sonoma-display-bug/#what-should-i-do","title":"What should I do?","text":""},{"location":"sw/sonoma-display-bug/#i-have-not-upgraded-to-macos-sonoma-or-macos-ventura-136-yet-and-i-want-to","title":"I have not upgraded to macOS Sonoma (or macOS Ventura 13.6) yet and I want to","text":"<p>We recommend waiting until these issues are fixed by Apple before upgrading. If you want to risk it and you have a 14\" or 16\" machine, make sure the display refresh rate is set to ProMotion before attempting the upgrade. You might still end up with a corrupted System Recovery, which can only be fixed with DFU mode or a subsequent successful upgrade.</p> <p>Regardless of whether you plan to install Asahi Linux or not, we recommend running the Asahi Linux installer after a Sonoma upgrade to check the status of your System Recovery partition. It will inform you about any issues prior to the main menu, before any changes are made to your system.</p> <p>If you just want to install Asahi Linux: macOS 13.5 is safe to upgrade to. To download an installer for 13.5 specifically, run <code>softwareupdate --fetch-full-installer --full-installer-version 13.5</code>. Don't forget to delete the installer once you're done with the upgrade, to save disk space.</p>"},{"location":"sw/sonoma-display-bug/#i-have-not-upgraded-to-macos-sonoma-or-macos-ventura-136-yet-and-im-in-no-rush","title":"I have not upgraded to macOS Sonoma (or macOS Ventura 13.6) yet and I'm in no rush","text":"<p>Feel free to stay on macOS version 13.5 or earlier for the time being. You can safely install Asahi Linux if you wish.</p>"},{"location":"sw/sonoma-display-bug/#i-have-already-upgraded-to-macos-sonoma-and-i-want-to-install-asahi-linux","title":"I have already upgraded to macOS Sonoma and I want to install Asahi Linux","text":"<p>The Asahi Linux installer has been updated to check the version of your System Recovery, and will inform you of the risks if there is a mismatch. It will also check the ProMotion refresh rate, and refuse to install if it is set to anything other than ProMotion mode. Therefore, it is safe to install at this time.</p> <p>Start the installation process normally. Follow the prompts carefully and read all the information printed. If your System Recovery version is mismatched, make sure you understand the risks. If your display refresh rate is incorrect, the installer will ask you to change it.</p>"},{"location":"sw/sonoma-display-bug/#i-have-already-upgraded-to-macos-sonoma-and-i-have-asahi-linux","title":"I have already upgraded to macOS Sonoma and I have Asahi Linux","text":"<p>If you are currently booted into macOS, ensure the display refresh rate is set to ProMotion (for 14\" and 16\" machines).</p> <p>We recommend running the Asahi Linux installer again to verify the integrity of your System RecoveryOS partition and ProMotion status. If there is a problem, you should refrain from making any major changes to your system until the issue is fixed by Apple.</p>"},{"location":"sw/sonoma-display-bug/#i-am-affected-to-the-issue-what-do-i-do","title":"I am affected to the issue, what do I do?","text":"<p>If your machine boots to a black screen (brief Apple logo, then nothing), first attempt a regular recoveryOS boot by fully powering down the machine, then holding down the power button.</p> <p>If that does not work, try booting into System RecoveryOS. To do this, fully power down the machine, and then perform a fast \"tap-and-hold\" power button gesture (press and release once, then press and hold).</p> <p>Update: If you are stuck in Asahi Linux (the above steps don't work to get to a boot picker to switch to macOS, but your machine otherwise boots normally into Asahi), you should be able to use <code>asahi-bless</code> (available in Fedora) to switch back to Sonoma directly from Linux and resolve the problem..</p> <p>If that also does not work, unfortunately you will have to resort to DFU mode. See the following section for details.</p> <p>If you can successfully reach a boot menu, select your macOS Sonoma install and hold down Option while confirming your selection to make it the default boot OS. If you have macOS 13.6 ventura instead, follow the special section below.</p>"},{"location":"sw/sonoma-display-bug/#how-do-i-fix-my-machine-with-dfu-mode","title":"How do I fix my machine with DFU mode?","text":"<p>First, you will need another Mac running a recent version of macOS (an Intel Mac is OK). Install Apple Configurator from the App Store on the other Mac and open it.</p> <p>Follow Apple's instructions to connect your two machines together, and put your target machine in DFU mode. The target machine's display should remain off at this point.</p> <p>You should see a large \"DFU\" icon in Apple Configurator. If you see anything else, the machine is not in the correct mode. Repeat the procedure and try again.</p> <p>Once you see the DFU icon, right click it and select Advanced \u2192 Revive. This will begin the revive process.</p> <p>If you get a message saying \"A system update is required for this device\", you can ignore it and press \"Restore Anyway\". This process has been tested with another Mac running macOS 13.5.</p> <p>Follow the prompts and accept any accessory connection requests. Do not leave the machine unattended, as you might miss one of those prompts (and there is a timeout). The process will take a few minutes to complete.</p> <p>Once the Revive process completes, the machine should boot into macOS Recovery. Follow the prompts and authenticate yourself.</p> <p>After this, the machine will reboot into the Boot Picker.</p> <p>If you have macOS 13.6 ventura instead, follow the special section below.</p> <p>Select your macOS Sonoma install, then go into the Display settings page and set the display refresh rate to ProMotion. This will prevent the problem from reoccurring.</p> <p>Should you wind up with a \"black screen boot\" again after this point, follow the steps in the previous section to perform the \"tap-and-hold\" power gesture. This should now work properly, as your System RecoveryOS has been updated. You may then select macOS again and fix the display refresh rate.</p>"},{"location":"sw/sonoma-display-bug/#i-dont-have-another-mac-to-use-dfu-mode-what-do-i-do","title":"I don't have another Mac to use DFU mode! What do I do?","text":"<p>You can take your Mac to the Apple Store and ask them to do a DFU Revive. Make sure they do not do a Restore, which would wipe all your data. They should perform this service for free. Do not let them charge you any money for it. This is a problem Apple caused, and purely a software issue. If the technicians claim there is hardware damage, they are wrong.</p>"},{"location":"sw/sonoma-display-bug/#what-if-i-have-macos-136-ventura-and-not-sonoma","title":"What if I have macOS 13.6 Ventura and not Sonoma?","text":"<p>macOS 13.6 Ventura uses the macOS Sonoma System Firmware, but suffers from the problem. Even users with just 13.6 installed single-boot are affected by this issue (no Asahi Linux needed). We do not understand how Apple managed to release an OS update that, when upgraded to normally, leaves machines unbootable if their display refresh rate is not the default. This seems to have been a major QA oversight by Apple.</p> <p>If your system has 13.6 Ventura and ended up in the black boot situation, unfortunately the only known solution is to upgrade to Sonoma. From the Boot Picker, select Options. This will boot into recoveryOS. From there, select \"Install macOS Sonoma\". Follow the prompts and select your existing macOS volume. This will upgrade macOS without losing your data.</p>"},{"location":"sw/speaker-stress-tests/","title":"Speaker stress tests","text":"<ul> <li>Laufey - From The Start - good bankstown test case, bass/guitar really stress the behavior</li> <li>J.Geco - Chicken Song - Konrad said this damaged a ThinkPad X13s's speakers... we seem to do okay but it's definitely something</li> <li>I Won The Loudness War - Speaker torture. Do not crank stream volume to 100% unless you're an Asahi developer and you have AppleCare. This is not supposed to damage anything, but seriously, leave it to the developers to risk this one please.</li> <li>\u53ef\u611b\u304f\u3066\u3054\u3081\u3093 feat. \u3061\u3085\u30fc\u305f\u3093\uff0fHoneyWorks - Messy bass, after a while speakersafetyd limits somewhat even at YouTube normalized volume (on J313). Probably hitting bankstown / the 200 Hz band too much, might be clipping?</li> <li>KZ5 - SUBWOOFA (In Him) MkII - Brings bankstown to its knees, good test for overexcursion and overzealous compression.</li> </ul>"},{"location":"sw/tethered-boot-macos-host/","title":"Tethered boot macos host","text":""},{"location":"sw/tethered-boot-macos-host/#title-tethered-boot-macos-host-machine","title":"title: Tethered Boot: macOS host machine","text":""},{"location":"sw/tethered-boot-macos-host/#macos-hosted-tethered-boot-setup","title":"macOS-hosted tethered boot setup","text":"<p>This guide will give more details about tethered boot prerequisites setup for a macOS host.</p>"},{"location":"sw/tethered-boot-macos-host/#macos-host","title":"macOS host","text":"<p>Host's requirements:</p> <ul> <li>Any Apple computer running a decently recent MacOs version<ul> <li>Enough disk space on the host for installing and compiling software</li> <li>a free USB port on the host</li> <li>a USB-A/USB-C or USB-C/USB-C cable</li> <li>prerequisites installed</li> </ul> </li> </ul> <p>Tested with:</p> <ul> <li>iMac 27' late 2015 running  macOs Big Sur 11.7 (20G817)</li> </ul>"},{"location":"sw/tethered-boot-macos-host/#serial-port-setup","title":"Serial port setup","text":"<p>On macOs m1n1 UART device names are different from those of a Linux host (<code>/dev/m1n1</code> and <code>/dev/m1n1-sec</code> on Linux). Typically device names looks like:</p> <ul> <li><code>/dev/cu.usbmodemP_01</code> for the primary UART device used by m1n1 propy client</li> <li><code>/dev/cu.usbmodemP_03</code> for the secondary UART device used to hook into the m1n1 hypervisor early when the tethered machine boots</li> </ul> <p>Beware that devices names might change on your particular machine or configuration, if in doubt check how you can find actual device names.</p>"},{"location":"sw/tethered-boot-macos-host/#activate-m1n1-backdoor","title":"Activate m1n1 backdoor","text":"<p>Shutdown (powered-off state) and connect the USB cable to the target machine and then issue the following command on the host:</p> <pre><code>~/asahi/m1n1/proxyclient/tools/picocom-sec.sh\n</code></pre> <p>Now start the tethered machine. The <code>picocom-sec.sh</code> script waits for the device and connect to it once it appears, that will trigger m1n1 hypervisor backdoor and you should see some output on the terminal:</p> <pre><code>picocom v3.1\n\nport is        : /dev/cu.usbmodemP_03\nflowcontrol    : none\nbaudrate is    : 500000\n:\n:\n</code></pre> <p>From now on m1n1 hypervisor is ready to accept command through m1n1 proxy client tools:</p> <pre><code>$ python3 ~/asahi/m1n1/proxyclient/tools/shell.py\n:\n:\nTTY&gt; Waiting for proxy connection... . Connected!\nFetching ADT (0x00058000 bytes)...\nm1n1 base: 0x802848000\nHave fun!\n&gt;&gt;&gt;\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#find-actual-device-names","title":"Find actual device names","text":"<p>Install <code>pyserial</code> and issue the following command (make sure the target machine is plugged to the host):</p> <pre><code>while : ; do pyserial-ports ; sleep 1 ; done\n</code></pre> <p>Cold-boot (from powered-off state) the tethered machine and wait for new devices to appear: note down the device names (the one with the lower number should be the main m1n1 UART device and the other one the m1n1).</p>"},{"location":"sw/tethered-boot-macos-host/#installing-prerequisite-software","title":"Installing prerequisite software","text":""},{"location":"sw/tethered-boot-macos-host/#installing-homebrew","title":"Installing Homebrew","text":"<p>The prefered way to install software on your macOS host is by using the <code>homebrew</code> package manager, this is the matter of running a simple chell command.</p> <p>Open a terminal window (press <code>[Cmd]</code>+<code>[Space]</code> keys, then type <code>iterm</code>, then press <code>[enter]</code>) then type the following command (refer to Homebrew web site if in doubt):</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#installing-python-39","title":"Installing Python &gt;= 3.9","text":"<p>macOS bundles Python 3.8 but Python 3.9 or later is required for the m1n1 scripting part that runs on the host and puppeteers the m1n1 hypervisor on the tethered machine:</p> <pre><code>brew install python3\n</code></pre> <p>Check that you are able to access the desired python executable and that you get the minimum required version:</p> <pre><code>$ type python3\npython3 is /usr/local/bin/python3\n$ python3 --version\nPython 3.10.8\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#installing-llvm","title":"Installing LLVM","text":"<p>You'll need a C compiler to build m1n1 and its dependencies, and for building kernel too. LLVM is the recommended compiler for Asahi (I think ?):</p> <pre><code>brew install llvm\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#installing-pyserial","title":"Installing pyserial","text":"<p>Pyserial is required for m1n1 and can help identify the name of the serial port device exposed by macOS when m1n1 boots:</p> <pre><code>pip3 install pyserial construct serial.tool\n</code></pre> <p>Check <code>pyserial-ports</code> is installed:</p> <pre><code>$ type pyserial-ports\npyserial-ports is /usr/local/bin/pyserial-ports\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#installing-picocom","title":"Installing picocom","text":"<p>A serial port communication software is required to establish communication with m1n1 proxy. We recommend installing <code>picocom</code> for use as a serial terminal, which is available with homebrew:</p> <pre><code>brew install picocom\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#installing-img4tool-optional","title":"Installing img4tool (optional)","text":"<p>Either use Homebrew Tap or install it manually</p>"},{"location":"sw/tethered-boot-macos-host/#use-homebrew-tap","title":"Use Homebrew tap","text":"<p>I created a tap to ease installation through Homebrew, just add the tap and install:</p> <pre><code>brew tap aderuelle/homebrew-tap\nbrew install img4tool\n</code></pre>"},{"location":"sw/tethered-boot-macos-host/#install-manually","title":"Install manually","text":"<p>If you intend to boot a stock macOS kernel, you'll need these tools to extract the actual kernel file from the kernlecache of a macOS install on the target machine. In the absence of precompiled version for macOS you'll have to compile it.</p> <p>For this step, setup a <code>asahi</code> folder in your home directory and clone everything there, additionally install everything in an <code>~/asahi/deps</code> folder so as to not mess up with the rest of the system.</p> <p>First clone, build and install <code>libgeneral</code></p> <pre><code>cd ~/asahi\ngit clone https://github.com/tihmstar/libgeneral.git\ncd libgeneral\n./autogen.sh\n./configure --prefix=/Users/alexis/asahi/deps\nmake &amp;&amp; make install\n</code></pre> <p>Then clone, build and install <code>img4tool</code></p> <pre><code>cd ~/asahi\ngit clone https://github.com/tihmstar/img4tool.git\ncd img4tool\n./autogen.sh\nPKG_CONFIG_PATH=~/asahi/deps/lib/pkgconfig ./configure --prefix=~/asahi/deps\nmake &amp;&amp; make install\n</code></pre> <p>Update your <code>PATH</code> variable so that you're able access <code>img4tool</code> binary</p> <pre><code>export PATH=~/asahi/deps/bin:$PATH\n</code></pre>"},{"location":"sw/tethered-boot/","title":"Tethered Boot","text":""},{"location":"sw/tethered-boot/#introduction","title":"Introduction","text":"<p>This guide will walk you through the steps required to set up your Apple Silicon Mac for booting a Linux kernel in a dual boot environment with macOS.</p> <p>This guide is intended specifically for kernel developers and advanced users who wish to assist in testing patches in the <code>asahi</code> branch. Building a kernel is outside the scope of this guide. If you are here, you should be capable of building an AArch64 kernel by yourself. A somewhat sane <code>.config</code> can be found here. Keep in mind that m1n1 expects a gzipped kernel image, your target machine's Device Tree, and will also optionally take a gzipped initramfs.</p>"},{"location":"sw/tethered-boot/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>An Apple Silicon Mac with at least macOS 12.3 installed and configured<ul> <li>You must have a password-protected administrator account. Typically, this will be the first account you created when setting up the machine for the first time.</li> <li>These days it is somewhat complex to install a specific version of macos, as you can't start an installer for old version from a new one, and performing a recovery install from usb transparently updates you to the latest minor version of that major macos version instead. If you want a specific version, install any release of a previous major version via usb recovery, then update it to the target version.</li> </ul> </li> <li>A host machine of any architecture running a GNU/Linux distribution (macOS is also supported, but less well tested see Tethered Boot Setup on macOS)<ul> <li>Both <code>GCC</code> and <code>Clang/LLVM</code> AArch64 cross-toolchains are supported.</li> </ul> </li> </ul> <p>If you are interested in low-level access to the SoC via its debug UART, you will also require a real, physical serial port solution. See Serial Debug for more information on this. This is not necessary for general kernel development or reverse-engineering, and most developers will find the virtual serial port offered by the m1n1 hypervisor to be adequate for everything (unless you're debugging KVM and can't use it).</p>"},{"location":"sw/tethered-boot/#preparation-steps","title":"Preparation steps","text":"<p><code>m1n1</code> is our Apple Silicon playground/hypervisor/bootloader and is required to boot a Linux kernel or U-Boot. In order to work with <code>m1n1</code> tooling, ensure that your machine has Python 3.9 or later installed, as well as <code>pip</code>. To get the Python modules required for interacting with <code>m1n1</code>, run</p> <pre><code>pip3 install --user pyserial construct serial.tool\n</code></pre> <p>Then, clone the <code>m1n1</code> git repo and build it.</p> <pre><code>git clone --recursive https://github.com/AsahiLinux/m1n1.git\ncd m1n1\nmake\n</code></pre> <p>If you are on a native aarch64 machine, use <code>make ARCH=</code> instead.</p> <p>Install the udev rules into <code>/etc/udev/rules.d</code> to get pretty device names for m1n1. You may have to add your user to a specific group (e.g. <code>uucp</code>) to get non-root access to the devices, or otherwise modify the udev rules to change the device permissions.</p> <p>We also recommend installing <code>picocom</code> for use as a serial terminal, which should be available in your distro's package repository.</p>"},{"location":"sw/tethered-boot/#installing-m1n1-on-your-apple-silicon-mac","title":"Installing m1n1 on your Apple Silicon Mac","text":"<p>You can use the public Asahi Linux installer to install it. Open up a macOS terminal and run:</p> <pre><code>curl https://alx.sh | sh\n</code></pre> <p>Follow the prompts to choose your desired installation mode. You can opt to install one of the Fedora Asahi Remix images, or the UEFI only option to get just m1n1+u-boot, which will boot UEFI executables off of a USB drive (or off of the internal storage, once installed). Installation of your preferred rootf/kernel is left as an exercise for the reader in that case.</p> <p>Alternatively, if you enable expert mode in the installer, you can opt to install m1n1 in tethered-only proxy mode. In this case, you can skip the next section, as your m1n1 will already (unconditionally) boot in proxy mode.</p>"},{"location":"sw/tethered-boot/#enabling-the-backdoor-proxy-mode","title":"Enabling the backdoor proxy mode","text":"<p>m1n1 consists of two stages. Stage 1 is installed during the 1TR step of the installation (after the first reboot into macOS recovery) and cannot be modified without a trip through recovery. Stage 2 is loaded from the EFI system partition at <code>m1n1/boot.bin</code>, and can be updated by distributions to add new features and hardware support. Release builds of stage 1 have a backdoor proxy mode, which allows for optional tethered boot. This has to be enabled from 1TR, and requires machine authentication for security.</p> <p>We use the SIP (System Integrity Protection) disable flag applied to the Asahi Linux volume to control this mode. On macOS volumes this normally disables certain kernel security features, while m1n1 uses it to signal that it should enable the backdoor proxy mode if the system is booting in verbose mode. This change is per-OS, so doing it for the Asahi/m1n1 volume will not affect any macOS installs.</p> <p>To enable this mode, first ensure that m1n1 / Asahi Linux is the default boot volume (this will be the case after a fresh install), then boot the machine by holding down the power button from a fully shut down state until \"Loading startup options...\" appears. Select \"Options\", enter your macOS machine owner credentials if prompted, then click on the Utilities menu and open a Terminal window.</p> <p>From there, run:</p> <pre><code>csrutil disable &amp;&amp; nvram boot-args=-v\n</code></pre> <p>Select your Asahi Linux volume when prompted, and authenticate yourself when prompted. Once this is done, shut down the machine. If you get a pairing error, that means the default boot OS does not match the OS you are making the change for (you can only downgrade the security settings for the default boot OS, as that controls which recoveryOS boots).</p> <p>In this mode, m1n1 will wait for 5 seconds on boot. If a USB connection is detected and the corresponding TTY device (either of the two) is opened in the host machine, it will abort the regular boot process and go into proxy mode. This allows you to boot in tethered mode when needed, while letting the machine boot stand-alone otherwise.</p>"},{"location":"sw/tethered-boot/#establishing-the-usb-connection","title":"Establishing the USB connection","text":"<p>Connect your host and target with a USB Type C cable (any reasonable cable should work). Make sure you use a Thunderbolt port on the target, for machines with non-TB ports (e.g. some iMac and some Mac Studio variants). You can also use a C to A cable, with the A side on your host. We recommend also connecting a charge cable to another port on your target.</p> <p>On your host machine, pull up a terminal window and run <code>proxyclient/tools/picocom-sec.sh</code>. This will wait until a m1n1 device connects, then open its secondary USB device as a serial terminal. This serves two purposes: to break into proxy mode (see the previous section), and also will be your virtual serial console when you run kernels under the hypervisor.</p> <p>Once that script is running and the machines are connected, boot your target device. m1n1 will break into proxy mode. Confirm that this works by running <code>proxyclient/tools/shell.py</code>, which will drop you into an interactive Python shell (exit with ^D).</p>"},{"location":"sw/tethered-boot/#booting-a-kernel-directly","title":"Booting a kernel directly","text":"<p>To boot a Linux kernel, use this command:</p> <pre><code>python3 proxyclient/tools/linux.py -b 'earlycon debug rootwait root=/dev/nvme0n1p5 &lt;other args&gt;' /path/to/Image.gz /path/to/t6000-j314s.dtb [optional initramfs]\n</code></pre> <p>In this example, we pass <code>m1n1</code> a gzipped kernel, and the Device Tree for the 14\" MacBook Pro with M1 Pro SoC, telling it to mount /dev/nvme0n1p5 as the root filesystem. Keep in mind that the order of arguments you pass to <code>linux.py</code> matters -- you must pass it the kernel first, Device Tree second, and optionally an initramfs last. If all goes well, you should see penguins in the framebuffer.</p> <p>If you are using the Asahi Linux (Arch Linux ARM) rootfs, for tethered boot we recommend a kernel with modules disabled (all built-in). You can ignore the Arch Linux initramfs, but you should instead provide an initramfs with <code>/lib/firmware/{brcm/apple}</code> to make sure the built-in modules can find their firmware early. Then, just pass <code>root=/dev/nvme0n1p5</code> (substitute whatever your rootfs partition number is; 5 is the typical number for vanilla installs) to boot directly into the system.</p>"},{"location":"sw/tethered-boot/#booting-a-kernel-under-the-hypervisor","title":"Booting a kernel under the hypervisor","text":"<p>Use this utility script to properly boot a Linux kernel under the m1n1 hypervisor:</p> <pre><code>tools/run_guest_kernel.sh /path/to/linux/build/dir 'earlycon rootwait root=/dev/nvme0n1p5' [optional initramfs]\n</code></pre> <p>Note that the script expects the path to the Linux build tree (i.e. the directory where <code>.config</code> and <code>Makefile</code> are). It will pick out the kernel and corresponding device trees from within.</p> <p>This will:</p> <ul> <li>Build a guest image with m1n1, the desired kernel, the command line, initramfs if any, and all available device trees from the kernel tree (m1n1 will autoselect the correct one)</li> <li>Chainload a plain m1n1 binary first, to ensure the target machine is running a version that matches the m1n1 tree/tools in the host (since the proxy ABI is not stable)</li> <li>Boot the guest image under the hypervisor</li> </ul> <p>m1n1 will first load as a guest inside m1n1 (inception!), and the inner guest will then load the embedded kernel and initramfs. You should see the guest m1n1 debug output and the kernel console in the secondary terminal you started earlier (with <code>picocom-sec.sh</code>).</p> <p>Note that if you use an initramfs with this script, it must be gzipped (and be a single gzipped image - concatenate then gzip, don't gzip then concatenate). This is due to limitations of how m1n1 handles embedded payloads.</p> <p>You can use ^C in the hypervisor console to break into the guest. The script automatically loads <code>System.map</code>, so you can use the <code>bt</code> command to get a stack trace with symbols. Try <code>cpu(1)</code> (etc.) to switch between guest CPUs, <code>ctx</code> to print execution context, <code>reboot</code> to force a hard system reboot, or <code>cont</code> (or just ^D) to resume execution.</p> <p>Debugging with GDB or LLDB to get source line location, to investigate structs, etc, is also possible. Run <code>gdbserver</code> command in the hypervisor console, and connect GDB/LLDB to <code>/tmp/.m1n1-unix</code> UNIX domain socket. There are some caveats with gdbserver: - GDB lacks with in-kernel pointer-authentication support. Disable <code>CONFIG_ARM64_PTR_AUTH_KERNEL</code> or use LLDB to avoid problems with pointers. - Do not run hypervisor console commands interfering with GDB/LLDB, or they will be out-of-sync. For example, do not edit breakpoints from both of hypervisor console and GDB/LLDB at the same time.</p>"},{"location":"sw/u-boot/","title":"Das U-Boot","text":"<p>U-Boot is the default payload for m1n1 stage 2, and is used to provide a standard preboot environment familiar to AArch64 developers. External boot is not supported with the native Apple Silicon boot tooling, making U-Boot a hard necessity for providing a PC-like boot environment. This page explains how we use U-Boot and how to manually build and install it. It is assumed that you are working on an Apple Silicon machine using a well-supported distro.</p> <p>Do note that the process for building and installing U-Boot listed here is for documentation and development purposes only. If you are an Asahi user and not interested in hacking on U-Boot or m1n1, they are managed automatically via <code>pacman</code>.</p>"},{"location":"sw/u-boot/#standard-boot-flow","title":"Standard boot flow","text":"<p>We make use of U-Boot's UEFI implementation to load and execute a UEFI binary located at <code>/EFI/BOOT/BOOTAA64.EFI</code>  on the paired EFI System Partition. The default payload for Asahi installs is GRUB. U-Boot passes GRUB a pointer  to the FDT automatically.</p>"},{"location":"sw/u-boot/#alternative-arrangements","title":"Alternative arrangements","text":"<p>The default U-Boot script can be interrupted at runtime to manually alter the boot flow. This allows the user to do things like boot off external media, execute arbitrary UEFI code, load and jump to a kernel directly, et cetera. </p>"},{"location":"sw/u-boot/#known-issues","title":"Known issues","text":"<ul> <li>USB-A ports on machines with them will not work due to their controller requiring firmware which we cannot redistribute</li> <li>Ditto the two USB Type-C ports furthest from the power cable on the iMacs, and the two front facing ports on the M1 Max Mac Studio.</li> <li>Certain USB devices which expose multiple functions (hubs with NICs, fancy gaming keyboards, etc.) do not work.</li> <li>USB hubs with integrated SD card readers will cause your machine to hard reset if the slot is empty. The fix for this is queued.</li> </ul>"},{"location":"sw/u-boot/#prerequisites","title":"Prerequisites","text":"<ul> <li>An Apple Silicon machine running Asahi</li> <li>A clean build of m1n1, see the m1n1 User Guide</li> <li>The Apple DTBs from <code>AsahiLinux/linux</code>. Compiling these is out of scope for this document.</li> <li>The Asahi EFI System Partition mounted at <code>/boot/efi/</code>.</li> </ul>"},{"location":"sw/u-boot/#building","title":"Building","text":"<ol> <li>Clone the <code>AsahiLinux/u-boot</code> repository.</li> <li><code>make apple_m1_defconfig</code></li> <li><code>make -j$(nproc)</code></li> </ol> <p>Do not be fooled by the name of the defconfig, it will build support for all Apple Silicon machines, not just the M1. You may tinker with the config, however try not to play around with Apple-specific stuff as most (all) of it is absolutely necessary just to cleanly boot. </p> <p>You may also build using Clang/LLVM.</p>"},{"location":"sw/u-boot/#installing","title":"Installing","text":"<p>Installing your build of U-Boot involves creating a new stage 2 of m1n1, which is why we require a clean build of m1n1 and the DTBs. Make a backup of <code>/boot/efi/m1n1/boot.bin</code>, then concatenate m1n1, the DTBs and U-Boot. This must be run as root.</p> <pre><code>cat build/m1n1.bin /path/to/dtbs/*.dtb &lt;(gzip -c /path/to/uboot/u-boot-nodtb.bin) &gt; /boot/efi/m1n1/boot.bin\n</code></pre>"},{"location":"sw/u-boot/#important-note-for-package-maintainers","title":"Important note for package maintainers","text":"<p>We recommend that you install the bare m1n1/U-Boot images and DTBs to a specific location on the root filesystem, and ship a script that backs up the existing image and creates a new one. This prevents regressions from making bricking the OS install. Users can simply mount the ESP in macOS, delete the new <code>boot.bin</code> and rename the backup to recover their machine to a known good state. For an example of how we do this in Asahi, see <code>uboot-asahi</code> and <code>asahi-scripts/update-m1n1</code> in the  <code>AsahiLinux/PKGBUILDs</code> repo.</p>"},{"location":"sw/u-boot/#helpful-u-boot-tricks","title":"Helpful U-Boot tricks","text":""},{"location":"sw/u-boot/#booting-from-a-usb","title":"Booting from a USB","text":"<ol> <li>Make sure the only USB storage device connected is the one you want to boot from</li> <li>Interrupt the default U-Boot script when prompted.</li> </ol> <pre><code>run bootcmd_usb0\n</code></pre> <p>If the USB fails to load, you might need to restart the USB, which can be done via:</p> <pre><code>usb start\nusb reset\n</code></pre> <p>If you are using a USB to load a recovery / \"Live CD\", ensure you also have <code>usbhid xhci_hcd</code> under MODULES in <code>/etc/mkinitcpio.conf</code>. Also have a read of Install_Arch_Linux_on_a_removable_medium for tips and tricks.</p>"},{"location":"sw/u-boot/#other-useful-u-boot-commands","title":"Other useful U-Boot commands","text":"<pre><code>bootd # Continue the default U-Boot script\nreset # Reboot the machine\npoweroff # Shutdown the machine completely\nnvme scan # Discover NVMe disks (required for next command to succeed)\nls nvme 0:4 / # List the contents of the paired EFI System Partition\n</code></pre>"},{"location":"sw/undoing-early-speaker-hacks/","title":"Undoing Early Speaker Hacks","text":""},{"location":"sw/undoing-early-speaker-hacks/#introduction","title":"Introduction","text":"<p>You are probably here because you tried to enable your speakers early, and a change in config between when you did this and the public release of speaker support broke something. You were warned.</p> <p>Below are some fixes for common early adopter hacks. Please try all of them before filing a bug. Your bug will be ignored if we find that you have failed to rectify any of the issues below.</p>"},{"location":"sw/undoing-early-speaker-hacks/#the-pro-audio-profile-iswas-enabled-for-the-internal-speakers-headphones","title":"The Pro Audio profile is/was enabled for the internal speakers / headphones","text":"<p>This one can happen in one of three ways: * You have changed the profile while headphones were plugged in * You have been using a very, very, very old version of <code>asahi-audio</code> * You have circumvented Wireplumber node permissions to experiment with device profiles</p> <p>In the first case change the profile back to <code>Default</code> (HiFi). In KDE's Audio settings change the profile back to <code>Default</code>. If no headphones are plugged in press <code>Show Inactive Devices</code>. The same should be possible with applications like <code>pavucontrol</code>. In doubt delete WirePlumber's sstate directory (<code>rm -rf ~/.local/state/wireplumber/</code>) and reboot.</p> <p>The fix in the two other cases is the the same: 1. <code>rm -rf ~/.local/state/wireplumber/</code> 2. Reinstall <code>asahi-audio</code>, Pipewire and Wireplumber 3. Reboot your machine</p>"},{"location":"sw/undoing-early-speaker-hacks/#you-have-files-in-etc-from-a-prerelease-version-of-asahi-audio","title":"You have files in /etc/ from a prerelease version of asahi-audio","text":"<p>Very old versions of <code>asahi-audio</code> stored their configuration inside <code>/etc/pipewire/</code> and <code>/etc/wireplumber/</code>. There should be nothing Asahi related in either of these directories or any of their subdirectories. To fix this: </p> <pre><code>rm -rf /etc/wireplumber/wireplumber.conf.d/*asahi*\nrm -rf /etc/wireplumber/main.lua.d/*asahi*\nrm -rf /etc/wireplumber/policy.lua.d/*asahi*\nrm -rf /etc/pipewire/pipewire.conf.d/*asahi*\n</code></pre> <p>Once you have done this, reinstall <code>asahi-audio</code>, Pipewire and Wireplumber then reboot your system.</p>"},{"location":"sw/undoing-early-speaker-hacks/#you-have-files-in-usrshare-from-a-prerelease-version-of-asahi-audio","title":"You have files in /usr/share/ from a prerelease version of asahi-audio","text":"<p>Prerelease versions of <code>asahi-audio</code> had files in <code>/usr/share/</code> that do not match the ones that shipped with 1.0. These files can conflict with the release versions, causing issues. You must manually remove all <code>asahi-audio</code> files:</p> <pre><code>rm -rf /usr/share/asahi-audio/\nrm -rf /usr/share/wireplumber/wireplumber.conf.d/*asahi*\nrm -rf /usr/share/wireplumber/main.lua.d/*asahi*\nrm -rf /usr/share/wireplumber/policy.lua.d/*asahi*\nrm -rf /usr/share/pipewire/pipewire.conf.d/*asahi*\n</code></pre> <p>Once you have done this, reinstall <code>asahi-audio</code>, Pipewire and Wireplumber then reboot your system.</p>"},{"location":"sw/undoing-early-speaker-hacks/#you-have-tried-to-manually-circumvent-our-kernel-level-safety-controls","title":"You have tried to manually circumvent our kernel-level safety controls","text":"<p>Remove <code>snd_soc_macaudio.please_blow_up_my_speakers</code> from wherever you added it. This could be the default kernel command line, <code>modprobe.d</code>, or somewhere else. Reboot when this is done.</p>"},{"location":"sw/undoing-early-speaker-hacks/#required-speaker-codec-settings-are-not-being-applied","title":"Required speaker codec settings are not being applied","text":"<p>This can happen if you are on an old kernel, or you have manually set <code>snd_soc_tas2764.apple_quirks</code> to some nonstandard value. As above, remove any reference to this module parameter, update your kernel, then reboot.</p>"},{"location":"sw/windows-11-vm/","title":"How to create a Windows 11 VM","text":""},{"location":"sw/windows-11-vm/#introduction","title":"Introduction","text":"<p>Here's a simple guide to install Windows 11 on Fedora Asahi Remix! This is going over how to install, configure, and manage your own instance of Windows 11 if you ever need anything from windows besides having to switch hardware or use bare metal windows machines.  Credits to: aykevl and Davide Calvaca</p> <p>Note</p> <p><code>dnf install @virtualization</code> is out of scope for this guide and not supported. It is, as of the writing of this unsupported and broken, as that includes virt-manager, libvirtd, and others. Please refer to https://github.com/AsahiLinux/docs/pull/206#issuecomment-3274648383 for more information. Please proceed with caution if you are experimenting with this. </p>"},{"location":"sw/windows-11-vm/#steps","title":"Steps","text":"<ol> <li>Install QEMU, via the command <code>dnf install qemu</code> </li> <li>Create a new directory on your desktop or wherever, naming it to whatever you want, i.e. let's say, <code>windows11</code> using <code>mkdir windows11</code> via an appropriate terminal application or right clicking and making a directory on your desktop. </li> <li>Go into that directory with <code>cd windows11</code> </li> <li>Download a Windows 11 ISO, appropriately the Windows 11 Professional build for ARM64 here. Feel free to rename it to a good name like <code>windows-11.iso</code> using <code>mv</code> in your appropriate terminal application of choice.</li> <li>Along with that ISO, it would be good to use the virtio-drivers to better improve performance of the machine. Feel free to download it here and renaming it appropriately to <code>win11-virtio.iso</code>.</li> <li>Create a virtual disk for your Windows 11 VM by using the command: <code>qemu-img create -f qcow2 win11.qcow2 25G</code> and adjusting it to how much disk space you would want, 25GB is a placeholder. </li> <li>Here we are going to create a startup script for our Windows 11 VM. Create a file named <code>win11.sh</code> and make sure it is executable with <code>chmod +x win11.sh</code>. The contents should be:</li> </ol> <pre><code> #!/bin/sh\n\nperformance_cores=$(awk '\n  /^processor/ { proc=$3 } \n  /^CPU part/ {\n    if ($4 == \"0x023\" || $4 == \"0x025\" || $4 == \"0x029\" || $4 == \"0x033\" || $4 == \"0x035\" || $4 == \"0x039\")\n      procs=procs ? procs\",\"proc : proc\n  } END { print procs }\n' /proc/cpuinfo)\n\ntaskset -c \"$performance_cores\" \\\n  qemu-system-aarch64 \\\n    -display sdl,gl=on \\\n    -cpu host \\\n    -M virt \\\n    -enable-kvm \\\n    -m 2G \\\n    -smp 2 \\\n    -bios /usr/share/edk2/aarch64/QEMU_EFI.fd \\\n    -hda win11.qcow2 \\\n    -device qemu-xhci \\\n    -device ramfb \\\n    -device usb-storage,drive=install \\\n    -drive if=none,id=install,format=raw,media=cdrom,file=windows-11-iot.iso \\\n    -device usb-storage,drive=virtio-drivers \\\n    -drive if=none,id=virtio-drivers,format=raw,media=cdrom,file=virtio-win.iso \\\n    -object rng-random,filename=/dev/urandom,id=rng0 \\\n    -device virtio-rng-pci,rng=rng0 \\\n    -audio driver=pipewire,model=virtio \\\n    -device usb-kbd \\\n    -device usb-tablet \\\n    -nic user,model=virtio-net-pci\n</code></pre> <p>Note</p> <p>You may have to adjust the file arguments if you have named it something different than windows-11.iso and virtio-win.iso </p> <ol> <li>Now run <code>./win11.sh</code>. A QEMU window pops up. After going through some boot screens, it should show \u201cPress any key to boot from CD or DVD\u2026\u201d. Press any key to boot Windows (quickly, because otherwise you\u2019ll end up in a UEFI console).</li> <li>Windows should now be booting, and you should end up in the Windows 11 setup. Most of this is straightforward, but there is one thing to be aware of: In the \u201cSelect location to install Windows 11\u201d, no drives are shown. Fix this by clicking \u201cLoad Driver\u201d, \u201cBrowse\u201d, expand the virtio-win drive, and select viostor \u2192 w11 \u2192 ARM64. Click OK. Select the \u201cRed Hat VirtIO SCSI controller\u201d that appears, and click install.</li> <li>During the installation, the VM will reboot a few times. Don\u2019t do anything, just let it happen.</li> <li>After installation you\u2019ll end up in the first boot wizard (to configure location, keyboard, etc). In the \u201cLet\u2019s connect you to a network\u201d, click \u201cInstall driver\u201d, open the virtio-win drive, navigate to NetKVM \u2192 w11 \u2192 ARM64, and click \u201cSelect folder\u201d. Wait a few seconds, and the network adapter should appear. You can now continue.</li> <li>After completing the installation, you should have a working Windows 11 install!</li> </ol>"},{"location":"sw/windows-11-vm/#post-installation","title":"Post Installation","text":"<p>Shut down the VM as usual to not make Windows scared (don\u2019t just exit the win11.sh script). To boot it again, simply run the ./win11.sh script again.</p> <p>After installation, you can remove the two ISOs and remove the following 4 lines from the win11.sh script:</p> <pre><code>-device usb-storage,drive=install \\\n    -drive if=none,id=install,format=raw,media=cdrom,file=windows-11-iot.iso \\\n    -device usb-storage,drive=virtio-drivers \\\n    -drive if=none,id=virtio-drivers,format=raw,media=cdrom,file=virtio-win.iso \\\n</code></pre>"},{"location":"sw/windows-11-vm/#ssh-steps","title":"SSH Steps","text":"<ol> <li>Modify the QEMU command line, replace <code>-nic user,model=virtio-net-pci</code> with <code>-device virtio-net-pci,netdev=net0 -netdev user,id=net0,hostfwd=tcp::5555-:22</code> to forward port 5555 to port 22 in the VM (you can pick another port if you like).</li> <li>Start \u201cOptional Features\u201d, click \u201cView features\u201d, search for OpenSSH Server, and install it. (This takes a while).</li> <li>Allow port 22 through the Windows firewall, see this StackOverflow post.</li> <li>Start \u201cServices\u201d, look for \u201cOpenSSH SSH Server\u201d, and start it (right click \u2192 start). Also, right click on it, go to properties, and set the startup type to automatic so it always starts at boot.</li> <li>Now you can SSH into your Windows system using ssh yourusername@localhost -p 5555!</li> <li>If you want to log into the system using public-key authentication, you can put the public key in C:\\ProgramData\\ssh\\administrators_authorized_keys (assuming your account is an administrator account).</li> </ol>"}]}